{"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"kind":"article","schemaVersion":{"minor":3,"major":0,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/observationbackport"]}],"metadata":{"title":"Observation backport","role":"article","roleHeading":"Article","modules":[{"name":"ComposableArchitecture"}]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport"},"sections":[],"abstract":[{"text":"Learn how the Observation framework from Swift 5.9 was backported to support iOS 16 and earlier,","type":"text"},{"type":"text","text":" "},{"text":"as well as the caveats of using the backported tools.","type":"text"}],"seeAlsoSections":[{"anchor":"Integrations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit"],"title":"Integrations","generated":true}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Overview","level":2,"anchor":"Overview"},{"inlineContent":[{"text":"With version 1.7 of the Composable Architecture we have introduced support for Swift 5.9‚Äôs","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"observation tools, "},{"inlineContent":[{"text":"and","type":"text"}],"type":"emphasis"},{"type":"text","text":" we have backported those tools to work in iOS 13 and later. Using the"},{"type":"text","text":" "},{"type":"text","text":"observation tools in pre-iOS 17 does require a few additional steps and there are some gotchas to be"},{"text":" ","type":"text"},{"type":"text","text":"aware of."}],"type":"paragraph"},{"level":2,"text":"The Perception framework","type":"heading","anchor":"The-Perception-framework"},{"inlineContent":[{"type":"text","text":"The Composable Architecture comes with a framework known as Perception, which is our backport of"},{"text":" ","type":"text"},{"type":"text","text":"Swift 5.9‚Äôs Observation to iOS 13, macOS 12, tvOS 13 and watchOS 6. For all of the tools in the"},{"type":"text","text":" "},{"type":"text","text":"Observation framework there is a corresponding tool in Perception."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, instead of the "},{"type":"codeVoice","code":"@Observable"},{"text":" macro, there is the ","type":"text"},{"type":"codeVoice","code":"@Perceptible"},{"text":" macro:","type":"text"}],"type":"paragraph"},{"code":["@Perceptible","class CounterModel {","  var count = 0","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"However, in order for a view to properly observe changes to a ‚Äúperceptible‚Äù model, you must","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"remember to wrap the contents of your view in the "},{"code":"WithPerceptionTracking","type":"codeVoice"},{"type":"text","text":" view:"}]},{"type":"codeListing","syntax":"swift","code":["struct CounterView: View {","  let model = CounterModel()","","  var body: some View {","    WithPerceptionTracking {","      Form {","        Text(self.model.count.description)","        Button(\"Decrement\") { self.model.count -= 1 }","        Button(\"Increment\") { self.model.count += 1 }","      }","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"This will make sure that the view subscribes to any fields accessed in the ","type":"text"},{"type":"codeVoice","code":"@Perceptible"},{"type":"text","text":" model so"},{"text":" ","type":"text"},{"type":"text","text":"that changes to those fields invalidate the view and cause it to re-render."}]},{"inlineContent":[{"type":"text","text":"If a field of a "},{"code":"@Percetible","type":"codeVoice"},{"text":" model is accessed in a view while ","type":"text"},{"inlineContent":[{"type":"text","text":"not"}],"type":"emphasis"},{"type":"text","text":" inside"},{"type":"text","text":" "},{"type":"codeVoice","code":"WithPerceptionTracking"},{"text":", then a runtime warning will be triggered:","type":"text"}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"text":"Perceptible state was accessed but is not being tracked. Track changes to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"state by wrapping your view in a ‚ÄòWithPerceptionTracking‚Äô view."}]}],"type":"aside","style":"note","name":"üü£ Runtime Warning"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To debug this, expand the warning in the Issue Navigator of Xcode (‚åò5), and click through the stack"},{"text":" ","type":"text"},{"type":"text","text":"frames displayed to find the line in your view where you are accessing state without being inside"},{"type":"text","text":" "},{"type":"codeVoice","code":"WithPerceptionTracking"},{"type":"text","text":"."}]},{"text":"Bindings","anchor":"Bindings","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"If you want to derive bindings from the store (see "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings","isActive":true},{"text":" for more information), then you","type":"text"},{"type":"text","text":" "},{"text":"would typically use the ","type":"text"},{"type":"codeVoice","code":"@Bindable"},{"text":" property wrapper that comes with SwiftUI:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct MyView: View {","  @Bindable var store: StoreOf<MyFeature>","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, "},{"type":"codeVoice","code":"@Bindable"},{"type":"text","text":" is iOS 17+. So, the Perception library comes with a tool that can be used in"},{"text":" ","type":"text"},{"text":"its place until you can target iOS 17 and later. You just have to qualify ","type":"text"},{"type":"codeVoice","code":"@Bindable"},{"text":" with the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"Perception"},{"type":"text","text":" namespace:"}]},{"syntax":"swift","code":["struct MyView: View {","  @Perception.Bindable var store: StoreOf<MyFeature>","  \/\/ ...","}"],"type":"codeListing"},{"level":2,"text":"Gotchas","anchor":"Gotchas","type":"heading"},{"inlineContent":[{"type":"text","text":"There are a few gotchas to be aware of when using "},{"type":"codeVoice","code":"WithPerceptionTracking"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"heading","text":"Lazy view closures","level":3,"anchor":"Lazy-view-closures"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are many ‚Äúlazy‚Äù closures in SwiftUI that evaluate only when something happens in the view, and"},{"text":" ","type":"text"},{"text":"not necessarily in the same stack frames as the ","type":"text"},{"code":"body","type":"codeVoice"},{"type":"text","text":" of the view. For example, the trailing"},{"type":"text","text":" "},{"text":"closure of ","type":"text"},{"type":"codeVoice","code":"ForEach"},{"text":" is called ","type":"text"},{"inlineContent":[{"type":"text","text":"after"}],"type":"emphasis"},{"text":" the ","type":"text"},{"type":"codeVoice","code":"body"},{"type":"text","text":" of the view has been computed."}]},{"type":"paragraph","inlineContent":[{"text":"This means that even if you wrap the body of the view in ","type":"text"},{"code":"WithPerceptionTracking","type":"codeVoice"},{"text":":","type":"text"}]},{"code":["WithPerceptionTracking {","  ForEach(store.scope(state: \\.rows, action: \\.rows), id: \\.state.id) { store in","    Text(store.title)","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"‚Ä¶the access to the row‚Äôs ","type":"text"},{"type":"codeVoice","code":"store.title"},{"type":"text","text":" happens "},{"type":"emphasis","inlineContent":[{"text":"outside","type":"text"}]},{"text":" ","type":"text"},{"code":"WithPerceptionTracking","type":"codeVoice"},{"text":", and hence will","type":"text"},{"type":"text","text":" "},{"type":"text","text":"not work and will trigger a runtime warning as described above."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The fix for this is to wrap the content of the trailing closure in another ","type":"text"},{"type":"codeVoice","code":"WithPerceptionTracking"},{"text":":","type":"text"}]},{"code":["WithPerceptionTracking {","  ForEach(store.scope(state: \\.rows, action: \\.rows), id: \\.state.id) { store in","    WithPerceptionTracking {","      Text(store.title)","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"heading","text":"Mixing legacy and modern features together","level":3,"anchor":"Mixing-legacy-and-modern-features-together"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Some problems can arise when mixing together features built in the ‚Äúlegacy‚Äù style, using"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true},{"type":"text","text":" and "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","type":"reference","isActive":true},{"type":"text","text":", and features built in the ‚Äúmodern‚Äù style, using the"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()"},{"text":" macro. The problems mostly manifest themselves as re-computing view bodies","type":"text"},{"type":"text","text":" "},{"type":"text","text":"more often than necessary, but that can also put strain on SwiftUI‚Äôs ability to figure out what"},{"text":" ","type":"text"},{"text":"state changed, and can cause glitches or exacerbate navigation bugs.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"See "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7#Incrementally-migrating","isActive":true,"type":"reference"},{"text":" for more information about this.","type":"text"}]}]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ViewStore"},{"text":" is an object that can observe state changes and send actions. They are most","type":"text"},{"type":"text","text":" "},{"text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used","type":"text"},{"type":"text","text":" "},{"text":"anywhere it makes sense to observe state or send actions.","type":"text"}],"role":"symbol","deprecated":true,"url":"\/documentation\/composablearchitecture\/viewstore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"ViewStore","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"ViewStore"}],"kind":"symbol","title":"ViewStore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"type":"topic","deprecated":true,"title":"WithViewStore","abstract":[{"type":"text","text":"A view helper that transforms a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"text":" into a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"text":" so that its state can be observed","type":"text"},{"type":"text","text":" "},{"text":"by a view builder.","type":"text"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","url":"\/documentation\/composablearchitecture\/withviewstore","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"WithViewStore","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"WithViewStore"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.7#Incrementally-migrating":{"type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.7#Incrementally-migrating","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7#Incrementally-migrating","abstract":[],"kind":"section","title":"Incrementally migrating"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftConcurrency":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency","title":"Adopting Swift concurrency","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/swiftconcurrency","abstract":[{"type":"text","text":"Learn how to write safe, concurrent effects using Swift‚Äôs structured concurrency."}],"role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"url":"\/documentation\/composablearchitecture\/swiftuiintegration","role":"collectionGroup","kind":"article","title":"SwiftUI Integration","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a SwiftUI application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"text":"around to views that need to interact with the application.","type":"text"}],"role":"symbol","url":"\/documentation\/composablearchitecture\/store","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}],"navigatorTitle":[{"text":"Store","kind":"identifier"}],"kind":"symbol","title":"Store","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Bindings":{"title":"Working with SwiftUI bindings","url":"\/documentation\/composablearchitecture\/bindings","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings","type":"topic","kind":"article","role":"article","abstract":[{"type":"text","text":"Learn how to connect features written in the Composable Architecture to SwiftUI bindings."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservableState()":{"abstract":[{"text":"Defines and implements conformance of the Observable protocol.","type":"text"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ObservableState"},{"kind":"text","text":"()"}],"type":"topic","title":"ObservableState()","url":"\/documentation\/composablearchitecture\/observablestate()"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"title":"ComposableArchitecture","url":"\/documentation\/composablearchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"text":" ","type":"text"},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"role":"collection","type":"topic","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UIKit":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit","title":"UIKit Integration","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a UIKit application."}],"kind":"article","url":"\/documentation\/composablearchitecture\/uikit","role":"collectionGroup"}}}