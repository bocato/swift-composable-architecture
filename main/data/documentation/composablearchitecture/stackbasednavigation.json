{"metadata":{"title":"Stack-based navigation","modules":[{"name":"ComposableArchitecture"}],"role":"article","roleHeading":"Article"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation"],["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"article","abstract":[{"text":"Learn about stack-based navigation, that is navigation modeled with collections, including how to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"model your domains, how to integrate features, how to test your features, and more."}],"primaryContentSections":[{"content":[{"text":"Overview","level":2,"type":"heading","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Stack-based navigation is the process of modeling navigation using collections of state. This style","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of navigation allows you to deep-link into any state of your application by simply constructing a"},{"type":"text","text":" "},{"text":"flat collection of data, handing it off to SwiftUI, and letting it take care of the rest.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"It also allows for complex and recursive navigation paths in your application."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Basics"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Pushing-features-onto-the-stack","isActive":true,"type":"reference"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"#Integration","isActive":true}]}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"#Dismissal"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"#Testing"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"identifier":"#StackState-vs-NavigationPath","type":"reference","isActive":true}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#UIKit","isActive":true,"type":"reference"}]}]}]},{"anchor":"Basics","level":2,"text":"Basics","type":"heading"},{"inlineContent":[{"type":"text","text":"The tools for this style of navigation include "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":", "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","type":"reference","isActive":true},{"type":"text","text":" and the"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:destination:fileID:filePath:line:column:)-9svqb","type":"reference","isActive":true},{"type":"text","text":" operator, as well as a new"},{"text":" ","type":"text"},{"type":"text","text":"initializer "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationStack\/init(path:root:destination:fileID:filePath:line:column:)"},{"type":"text","text":" on"},{"text":" ","type":"text"},{"type":"codeVoice","code":"NavigationStack"},{"text":" that behaves like the normal initializer, but is tuned specifically for","type":"text"},{"type":"text","text":" "},{"text":"the Composable Architecture.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The process of integrating features into a navigation stack largely consists of 2 steps:"},{"text":" ","type":"text"},{"text":"integrating the features’ domains together, and constructing a ","type":"text"},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":" for a"},{"text":" ","type":"text"},{"type":"text","text":"store describing all the views in the stack. One typically starts by integrating the features’"},{"type":"text","text":" "},{"type":"text","text":"domains together. This consists of defining a new reducer, typically called "},{"code":"Path","type":"codeVoice"},{"text":", that holds the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"domains of all the features that can be pushed onto the stack:"}],"type":"paragraph"},{"syntax":"swift","code":["@Reducer","struct RootFeature {","  \/\/ ...","","  @Reducer","  enum Path {","    case addItem(AddFeature)","    case detailItem(DetailFeature)","    case editItem(EditFeature)","  }","}"],"type":"codeListing"},{"style":"note","name":"Note","content":[{"inlineContent":[{"type":"text","text":"The "},{"code":"Path","type":"codeVoice"},{"type":"text","text":" reducer is identical to the "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" reducer that one creates for"},{"type":"text","text":" "},{"type":"text","text":"tree-based navigation when using enums. See "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation#Enum-state"},{"text":" for more","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"information."}],"type":"paragraph"}],"type":"aside"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once the "},{"type":"codeVoice","code":"Path"},{"text":" reducer is defined we can then hold onto ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","isActive":true},{"type":"text","text":" and "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","type":"reference"},{"type":"text","text":" in the"},{"text":" ","type":"text"},{"type":"text","text":"feature that manages the navigation stack:"}]},{"syntax":"swift","code":["@Reducer","struct RootFeature {","  @ObservableState","  struct State {","    var path = StackState<Path.State>()","    \/\/ ...","  }","  enum Action {","    case path(StackActionOf<Path>)","    \/\/ ...","  }","}"],"type":"codeListing"},{"content":[{"inlineContent":[{"type":"text","text":""},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","isActive":true},{"type":"text","text":" is generic over both state and action of the "},{"type":"codeVoice","code":"Path"},{"text":" domain, and so you can","type":"text"},{"type":"text","text":" "},{"type":"text","text":"use the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackActionOf"},{"type":"text","text":" typealias to simplify the syntax a bit. This is different from"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","isActive":true,"type":"reference"},{"type":"text","text":", which only has a single generic of "},{"type":"codeVoice","code":"Action"},{"text":".","type":"text"}],"type":"paragraph"}],"type":"aside","name":"Tip","style":"tip"},{"inlineContent":[{"text":"And then we must make use of the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:)","type":"reference","isActive":true},{"type":"text","text":" method to integrate the domains of"},{"text":" ","type":"text"},{"type":"text","text":"all the features that can be navigated to with the domain of the parent feature:"}],"type":"paragraph"},{"code":["@Reducer","struct RootFeature {","  \/\/ ...","","  var body: some ReducerOf<Self> {","    Reduce { state, action in ","      \/\/ Core logic for root feature","    }","    .forEach(\\.path, action: \\.path)","  }","}"],"type":"codeListing","syntax":"swift"},{"style":"note","name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You do not need to specify "},{"type":"codeVoice","code":"Path()"},{"text":" in a trailing closure of ","type":"text"},{"code":"forEach","type":"codeVoice"},{"type":"text","text":" because it can be"},{"type":"text","text":" "},{"text":"automatically inferred from ","type":"text"},{"code":"@Reducer enum Path","type":"codeVoice"},{"text":".","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"text":"That completes the steps to integrate the child and parent features together for a navigation stack.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Next we must integrate the child and parent views together. This is done by a"},{"type":"text","text":" "},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":" using a special initializer that comes with this library, called"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationStack\/init(path:root:destination:fileID:filePath:line:column:)"},{"text":". This initializer takes 3","type":"text"},{"type":"text","text":" "},{"type":"text","text":"arguments: a binding of a store focused in on "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"text":" and ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","isActive":true},{"type":"text","text":" in your domain, a"},{"type":"text","text":" "},{"type":"text","text":"trailing view builder for the root view of the stack, and another trailing view builder for all of"},{"type":"text","text":" "},{"type":"text","text":"the views that can be pushed onto the stack:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["NavigationStack(","  path: \/\/ Store focused on StackState and StackAction",") {","  \/\/ Root view of the navigation stack","} destination: { store in","  \/\/ A view for each case of the Path.State enum","}"]},{"inlineContent":[{"text":"To fill in the first argument you only need to scope a binding of your store to the ","type":"text"},{"type":"codeVoice","code":"path"},{"text":" state and","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"path"},{"type":"text","text":" action you already hold in the root feature:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct RootView: View {","  @Bindable var store: StoreOf<RootFeature>","","  var body: some View {","    NavigationStack(","      path: $store.scope(state: \\.path, action: \\.path)","    ) {","      \/\/ Root view of the navigation stack","    } destination: { store in","      \/\/ A view for each case of the Path.State enum","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"The root view can be anything you want, and would typically have some ","type":"text"},{"type":"codeVoice","code":"NavigationLink"},{"text":"s or other","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"buttons that push new data onto the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":" held in your domain."}]},{"inlineContent":[{"text":"And the last trailing closure is provided a store of ","type":"text"},{"code":"Path","type":"codeVoice"},{"type":"text","text":" domain, and you can use the"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/case","isActive":true,"type":"reference"},{"type":"text","text":" computed property to destructure each case of the "},{"type":"codeVoice","code":"Path"},{"type":"text","text":" to obtain a store focused"},{"text":" ","type":"text"},{"text":"on just that case:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["} destination: { store in","  switch store.case {","  case .addItem(let store):","  case .detailItem(let store):","  case .editItem(let store):","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This will give you compile-time guarantees that you have handled each case of the "},{"type":"codeVoice","code":"Path.State"},{"type":"text","text":" enum,"},{"text":" ","type":"text"},{"text":"which can be nice for when you add new types of destinations to the stack.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In each of these cases you can return any kind of view that you want, but ultimately you want to"},{"text":" ","type":"text"},{"type":"text","text":"scope the store down to a specific case of the "},{"type":"codeVoice","code":"Path.State"},{"type":"text","text":" enum:"}]},{"type":"codeListing","syntax":"swift","code":["} destination: { store in","  switch store.case {","  case .addItem(let store):","    AddView(store: store)","  case .detailItem(let store):","    DetailView(store: store)","  case .editItem(let store):","    EditView(store: store)","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And that is all it takes to integrate multiple child features together into a navigation stack,"},{"text":" ","type":"text"},{"type":"text","text":"and done so with concisely modeled domains. Once those steps are taken you can easily add"},{"type":"text","text":" "},{"type":"text","text":"additional features to the stack by adding a new case to the "},{"type":"codeVoice","code":"Path"},{"text":" reducer state and action enums,","type":"text"},{"type":"text","text":" "},{"text":"and you get complete introspection into what is happening in each child feature from the parent.","type":"text"},{"text":" ","type":"text"},{"text":"Continue reading into ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackBasedNavigation#Integration","isActive":true},{"text":" for more information on that.","type":"text"}]},{"text":"Pushing features onto the stack","level":2,"type":"heading","anchor":"Pushing-features-onto-the-stack"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are two primary ways to push features onto the stack once you have their domains integrated"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"code":"NavigationStack","type":"codeVoice"},{"type":"text","text":" in the view, as described above. The simplest way is to use the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationLink\/init(state:label:fileID:filePath:line:column:)"},{"type":"text","text":" initializer on"},{"type":"text","text":" "},{"type":"codeVoice","code":"NavigationLink"},{"text":", which requires you to specify the state of the feature you want to push onto the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"stack. You must specify the full state, going all the way back to the "},{"type":"codeVoice","code":"Path"},{"type":"text","text":" reducer’s state:"}]},{"type":"codeListing","syntax":"swift","code":["Form {","  NavigationLink(","    state: RootFeature.Path.State.detail(DetailFeature.State())","  ) {","    Text(\"Detail\")","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When the link is tapped a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/push(id:state:)"},{"text":" action will be sent, causing the ","type":"text"},{"code":"path","type":"codeVoice"},{"type":"text","text":" "},{"text":"collection to be mutated and appending the ","type":"text"},{"type":"codeVoice","code":".detail"},{"type":"text","text":" state to the stack."}]},{"inlineContent":[{"type":"text","text":"This is by far the simplest way to navigate to a screen, but it also has its drawbacks. In"},{"text":" ","type":"text"},{"type":"text","text":"particular, it makes modularity difficult since the view that holds onto the "},{"type":"codeVoice","code":"NavigationLink"},{"type":"text","text":" must"},{"type":"text","text":" "},{"text":"have access to the ","type":"text"},{"type":"codeVoice","code":"Path.State"},{"type":"text","text":" type, which means it needs to build all of the "},{"type":"codeVoice","code":"Path"},{"text":" reducer,","type":"text"},{"type":"text","text":" "},{"text":"including ","type":"text"},{"inlineContent":[{"text":"every","type":"text"}],"type":"emphasis"},{"type":"text","text":" feature that can be navigated to."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This hurts modularity because it is no longer possible to build each feature that can be presented","type":"text"},{"type":"text","text":" "},{"text":"in the stack individually, in full isolation. You must build them all together. Technically you can","type":"text"},{"text":" ","type":"text"},{"text":"move all features’ ","type":"text"},{"type":"codeVoice","code":"State"},{"text":" types (and only the ","type":"text"},{"type":"codeVoice","code":"State"},{"type":"text","text":" types) to a separate module, and then"},{"type":"text","text":" "},{"text":"features can depend on only that module without needing to build every feature’s reducer.","type":"text"}]},{"inlineContent":[{"text":"Another alternative is to forgo ","type":"text"},{"type":"codeVoice","code":"NavigationLink"},{"type":"text","text":" entirely and just use "},{"type":"codeVoice","code":"Button"},{"type":"text","text":" that sends an action"},{"type":"text","text":" "},{"type":"text","text":"in the child feature’s domain:"}],"type":"paragraph"},{"code":["Form {","  Button(\"Detail\") {","    store.send(.detailButtonTapped)","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Then the root feature can listen for that action and append to the "},{"code":"path","type":"codeVoice"},{"type":"text","text":" with new state in order"},{"type":"text","text":" "},{"type":"text","text":"to drive navigation:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["case .path(.element(id: _, action: .list(.detailButtonTapped))):","  state.path.append(.detail(DetailFeature.State()))","  return .none"]},{"text":"Integration","type":"heading","anchor":"Integration","level":2},{"inlineContent":[{"text":"Once your features are integrated together using the steps above, your parent feature gets instant","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"access to everything happening inside the navigation stack. You can use this as a means to integrate"},{"type":"text","text":" "},{"text":"the logic of the stack element features with the parent feature. For example, if you want to detect","type":"text"},{"type":"text","text":" "},{"text":"when the “Save” button inside the edit feature is tapped, you can simply destructure on that action.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This consists of pattern matching on the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction"},{"type":"text","text":", then the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/element(id:action:)"},{"text":" action, then the feature you are interested in, and finally the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"action you are interested in:"}],"type":"paragraph"},{"code":["case let .path(.element(id: id, action: .editItem(.saveButtonTapped))):","  \/\/ ..."],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Once inside that case you can then try extracting out the feature state so that you can perform"},{"type":"text","text":" "},{"type":"text","text":"additional logic, such as popping the “edit” feature and saving the edited item to the database:"}],"type":"paragraph"},{"code":["case let .path(.element(id: id, action: .editItem(.saveButtonTapped))):","  guard let editItemState = state.path[id: id]?.editItem","  else { return .none }","","  state.path.pop(from: id)","  return .run { _ in","    await self.database.save(editItemState.item)","  }"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Note that when destructuring the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/element(id:action:)","isActive":true},{"text":" action we get access to not","type":"text"},{"type":"text","text":" "},{"text":"only the action that happened in the child domain, but also the ID of the element in the stack.","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":" automatically manages IDs for every feature added to the stack, which can be used"},{"type":"text","text":" "},{"text":"to look up specific elements in the stack using","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/subscript(id:fileID:filePath:line:column:)","type":"reference"},{"type":"text","text":" and pop elements from the stack using"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/pop(from:)","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"level":2,"anchor":"Dismissal","text":"Dismissal","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Dismissing a feature in a stack is as simple as mutating the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","isActive":true},{"text":" using one of its","type":"text"},{"text":" ","type":"text"},{"text":"methods, such as ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/popLast()"},{"text":", ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/pop(from:)"},{"text":" and more:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["case .closeButtonTapped:","  state.popLast()","  return .none"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, in order to do this you must have access to that stack state, and usually only the parent"},{"text":" ","type":"text"},{"text":"has access. But often we would like to encapsulate the logic of dismissing a feature to be inside","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the child feature without needing explicit communication with the parent."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftUI provides a wonderful tool for allowing child "},{"type":"emphasis","inlineContent":[{"text":"views","type":"text"}]},{"text":" to dismiss themselves from the parent,","type":"text"},{"type":"text","text":" "},{"text":"all without any explicit communication with the parent. It’s an environment value called ","type":"text"},{"code":"dismiss","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and it can be used like so:"}]},{"code":["struct ChildView: View {","  @Environment(\\.dismiss) var dismiss","  var body: some View {","    Button(\"Close\") { self.dismiss() }","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"When "},{"type":"codeVoice","code":"self.dismiss()"},{"text":" is invoked, SwiftUI finds the closest parent view that is presented in the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"navigation stack, and removes that state from the collection powering the stack. This can be"},{"type":"text","text":" "},{"text":"incredibly useful, but it is also relegated to the view layer. It is not possible to use","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"dismiss"},{"text":" elsewhere, like in an observable object, which would allow you to have nuanced logic","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for dismissal such as validation or async work."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The Composable Architecture has a similar tool, except it is appropriate to use from a reducer,"},{"type":"text","text":" "},{"text":"where the rest of your feature’s logic and behavior resides. It is accessed via the library’s","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"dependency management system (see "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","isActive":true},{"text":") using ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect","isActive":true},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@Reducer","struct Feature {","  @ObservableState","  struct State { \/* ... *\/ }","  enum Action { ","    case closeButtonTapped","    \/\/ ...","  }","  @Dependency(\\.dismiss) var dismiss","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      switch action {","      case .closeButtonTapped:","        return .run { _ in await self.dismiss() }","      \/\/ ...","      }","    }","  }","}"]},{"name":"Note","content":[{"inlineContent":[{"text":"The ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect","isActive":true,"type":"reference"},{"text":" function is async which means it cannot be invoked directly inside a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"reducer. Instead it must be called from"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}],"type":"aside","style":"note"},{"inlineContent":[{"text":"When ","type":"text"},{"type":"codeVoice","code":"self.dismiss()"},{"type":"text","text":" is invoked it will remove the corresponding value from the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","isActive":true,"type":"reference"},{"type":"text","text":" "},{"text":"powering the navigation stack. It does this by sending a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/popFrom(id:)"},{"text":" action back","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"into the system, causing the feature state to be removed. This allows you to encapsulate the logic"},{"type":"text","text":" "},{"text":"for dismissing a child feature entirely inside the child domain without explicitly communicating","type":"text"},{"type":"text","text":" "},{"text":"with the parent.","type":"text"}],"type":"paragraph"},{"type":"aside","name":"Note","content":[{"inlineContent":[{"text":"Because dismissal is handled by sending an action, it is not valid to ever send an action","type":"text"},{"type":"text","text":" "},{"type":"text","text":"after invoking "},{"type":"codeVoice","code":"dismiss()"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["return .run { send in ","  await self.dismiss()","  await send(.tick)  \/\/ ⚠️","}"]},{"inlineContent":[{"text":"To do so would be to send an action for a feature while its state is not present in the stack,","type":"text"},{"text":" ","type":"text"},{"text":"and that will cause a runtime warning in Xcode and a test failure when running tests.","type":"text"}],"type":"paragraph"}],"style":"note"},{"content":[{"inlineContent":[{"type":"text","text":"SwiftUI’s environment value "},{"code":"@Environment(\\.dismiss)","type":"codeVoice"},{"type":"text","text":" and the Composable Architecture’s"},{"text":" ","type":"text"},{"type":"text","text":"dependency value "},{"type":"codeVoice","code":"@Dependency(\\.dismiss)"},{"type":"text","text":" serve similar purposes, but are completely different"},{"text":" ","type":"text"},{"type":"text","text":"types. SwiftUI’s environment value can only be used in SwiftUI views, and this library’s"},{"type":"text","text":" "},{"type":"text","text":"dependency value can only be used inside reducers."}],"type":"paragraph"}],"type":"aside","style":"warning","name":"Warning"},{"level":2,"text":"Testing","type":"heading","anchor":"Testing"},{"type":"paragraph","inlineContent":[{"text":"A huge benefit of using the tools of this library to model navigation stacks is that testing becomes","type":"text"},{"type":"text","text":" "},{"text":"quite easy. Further, using “non-exhaustive testing” (see ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Non-exhaustive-testing"},{"type":"text","text":") can"},{"type":"text","text":" "},{"type":"text","text":"be very useful for testing navigation since you often only want to assert on a few high level"},{"text":" ","type":"text"},{"type":"text","text":"details and not all state mutations and effects."}]},{"type":"paragraph","inlineContent":[{"text":"As an example, consider the following simple counter feature that wants to dismiss itself if its","type":"text"},{"type":"text","text":" "},{"type":"text","text":"count is greater than or equal to 5:"}]},{"syntax":"swift","code":["@Reducer","struct CounterFeature {","  @ObservableState","  struct State: Equatable {","    var count = 0","  }","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","  }","","  @Dependency(\\.dismiss) var dismiss","","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        return .none","","      case .incrementButtonTapped:","        state.count += 1","        return state.count >= 5","          ? .run { _ in await self.dismiss() }","          : .none","      }","    }","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then let’s embed that feature into a parent feature:"}]},{"code":["@Reducer","struct Feature {","  @ObservableState","  struct State: Equatable {","    var path = StackState<Path.State>()","  }","  enum Action {","    case path(StackActionOf<Path>)","  }","","  @Reducer  ","  struct Path {","    enum State: Equatable { case counter(Counter.State) }","    enum Action { case counter(Counter.Action) }","    var body: some ReducerOf<Self> {","      Scope(state: \\.counter, action: \\.counter) { Counter() }","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      \/\/ Logic and behavior for core feature.","    }","    .forEach(\\.path, action: \\.path) { Path() }","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Now let’s try to write a test on the "},{"type":"codeVoice","code":"Feature"},{"type":"text","text":" reducer that proves that when the child counter"},{"text":" ","type":"text"},{"type":"text","text":"feature’s count is incremented above 5 it will dismiss itself. To do this we will construct a"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"text":" for ","type":"text"},{"type":"codeVoice","code":"Feature"},{"text":" that starts in a state with a single counter already on the stack:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@Test","func dismissal() {","  let store = TestStore(","    initialState: Feature.State(","      path: StackState([","        CounterFeature.State(count: 3)","      ])","    )","  ) {","    CounterFeature()","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"Then we can send the ","type":"text"},{"type":"codeVoice","code":".incrementButtonTapped"},{"text":" action in the counter child feature inside the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"stack in order to confirm that the count goes up by one, but in order to do so we need to provide"},{"type":"text","text":" "},{"text":"an ID:","type":"text"}]},{"code":["await store.send(\\.path[id: ???].counter.incrementButtonTapped) {","  \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"As mentioned in ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackBasedNavigation#Integration","type":"reference","isActive":true},{"type":"text","text":", "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","isActive":true},{"type":"text","text":" automatically manages IDs"},{"type":"text","text":" "},{"text":"for each feature and those IDs are mostly opaque to the outside. However, specifically in tests","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"those IDs are integers and generational, which means the ID starts at 0 and then for each feature"},{"text":" ","type":"text"},{"text":"pushed onto the stack the global ID increments by one.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This means that when the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" were constructed with a single element already in the stack"},{"type":"text","text":" "},{"text":"that it was given an ID of 0, and so that is the ID we can use when sending an action:","type":"text"}]},{"syntax":"swift","code":["await store.send(\\.path[id: 0].counter.incrementButtonTapped) {","  \/\/ ...","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Next we want to assert how the counter feature in the stack changes when the action is sent. To","type":"text"},{"type":"text","text":" "},{"text":"do this we must go through multiple layers: first subscript through the ID, then unwrap the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"optional value returned from that subscript, then pattern match on the case of the "},{"type":"codeVoice","code":"Path.State"},{"type":"text","text":" "},{"type":"text","text":"enum, and then perform the mutation."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The library provides two different tools to perform all of these steps in a single step. You can"},{"text":" ","type":"text"},{"type":"text","text":"use the "},{"type":"codeVoice","code":"XCTModify"},{"type":"text","text":" helper:"}]},{"type":"codeListing","syntax":"swift","code":["await store.send(\\.path[id: 0].counter.incrementButtonTapped) {","  XCTModify(&$0.path[id: 0], case: \\.counter) {","    $0.count = 4","  }","}"]},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"XCTModify"},{"type":"text","text":" function takes an "},{"code":"inout","type":"codeVoice"},{"text":" piece of enum state as its first argument and a case","type":"text"},{"type":"text","text":" "},{"text":"path for its second argument, and then uses the case path to extract the payload in that case,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"allow you to perform a mutation to it, and embed the data back into the enum. So, in the code"},{"text":" ","type":"text"},{"type":"text","text":"above we are subscripting into ID 0, isolating the "},{"type":"codeVoice","code":".counter"},{"type":"text","text":" case of the "},{"code":"Path.State","type":"codeVoice"},{"type":"text","text":" enum,"},{"type":"text","text":" "},{"text":"and mutating the ","type":"text"},{"code":"count","type":"codeVoice"},{"type":"text","text":" to be 4 since it incremented by one. Further, if the case of "},{"type":"codeVoice","code":"$0.path[id: 0]"},{"text":" ","type":"text"},{"type":"text","text":"didn’t match the case path, then a test failure would be emitted."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Another option is to use "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/subscript(id:case:)"},{"text":" to simultaneously subscript into an","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"ID on the stack "},{"inlineContent":[{"type":"text","text":"and"}],"type":"emphasis"},{"type":"text","text":" a case of the path enum:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["await store.send(\\.path[id: 0].counter.incrementButtonTapped) {","  $0.path[id: 0, case: \\.counter]?.count = 4","}"]},{"inlineContent":[{"type":"text","text":"The "},{"code":"XCTModify","type":"codeVoice"},{"text":" style is best when you have many things you need to modify on the state, and the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/subscript(id:case:)"},{"text":" style is best when you have simple mutations.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Continuing with the test, we can send it one more time to see that the count goes up to 5:","type":"text"}]},{"syntax":"swift","code":["await store.send(\\.path[id: 0].counter.incrementButtonTapped) {","  XCTModify(&$0.path[id: 0], case: \\.counter) {","    $0.count = 5","  }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"And then we finally expect that the child dismisses itself, which manifests itself as the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/popFrom(id:)"},{"type":"text","text":" action being sent to pop the counter feature off the stack, which we"},{"type":"text","text":" "},{"text":"can assert using the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:fileID:file:line:column:)-53wic"},{"type":"text","text":" method"},{"text":" ","type":"text"},{"text":"on ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["await store.receive(\\.path.popFrom) {","  $0.path[id: 0] = nil","}"]},{"type":"paragraph","inlineContent":[{"text":"If you need to assert that a specific child action is received, you can construct a case key path","type":"text"},{"text":" ","type":"text"},{"text":"for a specific child element action by subscripting on the ","type":"text"},{"type":"codeVoice","code":"\\.path"},{"type":"text","text":" case with the element ID."}]},{"inlineContent":[{"text":"For example, if the child feature performed an effect that sent an ","type":"text"},{"code":".response","type":"codeVoice"},{"type":"text","text":" action, you"},{"type":"text","text":" "},{"text":"can test that it is received:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["await store.receive(\\.path[id: 0].counter.response) {","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"text":"This shows how we can write very nuanced tests on how parent and child features interact with each","type":"text"},{"type":"text","text":" "},{"text":"other in a navigation stack.","type":"text"}]},{"inlineContent":[{"type":"text","text":"However, the more complex the features become, the more cumbersome testing their integration can be."},{"text":" ","type":"text"},{"text":"By default, ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true,"type":"reference"},{"text":" requires us to be exhaustive in our assertions. We must assert on how","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"every piece of state changes, how every effect feeds data back into the system, and we must make"},{"type":"text","text":" "},{"type":"text","text":"sure that all effects finish by the end of the test (see "},{"type":"text","text":"doc:Testing"},{"text":" for more info).","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"But "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true},{"text":" also supports a form of testing known as “non-exhaustive testing” that allows you","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to assert on only the parts of the features that you actually care about (see"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Non-exhaustive-testing","isActive":true},{"text":" for more info).","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, if we turn off exhaustivity on the test store (see "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","isActive":true},{"type":"text","text":") then we"},{"type":"text","text":" "},{"text":"can assert at a high level that when the increment button is tapped twice that eventually we receive","type":"text"},{"type":"text","text":" "},{"text":"a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/popFrom(id:)","isActive":true,"type":"reference"},{"text":" action:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["@Test","func dismissal() {","  let store = TestStore(","    initialState: Feature.State(","      path: StackState([","        CounterFeature.State(count: 3)","      ])","    )","  ) {","    CounterFeature()","  }","  store.exhaustivity = .off","","  await store.send(\\.path[id: 0].counter.incrementButtonTapped)","  await store.send(\\.path[id: 0].counter.incrementButtonTapped)","  await store.receive(\\.path.popFrom)","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This essentially proves the same thing that the previous test proves, but it does so in much fewer"},{"type":"text","text":" "},{"type":"text","text":"lines and is more resilient to future changes in the features that we don’t necessarily care about."}]},{"text":"StackState vs NavigationPath","type":"heading","anchor":"StackState-vs-NavigationPath","level":2},{"inlineContent":[{"text":"SwiftUI comes with a powerful type for modeling data in navigation stacks called","type":"text"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/navigationpath"},{"text":", and so you might wonder why we created our own data type,","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","isActive":true},{"type":"text","text":", instead of leveraging "},{"type":"codeVoice","code":"NavigationPath"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"NavigationPath"},{"text":" data type is a type-erased list of data that is tuned specifically for","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"NavigationStack"},{"text":"s. It allows you to maximally decouple features in the stack since you can add any","type":"text"},{"text":" ","type":"text"},{"text":"kind of data to a path, as long as it is ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":":"}]},{"code":["var path = NavigationPath()","path.append(1)","path.append(\"Hello\")","path.append(false)"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"And SwiftUI interprets that data by describing what view should be pushed onto the stack","type":"text"},{"type":"text","text":" "},{"text":"corresponding to a type of data:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct RootView: View {","  @State var path = NavigationPath()","","  var body: some View {","    NavigationStack(path: self.$path) {","      Form {","        \/\/ ...","      }","      .navigationDestination(for: Int.self) { integer in ","        \/\/ ...","      }","      .navigationDestination(for: String.self) { string in ","        \/\/ ...","      }","      .navigationDestination(for: Bool.self) { bool in ","        \/\/ ...","      }","    }","  }","}"]},{"inlineContent":[{"text":"This can be powerful, but it does come with some downsides. Because the underlying data is","type":"text"},{"type":"text","text":" "},{"text":"type-erased, SwiftUI has decided to not expose much API on the data type. For example, the only","type":"text"},{"text":" ","type":"text"},{"text":"things you can do with a path are append data to the end of it, as seen above, or remove data","type":"text"},{"type":"text","text":" "},{"type":"text","text":"from the end of it:"}],"type":"paragraph"},{"code":["path.removeLast()"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Or count the elements in the path:"}],"type":"paragraph"},{"syntax":"swift","code":["path.count"],"type":"codeListing"},{"inlineContent":[{"text":"And that is all. You can’t insert or remove elements from anywhere but the end, and you can’t even","type":"text"},{"type":"text","text":" "},{"text":"iterate over the path:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let path: NavigationPath = …","for element in path {  \/\/ 🛑","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This can make it very difficult to analyze what is on the stack and aggregate data across the"},{"type":"text","text":" "},{"type":"text","text":"entire stack."}]},{"inlineContent":[{"text":"The Composable Architecture’s ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","isActive":true,"type":"reference"},{"type":"text","text":" serves a similar purpose as "},{"code":"NavigationPath","type":"codeVoice"},{"text":", but","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with different trade offs:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","isActive":true,"type":"reference"},{"text":" is fully statically typed, and so you cannot add just ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"any"}]},{"type":"text","text":" kind of data to it."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"But, "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","isActive":true},{"type":"text","text":" conforms to the "},{"type":"codeVoice","code":"Collection"},{"text":" protocol (as well as ","type":"text"},{"type":"codeVoice","code":"RandomAccessCollection"},{"text":" and","type":"text"},{"text":" ","type":"text"},{"code":"RangeReplaceableCollection","type":"codeVoice"},{"text":"), which gives you access to a lot of methods for manipulating the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"collection and introspecting what is inside the stack."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Your feature’s data does not need to be "},{"type":"codeVoice","code":"Hashable"},{"text":" to put it in a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","type":"reference"},{"type":"text","text":". The data type"},{"text":" ","type":"text"},{"text":"manages stable identifiers for your features under the hood, and automatically derives a hash","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"value from those identifiers."}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"text":"We feel that ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","isActive":true},{"text":" offers a nice balance between full runtime flexibility and static,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"compile-time guarantees, and that it is the perfect tool for modeling navigation stacks in the"},{"text":" ","type":"text"},{"text":"Composable Architecture.","type":"text"}],"type":"paragraph"},{"anchor":"UIKit","level":2,"type":"heading","text":"UIKit"},{"inlineContent":[{"type":"text","text":"The library also comes with a tool that allows you to use UIKit’s "},{"type":"codeVoice","code":"UINavigationController"},{"text":" in a","type":"text"},{"text":" ","type":"text"},{"text":"state-driven manner. If you model your domains using ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","isActive":true},{"text":" as described above, then you","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"can use the special "},{"code":"NavigationStackController","type":"codeVoice"},{"type":"text","text":" type to implement a view controller for your stack:"}],"type":"paragraph"},{"code":["class AppController: NavigationStackController {","  private var store: StoreOf<AppFeature>!","","  convenience init(store: StoreOf<AppFeature>) {","    @UIBindable var store = store","","    self.init(path: $store.scope(state: \\.path, action: \\.path)) {","      RootViewController(store: store)","    } destination: { store in ","      switch store.case {","      case .addItem(let store):","        AddViewController(store: store)","      case .detailItem(let store):","        DetailViewController(store: store)","      case .editItem(let store):","        EditViewController(store: store)","      }","    }","","    self.model = model","  }","}"],"syntax":"swift","type":"codeListing"}],"kind":"content"}],"seeAlsoSections":[{"anchor":"Stack-based-navigation","generated":true,"title":"Stack-based navigation","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackActionOf","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackElementID","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:destination:fileID:filePath:line:column:)-9svqb"]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackBasedNavigation","interfaceLanguage":"swift"},"sections":[],"variants":[{"paths":["\/documentation\/composablearchitecture\/stackbasednavigation"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/DependencyManagement":{"type":"topic","url":"\/documentation\/composablearchitecture\/dependencymanagement","title":"Dependencies","abstract":[{"text":"Learn how to register dependencies with the library so that they can be immediately accessible from","type":"text"},{"type":"text","text":" "},{"type":"text","text":"any reducer."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","role":"article","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Navigation":{"type":"topic","role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation","title":"Navigation","kind":"article","url":"\/documentation\/composablearchitecture\/navigation","abstract":[{"text":"Learn how to use the navigation tools in the library, including how to best model your domains, how","type":"text"},{"type":"text","text":" "},{"text":"to integrate features in the reducer and view layers, and how to write tests.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackState/subscript(id:case:)":{"title":"subscript(id:case:)","url":"\/documentation\/composablearchitecture\/stackstate\/subscript(id:case:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/subscript(id:case:)","type":"topic","role":"symbol","kind":"symbol","fragments":[{"text":"subscript","kind":"keyword"},{"kind":"text","text":"<"},{"text":"Case","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"id","kind":"externalParam"},{"text":" _: ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture14StackElementIDV","text":"StackElementID"},{"text":", ","kind":"text"},{"text":"case","kind":"externalParam"},{"text":" _: ","kind":"text"},{"kind":"typeIdentifier","text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"text":"<","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Case","kind":"typeIdentifier"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Case"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"Accesses the value associated with the given id and case for reading and writing."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction/popFrom(id:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/popFrom(id:)","type":"topic","kind":"symbol","title":"StackAction.popFrom(id:)","abstract":[{"text":"An action sent to dismiss the associated stack element at a given identifier.","type":"text"}],"fragments":[{"text":"case","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"popFrom"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"id"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture14StackElementIDV","kind":"typeIdentifier","text":"StackElementID"},{"kind":"text","text":")"}],"url":"\/documentation\/composablearchitecture\/stackaction\/popfrom(id:)","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackElementID":{"title":"StackElementID","url":"\/documentation\/composablearchitecture\/stackelementid","type":"topic","abstract":[{"type":"text","text":"An opaque type that identifies an element of "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"text":".","type":"text"}],"role":"symbol","kind":"symbol","navigatorTitle":[{"text":"StackElementID","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StackElementID","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackElementID"},"#UIKit":{"url":"#UIKit","title":"UIKit","type":"link","titleInlineContent":[{"type":"text","text":"UIKit"}],"identifier":"#UIKit"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"title":"ComposableArchitecture","url":"\/documentation\/composablearchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"text":" ","type":"text"},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"role":"collection","type":"topic","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUI/NavigationStack/init(path:root:destination:fileID:filePath:line:column:)":{"type":"topic","conformance":{"constraints":[{"type":"codeVoice","code":"Root"},{"type":"text","text":" conforms to "},{"code":"View","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"url":"\/documentation\/composablearchitecture\/swiftui\/navigationstack\/init(path:root:destination:fileid:filepath:line:column:)","title":"init(path:root:destination:fileID:filePath:line:column:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"State"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Action"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Destination"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"R"},{"text":">(","kind":"text"},{"text":"path","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Binding","preciseIdentifier":"s:7SwiftUI7BindingV"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture5StoreC","kind":"typeIdentifier","text":"Store"},{"kind":"text","text":"<"},{"text":"StackState","preciseIdentifier":"s:22ComposableArchitecture10StackStateV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"text":">, ","kind":"text"},{"text":"StackAction","preciseIdentifier":"s:22ComposableArchitecture11StackActionO","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"text":", ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">>>, "},{"text":"root","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"destination","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Store","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">) -> "},{"text":"Destination","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"filePath"},{"kind":"text","text":": "},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":", "},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[{"text":"Drives a navigation stack with a store.","type":"text"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationStack\/init(path:root:destination:fileID:filePath:line:column:)","kind":"symbol"},"#Dismissal":{"url":"#Dismissal","title":"Dismissal","type":"link","titleInlineContent":[{"type":"text","text":"Dismissal"}],"identifier":"#Dismissal"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackState/popLast()":{"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"BidirectionalCollection"},{"text":".","type":"text"}]},"abstract":[],"title":"popLast()","type":"topic","kind":"symbol","url":"\/documentation\/composablearchitecture\/stackstate\/poplast()","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/popLast()","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"popLast","kind":"identifier"},{"kind":"text","text":"() -> "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"kind":"text","text":"?"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","kind":"symbol","type":"topic","abstract":[{"text":"A protocol that describes how to evolve the current state of an application to the next state,","type":"text"},{"type":"text","text":" "},{"text":"given an action, and describes what ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","type":"reference","isActive":true},{"text":"s should be executed later by the store, if any.","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"}],"title":"Reducer","navigatorTitle":[{"text":"Reducer","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/reducer","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction/element(id:action:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/element(id:action:)","type":"topic","kind":"symbol","title":"StackAction.element(id:action:)","abstract":[{"type":"text","text":"An action sent to the associated stack element at a given identifier."}],"fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"kind":"identifier","text":"element"},{"text":"(","kind":"text"},{"text":"id","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture14StackElementIDV","text":"StackElementID"},{"text":", ","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":")"}],"url":"\/documentation\/composablearchitecture\/stackaction\/element(id:action:)","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"navigatorTitle":[{"text":"Effect","kind":"identifier"}],"type":"topic","title":"Effect","abstract":[],"kind":"symbol","role":"symbol","url":"\/documentation\/composablearchitecture\/effect","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Effect","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/run(priority:operation:catch:fileID:filePath:line:column:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","abstract":[{"text":"Wraps an asynchronous unit of work that can emit actions any number of times in an effect.","type":"text"}],"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"run","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"priority"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:ScP","text":"TaskPriority","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"operation"},{"kind":"text","text":": ("},{"text":"Send","preciseIdentifier":"s:22ComposableArchitecture4SendV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"catch","kind":"externalParam"},{"text":": ((any ","kind":"text"},{"kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Send","preciseIdentifier":"s:22ComposableArchitecture4SendV"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"text":"async","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":", "},{"text":"filePath","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":", "},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Effect","preciseIdentifier":"s:22ComposableArchitecture6EffectV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">","kind":"text"}],"url":"\/documentation\/composablearchitecture\/effect\/run(priority:operation:catch:fileid:filepath:line:column:)","type":"topic","role":"symbol","title":"run(priority:operation:catch:fileID:filePath:line:column:)","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUI/NavigationLink/init(state:label:fileID:filePath:line:column:)":{"role":"symbol","kind":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"text":"P","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"L","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"state","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"P"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"label"},{"text":": () -> ","kind":"text"},{"kind":"typeIdentifier","text":"L"},{"text":", ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"kind":"externalParam","text":"filePath"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"kind":"text","text":")"}],"conformance":{"constraints":[{"type":"codeVoice","code":"Label"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"View"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Destination"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Never"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"url":"\/documentation\/composablearchitecture\/swiftui\/navigationlink\/init(state:label:fileid:filepath:line:column:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationLink\/init(state:label:fileID:filePath:line:column:)","title":"init(state:label:fileID:filePath:line:column:)","abstract":[{"text":"Creates a navigation link that presents the view corresponding to an element of","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackState/pop(from:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/pop(from:)","abstract":[{"text":"Pops the element corresponding to ","type":"text"},{"code":"id","type":"codeVoice"},{"text":" from the stack, and all elements after it.","type":"text"}],"type":"topic","title":"pop(from:)","kind":"symbol","url":"\/documentation\/composablearchitecture\/stackstate\/pop(from:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"pop","kind":"identifier"},{"kind":"text","text":"("},{"text":"from","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:22ComposableArchitecture14StackElementIDV","kind":"typeIdentifier","text":"StackElementID"},{"text":")","kind":"text"}]},"#Testing":{"url":"#Testing","title":"Testing","type":"link","titleInlineContent":[{"type":"text","text":"Testing"}],"identifier":"#Testing"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction":{"navigatorTitle":[{"text":"StackAction","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/stackaction","role":"symbol","type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"StackAction","kind":"identifier"}],"title":"StackAction","abstract":[{"text":"A wrapper type for actions that can be presented in a navigation stack.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/forEach(_:action:)":{"url":"\/documentation\/composablearchitecture\/reducer\/foreach(_:action:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"forEach","kind":"identifier"},{"kind":"text","text":"<"},{"text":"DestinationState","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"DestinationAction"},{"kind":"text","text":">("},{"text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture10StackStateV","text":"StackState"},{"kind":"text","text":"<"},{"text":"DestinationState","kind":"typeIdentifier"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"action"},{"text":": ","kind":"text"},{"text":"CaseKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"kind":"text","text":", "},{"text":"StackAction","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture11StackActionO"},{"text":"<","kind":"text"},{"text":"DestinationState","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"DestinationAction","kind":"typeIdentifier"},{"text":">>) -> ","kind":"text"},{"text":"some","kind":"keyword"},{"kind":"text","text":" "},{"text":"Reducer","preciseIdentifier":"s:22ComposableArchitecture7ReducerP","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"State","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"kind":"text","text":">\n"}],"title":"forEach(_:action:)","abstract":[{"type":"text","text":"A special overload of "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:destination:fileID:filePath:line:column:)-9svqb","type":"reference","isActive":true},{"type":"text","text":" for enum"},{"type":"text","text":" "},{"text":"reducers.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:)","role":"symbol","type":"topic","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Testing#Non-exhaustive-testing":{"title":"Non-exhaustive testing","url":"\/documentation\/composablearchitecture\/testing#Non-exhaustive-testing","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Non-exhaustive-testing","abstract":[],"type":"topic","kind":"section"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/case":{"abstract":[{"type":"text","text":"A destructurable view of a store on a collection of cases."}],"url":"\/documentation\/composablearchitecture\/store\/case","role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"`case`"},{"text":": ","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"StateReducer","preciseIdentifier":"s:22ComposableArchitecture16CaseReducerStateP0eD0Qa"},{"kind":"text","text":"."},{"text":"CaseScope","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture11CaseReducerP0C5ScopeQa"}],"type":"topic","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"State"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"CaseReducerState"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Action"},{"type":"text","text":" is "},{"code":"State.StateReducer.Action","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/case","kind":"symbol","title":"case"},"#Integration":{"url":"#Integration","title":"Integration","type":"link","titleInlineContent":[{"type":"text","text":"Integration"}],"identifier":"#Integration"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackBasedNavigation#Integration":{"abstract":[],"title":"Integration","kind":"section","type":"topic","url":"\/documentation\/composablearchitecture\/stackbasednavigation#Integration","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackBasedNavigation#Integration"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/forEach(_:action:destination:fileID:filePath:line:column:)-9svqb":{"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:destination:fileID:filePath:line:column:)-9svqb","title":"forEach(_:action:destination:fileID:filePath:line:column:)","role":"symbol","abstract":[{"text":"Embeds a child reducer in a parent domain that works on elements of a navigation stack in","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"parent state."}],"type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/foreach(_:action:destination:fileid:filepath:line:column:)-9svqb","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"forEach","kind":"identifier"},{"kind":"text","text":"<"},{"text":"DestinationState","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"DestinationAction"},{"kind":"text","text":", "},{"text":"Destination","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture10StackStateV","text":"StackState"},{"text":"<","kind":"text"},{"text":"DestinationState","kind":"typeIdentifier"},{"text":">>, ","kind":"text"},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"preciseIdentifier":"s:9CasePaths0A7KeyPatha","text":"CaseKeyPath","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","kind":"typeIdentifier","text":"Action"},{"text":", ","kind":"text"},{"text":"StackAction","preciseIdentifier":"s:22ComposableArchitecture11StackActionO","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"DestinationState","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"DestinationAction"},{"text":">>, ","kind":"text"},{"text":"destination","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"kind":"typeIdentifier","text":"Destination"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":", ","kind":"text"},{"text":"filePath","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"column"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"text":") -> ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP","kind":"typeIdentifier","text":"Reducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"State","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","text":"Action","kind":"typeIdentifier"},{"text":">\n","kind":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:timeout:assert:fileID:file:line:column:)-53wic":{"title":"receive(_:timeout:assert:fileID:file:line:column:)","abstract":[{"text":"Asserts an action was received matching a case path and asserts how the state changes.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"receive","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha","text":"CaseKeyPath"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"text":"timeout","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s8DurationV","text":"Duration","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"assert","kind":"externalParam"},{"kind":"text","text":": (("},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"text":")?, ","kind":"text"},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"file"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"column"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"}],"kind":"symbol","conformance":{"constraints":[{"code":"State","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:fileID:file:line:column:)-53wic","url":"\/documentation\/composablearchitecture\/teststore\/receive(_:timeout:assert:fileid:file:line:column:)-53wic","role":"symbol","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DismissEffect":{"navigatorTitle":[{"kind":"identifier","text":"DismissEffect"}],"url":"\/documentation\/composablearchitecture\/dismisseffect","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"DismissEffect","kind":"identifier"}],"title":"DismissEffect","abstract":[{"text":"An effect that dismisses the current presentation.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect","role":"symbol","type":"topic","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackState":{"navigatorTitle":[{"text":"StackState","kind":"identifier"}],"type":"topic","title":"StackState","abstract":[{"text":"A list of data representing the content of a navigation stack.","type":"text"}],"kind":"symbol","role":"symbol","url":"\/documentation\/composablearchitecture\/stackstate","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StackState","kind":"identifier"}]},"#Pushing-features-onto-the-stack":{"url":"#Pushing-features-onto-the-stack","title":"Pushing features onto the stack","type":"link","titleInlineContent":[{"type":"text","text":"Pushing features onto the stack"}],"identifier":"#Pushing-features-onto-the-stack"},"#Basics":{"url":"#Basics","title":"Basics","type":"link","titleInlineContent":[{"type":"text","text":"Basics"}],"identifier":"#Basics"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/exhaustivity":{"url":"\/documentation\/composablearchitecture\/teststore\/exhaustivity","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","abstract":[{"type":"text","text":"The current exhaustivity level of the test store."}],"kind":"symbol","title":"exhaustivity","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"exhaustivity","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture12ExhaustivityO","text":"Exhaustivity"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction":{"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"PresentationAction"}],"abstract":[{"type":"text","text":"A wrapper type for actions that can be presented."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"PresentationAction"}],"type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/presentationaction","title":"PresentationAction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction/push(id:state:)":{"fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"text":"push","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"id"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture14StackElementIDV","kind":"typeIdentifier","text":"StackElementID"},{"kind":"text","text":", "},{"kind":"externalParam","text":"state"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":")"}],"title":"StackAction.push(id:state:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/push(id:state:)","abstract":[{"text":"An action sent to present the given state at a given identifier in a navigation stack. This","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"action is typically sent from the view via the "},{"type":"codeVoice","code":"NavigationLink(value:)"},{"text":" initializer.","type":"text"}],"url":"\/documentation\/composablearchitecture\/stackaction\/push(id:state:)","type":"topic","kind":"symbol","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackState/subscript(id:fileID:filePath:line:column:)":{"abstract":[{"text":"Accesses the value associated with the given id for reading and writing.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/subscript(id:fileID:filePath:line:column:)","title":"subscript(id:fileID:filePath:line:column:)","fragments":[{"text":"subscript","kind":"keyword"},{"kind":"text","text":"("},{"text":"id","kind":"externalParam"},{"text":" _: ","kind":"text"},{"text":"StackElementID","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture14StackElementIDV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":" _: "},{"kind":"typeIdentifier","text":"_HashableStaticString"},{"kind":"text","text":", "},{"text":"filePath","kind":"externalParam"},{"text":" _: ","kind":"text"},{"kind":"typeIdentifier","text":"_HashableStaticString"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":" _: ","kind":"text"},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"kind":"text","text":" _: "},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Element"},{"text":"?","kind":"text"}],"role":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/stackstate\/subscript(id:fileid:filepath:line:column:)","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","kind":"symbol","title":"TestStore","role":"symbol","navigatorTitle":[{"text":"TestStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/teststore","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"TestStore","kind":"identifier"}],"abstract":[{"text":"A testable runtime for a reducer.","type":"text"}],"type":"topic"},"https://developer.apple.com/documentation/swiftui/navigationpath":{"url":"https:\/\/developer.apple.com\/documentation\/swiftui\/navigationpath","title":"NavigationPath","type":"link","titleInlineContent":[{"type":"codeVoice","code":"NavigationPath"}],"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/navigationpath"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TreeBasedNavigation#Enum-state":{"title":"Enum state","url":"\/documentation\/composablearchitecture\/treebasednavigation#Enum-state","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation#Enum-state","abstract":[],"type":"topic","kind":"section"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackActionOf":{"title":"StackActionOf","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackActionOf","kind":"symbol","url":"\/documentation\/composablearchitecture\/stackactionof","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"StackActionOf"}],"navigatorTitle":[{"text":"StackActionOf","kind":"identifier"}],"type":"topic","role":"symbol","abstract":[{"type":"text","text":"A convenience type alias for referring to a stack action of a given reducer’s domain."}]},"#StackState-vs-NavigationPath":{"url":"#StackState-vs-NavigationPath","title":"StackState vs NavigationPath","type":"link","titleInlineContent":[{"type":"text","text":"StackState vs NavigationPath"}],"identifier":"#StackState-vs-NavigationPath"}}}