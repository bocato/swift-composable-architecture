{"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationStateTracked()"],"title":"Supporting macros","generated":true,"anchor":"Supporting-macros"}],"metadata":{"modules":[{"name":"ComposableArchitecture"}],"roleHeading":"Macro","symbolKind":"macro","title":"ObservationStateIgnored()","role":"symbol","externalID":"s:22ComposableArchitecture23ObservationStateIgnoredyycfm","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ObservationStateIgnored"},{"text":"()","kind":"text"}]},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationStateIgnored()"},"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()"]]},"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"attribute","text":"@attached"},{"kind":"text","text":"(accessor, names: named(willSet)) "},{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"text":"ObservationStateIgnored","kind":"identifier"},{"kind":"text","text":"()"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"}],"variants":[{"paths":["\/documentation\/composablearchitecture\/observationstateignored()"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservationStateTracked()":{"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ObservationStateTracked","kind":"identifier"},{"kind":"text","text":"()"}],"url":"\/documentation\/composablearchitecture\/observationstatetracked()","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationStateTracked()","kind":"symbol","title":"ObservationStateTracked()","role":"symbol","abstract":[],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservationStateIgnored()":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationStateIgnored()","role":"symbol","url":"\/documentation\/composablearchitecture\/observationstateignored()","kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"ObservationStateIgnored","kind":"identifier"},{"text":"()","kind":"text"}],"abstract":[],"title":"ObservationStateIgnored()","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"title":"ComposableArchitecture","url":"\/documentation\/composablearchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"text":" ","type":"text"},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"role":"collection","type":"topic","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"navigatorTitle":[{"text":"Effect","kind":"identifier"}],"type":"topic","title":"Effect","abstract":[],"kind":"symbol","role":"symbol","url":"\/documentation\/composablearchitecture\/effect","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Effect","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/State":{"url":"\/documentation\/composablearchitecture\/reducer\/state","role":"symbol","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"State"}],"title":"State","type":"topic","abstract":[{"text":"A type that holds the current state of the reducer.","type":"text"}],"required":true},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservableState()":{"abstract":[{"text":"Defines and implements conformance of the Observable protocol.","type":"text"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ObservableState"},{"kind":"text","text":"()"}],"type":"topic","title":"ObservableState()","url":"\/documentation\/composablearchitecture\/observablestate()"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","kind":"symbol","type":"topic","abstract":[{"text":"A protocol that describes how to evolve the current state of an application to the next state,","type":"text"},{"type":"text","text":" "},{"text":"given an action, and describes what ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","type":"reference","isActive":true},{"text":"s should be executed later by the store, if any.","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"}],"title":"Reducer","navigatorTitle":[{"text":"Reducer","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/reducer","role":"symbol"}}}