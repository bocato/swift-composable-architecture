{"sections":[{"title":"Sync-up form","content":[{"inlineContent":[{"text":"We will create a new feature with the Composable Architecture that is capable of editing the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the"},{"text":" ","type":"text"},{"text":"feature to make things a little more interesting.","type":"text"}],"type":"paragraph"}],"chapter":"New sync-up form","kind":"hero","estimatedTimeInMinutes":15},{"tasks":[{"title":"Sync-up form basics","anchor":"Sync-up-form-basics","stepsSection":[{"runtimePreview":null,"media":null,"type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a new file named SyncUpForm.swift to hold the feature that will allow entering the"},{"text":" ","type":"text"},{"type":"text","text":"details of a sync-up. Let’s also go ahead and create a stub of a new reducer."}]}],"code":"SyncUpForm-01-code-0001.swift"},{"caption":[],"type":"step","runtimePreview":null,"media":null,"code":"SyncUpForm-01-code-0002.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We can start with the domain modeling. In the state we only need a single, mutable "},{"code":"SyncUp","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"value."}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For the actions we technically need one action for every UI control in the form. That means"},{"type":"text","text":" "},{"text":"one action for the title text field, duration slider, theme picker, and attendee name text","type":"text"},{"type":"text","text":" "},{"text":"field. That can be extremely verbose, and so the library comes with a tool to help streamline","type":"text"},{"text":" ","type":"text"},{"text":"this. We also have a dedicated article on the topic, ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings","type":"reference","isActive":true},{"text":", for more detailed","type":"text"},{"text":" ","type":"text"},{"text":"information.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"To use the tools we must complete two steps.","type":"text"}]},{"caption":[],"code":"SyncUpForm-01-code-0003.swift","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"First, rather than creating an action for every single UI control in the form, we will"},{"text":" ","type":"text"},{"type":"text","text":"create one single action that is capable of deriving bindings for any data in the feature."},{"text":" ","type":"text"},{"text":"This is done by conforming the action to ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction","isActive":true},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"text","text":"providing a single case that holds a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction"},{"text":".","type":"text"}],"type":"paragraph"}],"media":null,"type":"step"},{"caption":[{"name":"Note","style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"In order for this composition to work all reducers must operate on the same state","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and actions. There are operators in the library that help you transform existing reducers"},{"type":"text","text":" "},{"type":"text","text":"into the right shape so that they can be composed with others."}]}]}],"code":"SyncUpForm-01-code-0004.swift","media":null,"runtimePreview":null,"type":"step","content":[{"inlineContent":[{"text":"And second, compose the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","type":"reference","isActive":true},{"text":" into your feature’s","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-20w8t","type":"reference"},{"text":". This is our first time encountering reducer","type":"text"},{"type":"text","text":" "},{"type":"text","text":"composition in this tutorial, and it is done by simply listing all the reducers you want"},{"text":" ","type":"text"},{"type":"text","text":"to compose in the "},{"type":"codeVoice","code":"body"},{"type":"text","text":"."}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"text":"There are a few other actions we need to represent in this view. We are going to allow","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"deleting attendees by swiping on their row, and we need a button for adding attendees."}]},{"runtimePreview":null,"media":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We have also added some additional logic to make sure that the collection of attendees is"},{"text":" ","type":"text"},{"text":"not empty. This is the kind of logic we would like to get test coverage on eventually.","type":"text"}]}],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add an "},{"code":"onDeleteAttendees","type":"codeVoice"},{"type":"text","text":" action that we can send from the "},{"code":"onDelete","type":"codeVoice"},{"type":"text","text":" closure in the view."},{"type":"text","text":" "},{"type":"text","text":"This is similar to what we did in the "},{"code":"SyncUpsList","type":"codeVoice"},{"text":" reducer, but we have decided to name it","type":"text"},{"type":"text","text":" "},{"type":"text","text":"more explicitly as "},{"code":"onDeleteAttendees","type":"codeVoice"},{"text":" since the “attendee” is not the core focus of this","type":"text"},{"type":"text","text":" "},{"text":"feature.","type":"text"}]}],"type":"step","code":"SyncUpForm-01-code-0005.swift"},{"content":[{"type":"paragraph","inlineContent":[{"text":"Add an ","type":"text"},{"code":"addAttendeeButtonTapped","type":"codeVoice"},{"text":" action that inserts a new element to the end of the","type":"text"},{"text":" ","type":"text"},{"code":"syncUp.attendees","type":"codeVoice"},{"type":"text","text":" collection."}]}],"caption":[],"type":"step","code":"SyncUpForm-01-code-0006.swift","media":null,"runtimePreview":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"That is all it takes to implement the basic functionality of the sync-up form. There will"},{"type":"text","text":" "},{"type":"text","text":"be more to do in here too, but we can now move onto the view."}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In the same file as the "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":" reducer create a basic stub of a view that will hold"},{"text":" ","type":"text"},{"type":"text","text":"the UI for the form."}]}],"code":"SyncUpForm-01-code-0007.swift","media":null,"runtimePreview":null,"caption":[{"style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"We are collapsing the code in the ","type":"text"},{"code":"SyncUpForm","type":"codeVoice"},{"text":" reducer to make it easier to read","type":"text"},{"type":"text","text":" "},{"text":"the view code.","type":"text"}]}],"type":"aside"}],"type":"step"},{"caption":[{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"@Bindable","type":"codeVoice"},{"text":" property wrapper is iOS 17+, and so if you are supporting older","type":"text"},{"type":"text","text":" "},{"text":"platforms you can use the ","type":"text"},{"code":"@Perception.Bindable","type":"codeVoice"},{"text":" property wrapper that comes with the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"library. See "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport","isActive":true},{"text":" for more information.","type":"text"}]}],"name":"Note"}],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a "},{"type":"codeVoice","code":"store"},{"text":" property to the view, just as we did in the ","type":"text"},{"type":"codeVoice","code":"SyncUpsListView"},{"type":"text","text":", but this time"},{"type":"text","text":" "},{"text":"we have annotated the variable with SwiftUI’s ","type":"text"},{"code":"@Bindable","type":"codeVoice"},{"text":" property wrapper. That will allow","type":"text"},{"type":"text","text":" "},{"type":"text","text":"us to derive bindings from the store."}]}],"media":null,"type":"step","code":"SyncUpForm-01-code-0008.swift","runtimePreview":null},{"type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Implement the rest of the form view by deriving bindings from the store to hand to the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"various UI controls. This can be done by first getting a binding to the store via the"},{"type":"text","text":" "},{"type":"codeVoice","code":"$store"},{"text":" syntax, and then dot-chaining onto that to derive bindings to any data inside the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"store."}]}],"media":null,"code":"SyncUpForm-01-code-0009.swift","runtimePreview":null},{"type":"paragraph","inlineContent":[{"text":"We now have the basics of the sync-up form view in place. We can edit any field, and even add","type":"text"},{"type":"text","text":" "},{"type":"text","text":"attendees to the sync-up. Before integrating this feature into the sync-ups list (so that we"},{"type":"text","text":" "},{"text":"can actually create new sync-ups and add them to the list), let’s make this form feature a bit","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"more interesting by controlling how the focus flows through the view."}]}],"contentSection":[{"content":[{"inlineContent":[{"text":"Let’s start by getting the basics of the new sync-up form feature into place. It will allow","type":"text"},{"text":" ","type":"text"},{"text":"you to edit all the various parts of a sync-up, and it will be a pretty simple feature to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"start, but we will layer on some more interesting functionality later on."}],"type":"paragraph"}],"mediaPosition":"trailing","kind":"contentAndMedia","media":"SyncUpFormBasics-01-0000.png"}]},{"contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"Right now there is a small user experience problem with our sync-up form. When the form first","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"appears nothing is focused, and so the user is forced to tap into the title text field to"},{"type":"text","text":" "},{"type":"text","text":"begin entering the details of the new sync-up. Further, when an attendee is added the newly"},{"type":"text","text":" "},{"type":"text","text":"added text field is not focused, forcing the user again to tap the text field."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can improve these small annoyances, and we will first start with an approach that puts all"},{"type":"text","text":" "},{"type":"text","text":"the logic in the view, and then we will explore a better approach after."}]}],"mediaPosition":"trailing"}],"anchor":"Form-focus-an-approach","stepsSection":[{"media":null,"code":"SyncUpForm-02-code-0001.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Focus is handled in SwiftUI with the "},{"type":"codeVoice","code":"@FocusState"},{"text":" property. Typically you start by modeling","type":"text"},{"text":" ","type":"text"},{"text":"all of the fields that can be focused in the view with an enum, and then you hold onto","type":"text"},{"type":"text","text":" "},{"type":"text","text":"some optional enum state to represent what is currently focused, or if "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" then nothing"},{"type":"text","text":" "},{"text":"is focused.","type":"text"}]}],"type":"step","caption":[]},{"runtimePreview":null,"type":"step","caption":[],"code":"SyncUpForm-02-code-0002.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"And then you use the SwiftUI "},{"code":".focused(_:equals:)","type":"codeVoice"},{"type":"text","text":" view modifier to annotate the UI"},{"type":"text","text":" "},{"type":"text","text":"controls that can be focused."}]}],"media":null},{"inlineContent":[{"type":"text","text":"With that little bit of work done we can now control focus in the view by simply mutating the"},{"type":"text","text":" "},{"type":"codeVoice","code":"focus"},{"text":" state in the view. However, all of the other logic of our feature is in the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"SyncUpForm"},{"text":" reducer. What if we need to implement complex and nuanced logic around how the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"focus changes in the feature? Does that logic need to live in the view?"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Let’s try it out and see how it goes."}],"type":"paragraph"},{"media":null,"code":"SyncUpForm-02-code-0003.swift","runtimePreview":null,"content":[{"inlineContent":[{"text":"We can start by introducing an ","type":"text"},{"code":"onAppear","type":"codeVoice"},{"type":"text","text":" view modifier that sets the focus to "},{"type":"codeVoice","code":".title"},{"type":"text","text":" "},{"text":"when the view appears.","type":"text"}],"type":"paragraph"}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It is not possible to give "},{"code":"@FocusState","type":"codeVoice"},{"type":"text","text":" a default, and so it is necessary to use"},{"text":" ","type":"text"},{"type":"codeVoice","code":"onAppear"},{"type":"text","text":"."}]},{"type":"aside","name":"Important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"onAppear","type":"codeVoice"},{"text":" closure is called every time the view appears, not just the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"first time. So if we later added a feature that allowed you to drill-down to a child"},{"type":"text","text":" "},{"type":"text","text":"feature and then come back to the "},{"code":"SyncUpFormView","type":"codeVoice"},{"type":"text","text":", the focus would reset back to the"},{"type":"text","text":" "},{"type":"text","text":"title. That is probably not the behavior you would want, and so you may need to create"},{"type":"text","text":" "},{"type":"text","text":"your own "},{"type":"codeVoice","code":"onFirstAppear"},{"type":"text","text":" view modifier to help with that situation."}]}],"style":"important"}],"type":"step"},{"type":"step","code":"SyncUpForm-02-code-0004.swift","caption":[{"name":"Important","style":"important","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We are force unwrapping here because we “know” that an attendee will"},{"text":" ","type":"text"},{"type":"text","text":"definitely be added by the reducer. However, if the reducer logic changed some day so that"},{"type":"text","text":" "},{"type":"text","text":"in certain cases an attendee is not added, we would run the risk of a crash. That means we"},{"type":"text","text":" "},{"text":"would need to beef up this logic more, and then we would want to get some test coverage on","type":"text"},{"text":" ","type":"text"},{"text":"it. But unfortunately that’s not really possible while the logic is trapped in the view.","type":"text"}]}]}],"content":[{"type":"paragraph","inlineContent":[{"text":"Next we can implement the focusing logic for adding a new attendee by pointing the ","type":"text"},{"type":"codeVoice","code":"focus"},{"text":" ","type":"text"},{"type":"text","text":"state to the "},{"type":"codeVoice","code":".attendee"},{"type":"text","text":" case with the ID of the newly created attendee."}]}],"media":null,"runtimePreview":null},{"inlineContent":[{"type":"text","text":"Next we can implement some focusing logic for removing an attendee. We are going to go the"},{"type":"text","text":" "},{"text":"extra distance to make this as user friendly as possible. We will make it so that if you","type":"text"},{"type":"text","text":" "},{"type":"text","text":"delete an attendee that is focused, we will re-focus on the nearest attendee."}],"type":"paragraph"},{"content":[{"inlineContent":[{"type":"text","text":"Implement the logic for re-focusing after deleting an attendee. We first get the attendee"},{"text":" ","type":"text"},{"type":"text","text":"that is being deleted. Then we send the "},{"code":"onDeleteAttendees","type":"codeVoice"},{"type":"text","text":" action to perform the actual"},{"type":"text","text":" "},{"type":"text","text":"deletion logic. Then we check if the attendee deleted was focused, and if so we compute"},{"type":"text","text":" "},{"text":"the index of the closest attendee so that we can focus them.","type":"text"}],"type":"paragraph"}],"caption":[],"code":"SyncUpForm-02-code-0005.swift","runtimePreview":null,"type":"step","media":null},{"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"The focusing logic is now implemented. Add a preview at the bottom of the file."}],"type":"paragraph"}],"media":null,"type":"step","caption":[],"code":"SyncUpForm-02-code-0006.swift"},{"content":[{"inlineContent":[{"text":"Run the preview to see that the logic works as we expect. The preview begins with the title","type":"text"},{"type":"text","text":" "},{"text":"field focused. When adding an attendee the new field is automatically focused. And when","type":"text"},{"type":"text","text":" "},{"type":"text","text":"deleting an attendee the next attendee is automatically focused."}],"type":"paragraph"}],"type":"step","media":"SyncUpForm-02-video-0007.mp4","code":null,"caption":[],"runtimePreview":null},{"type":"paragraph","inlineContent":[{"text":"The focusing logic in the feature is now fully implemented. But there are a few things to not","type":"text"},{"type":"text","text":" "},{"type":"text","text":"like about how we have accomplished things so far."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"We now have logic implemented in two distinct places in the feature. The logic of adding","type":"text"},{"type":"text","text":" "},{"text":"and removing attendees is in the ","type":"text"},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":" reducer, and the logic of focus is in the view."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We are making assumptions in the view about how the reducer executes its logic, and those"},{"text":" ","type":"text"},{"type":"text","text":"assumptions may someday be wrong."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The logic for focusing is complex. We are performing index juggling and subscripting"},{"text":" ","type":"text"},{"type":"text","text":"directly into a collection. If we get any of the logic wrong we could potentially have a"},{"type":"text","text":" "},{"type":"text","text":"crash. For these reasons we would like to test this logic, but that is not possible to do"},{"text":" ","type":"text"},{"text":"easily since it is trapped in the view.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"Let’s see what it takes to move all of the focus logic into the reducer, where it belongs.","type":"text"}]}],"title":"Form focus: an approach"},{"anchor":"Form-focus-a-better-approach","title":"Form focus: a better approach","contentSection":[{"mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"text":"A better approach to handling focus logic is to move it to the reducer. However, the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"@FocusState"},{"text":" property cannot be used outside of SwiftUI views, and so we will need to do","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a small amount of work to bridge those worlds."}]}],"kind":"contentAndMedia"}],"stepsSection":[{"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Move the "},{"type":"codeVoice","code":"Field"},{"type":"text","text":" enum from the view to "},{"code":"SyncUpForm.State","type":"codeVoice"},{"text":" and add an optional ","type":"text"},{"code":"focus","type":"codeVoice"},{"type":"text","text":" field"},{"type":"text","text":" "},{"text":"to the state. We are not using ","type":"text"},{"code":"@FocusState","type":"codeVoice"},{"text":" because that can only be used in the view.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"That also means that we can give the focus a default, which wasn’t possible when using"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"@FocusState"},{"text":" property wrapper.","type":"text"}],"type":"paragraph"}],"media":null,"type":"step","caption":[{"style":"note","name":"Note","type":"aside","content":[{"inlineContent":[{"text":"We have collapsed the view code to make it easier to read the reducer code.","type":"text"}],"type":"paragraph"}]}],"code":"SyncUpForm-03-code-0001.swift"},{"inlineContent":[{"text":"Next we start moving the focus logic from the view into the reducer.","type":"text"}],"type":"paragraph"},{"type":"step","caption":[],"content":[{"inlineContent":[{"type":"text","text":"Implement the logic of focusing a new added attendee. Now that we have immediate access"},{"text":" ","type":"text"},{"type":"text","text":"to the reducer’s logic we no longer to do any force unwrapping or defensive programming"},{"text":" ","type":"text"},{"type":"text","text":"with "},{"type":"codeVoice","code":"guard"},{"text":"s.","type":"text"}],"type":"paragraph"}],"media":null,"code":"SyncUpForm-03-code-0002.swift","runtimePreview":null},{"media":null,"code":"SyncUpForm-03-code-0003.swift","content":[{"inlineContent":[{"text":"Implement the logic for focusing the nearest attendee when deleting an attendee. This logic","type":"text"},{"type":"text","text":" "},{"text":"is very similar to what we wrote in the view, but we can implement it with more confidence","type":"text"},{"text":" ","type":"text"},{"text":"since we are doing it right next to the logic that removes the attendee from the collection.","type":"text"}],"type":"paragraph"}],"caption":[],"runtimePreview":null,"type":"step"},{"caption":[],"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Now that all of the focus logic is in the reducer, we can remove it from the view. Delete","type":"text"},{"type":"text","text":" "},{"text":"that logic from the “Add attendee” and ","type":"text"},{"type":"codeVoice","code":"onDelete"},{"text":" action closures, and delete the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"onAppear"},{"type":"text","text":" view modifier."}]}],"type":"step","media":null,"code":"SyncUpForm-03-code-0004.swift"},{"type":"paragraph","inlineContent":[{"text":"This massively cleans up the view, and we now have one single place for all logic of the","type":"text"},{"text":" ","type":"text"},{"text":"feature. However, focus is now completely broken. The ","type":"text"},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":" reducer is managing its"},{"type":"text","text":" "},{"text":"own version of the ","type":"text"},{"code":"focus","type":"codeVoice"},{"type":"text","text":" state, and the view also has its own "},{"code":"focus","type":"codeVoice"},{"text":" state. Those two","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"pieces of state are completely disconnected, and so the change of one has no influence on"},{"type":"text","text":" "},{"text":"the other.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Luckily this is easy to fix, using a tool that comes with the Composable Architecture called"},{"text":" ","type":"text"},{"type":"codeVoice","code":"bind(_:to:)"},{"type":"text","text":". It allows you to synchronize two bindings so that when one changes it immediately"},{"text":" ","type":"text"},{"text":"changes the other. This is useful for dealing with SwiftUI property wrappers that only work","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in the view, such as "},{"type":"codeVoice","code":"@FocusState"},{"type":"text","text":"."}],"type":"paragraph"},{"media":null,"code":"SyncUpForm-03-code-0005.swift","runtimePreview":null,"caption":[],"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"At the bottom of the view use the "},{"type":"codeVoice","code":"bind(_:to:)"},{"text":" view modifier to synchronize the focus","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"binding from the store, "},{"type":"codeVoice","code":"$store.focus"},{"type":"text","text":", with the focus binding in the view, "},{"type":"codeVoice","code":"$focus"},{"type":"text","text":"."}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The preview is now back to working exactly as it did before, but now all logic is contained"},{"text":" ","type":"text"},{"text":"in one single place. And best of all, it is all testable.","type":"text"}]}]}],"kind":"tasks"},{"action":{"overridingTitle":"Get started","overridingTitleInlineContent":[{"text":"Get started","type":"text"}],"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm"},"featuredEyebrow":"Tutorial","abstract":[{"type":"text","text":"We now have a moderately complex feature for editing the details of a sync-up, the "},{"code":"SyncUpForm","type":"codeVoice"},{"text":" ","type":"text"},{"text":"reducer. Let’s get some test coverage on the feature, and doing so will force us to come","type":"text"},{"type":"text","text":" "},{"type":"text","text":"face-to-face with dependencies for the first time in this tutorial."}],"kind":"callToAction","title":"Testing the sync-up form"}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm","interfaceLanguage":"swift"},"hierarchy":{"modules":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/What-is-SyncUps-","projects":[{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#A-tour-of-SyncUps","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#Create-the-SyncUps-project","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps"}]},{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#Domain-models"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#SyncUpsList-feature","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#A-handy-debugging-tool"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps"},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps#Writing-your-first-test","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Lists-of-sync-ups"},{"projects":[{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Sync-up-form-basics","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-an-approach"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-a-better-approach","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Removing-attendees"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Adding-attendees","kind":"task"}]}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/New-sync-up-form"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Presenting-the-sync-up-form","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-domains-together"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-views-together","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Adding-a-new-sync-up-to-the-list","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Adding-a-sync-up","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Non-exhaustive-testing"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Persisting-sync-ups-to-disk","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Persisting-data-to-disk"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Testing-persistence"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Sync-up-detail","projects":[{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail#Create-the-sync-up-detail","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Editing-the-sync-up","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Deleting-the-sync-up","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#More-concise-domain-modeling","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail#Testing-the-edit-flow","kind":"task"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Navigating-to-sync-up-detail","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-feature"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-view","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Navigating-to-the-detail"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#The-meeting-screen","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#Navigate-to-a-meeting"}]},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation#Deleting-a-sync-up","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Record-meeting","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Create-a-new-feature"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Navigating-to-the-record-meeting-feature","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#A-basic-timer","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Controlling-dependencies-early","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Ending-the-meeting-early","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Testing-the-timer"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer#Asking-for-speech-recognition-permission","kind":"task"}]}]}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps","paths":[["doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps","doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/New-sync-up-form"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/composablearchitecture\/syncupform"]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"role":"project","title":"Sync-up form","categoryPathComponent":"BuildingSyncUps","category":"Building SyncUps"},"kind":"project","references":{"doc://ComposableArchitecture/tutorials/ComposableArchitecture/WhatIsSyncUps#Create-the-SyncUps-project":{"type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#Create-the-SyncUps-project","kind":"section","abstract":[{"text":"Let’s start with a tour of the application we will be building. It’s called SyncUps, and it’s a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"recreation of Apple’s Scrumdinger demo application."}],"role":"pseudoSymbol","title":"Create the SyncUps project","url":"\/tutorials\/composablearchitecture\/whatissyncups#Create-the-SyncUps-project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation#Navigating-to-the-detail":{"abstract":[{"type":"text","text":"We will wrap the application built so far in a "},{"type":"codeVoice","code":"NavigationStack"},{"text":" so that we can navigate to","type":"text"},{"type":"text","text":" "},{"text":"the detail screen. To do this we will create a new root-level feature that will be responsible","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"for implementing the logic of the stack and integrating all of the features together."}],"type":"section","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation#Navigating-to-the-detail","title":"Navigating to the detail","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Navigating-to-the-detail","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp","kind":"project","estimatedTime":"30min","abstract":[{"type":"text","text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and"},{"text":" ","type":"text"},{"text":"deleting the sync-up. This will force us to face a number of common problems in app development","type":"text"},{"type":"text","text":" "},{"text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns.","type":"text"}],"role":"project","title":"Editing and deleting a sync-up","url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#Controlling-dependencies-early":{"abstract":[{"text":"The first major piece of logic and behavior we will introduce to the record meeting feature is","type":"text"},{"type":"text","text":" "},{"text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"we need to implement nuanced logic to figure out when to proceed to the next speaker."}],"type":"section","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/implementingtimer#Controlling-dependencies-early","title":"Controlling dependencies early","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Controlling-dependencies-early","kind":"section"},"SyncUpForm-01-code-0003.swift":{"type":"file","highlights":[{"line":11},{"line":12}],"identifier":"SyncUpForm-01-code-0003.swift","fileName":"SyncUpForm.swift","fileType":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpForm {","  @ObservableState","  struct State: Equatable {","    var syncUp: SyncUp","  }","","  enum Action: BindableAction {","    case binding(BindingAction<State>)","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      }","    }","  }","}"],"syntax":"swift"},"SyncUpForm-02-code-0001.swift":{"fileType":"swift","syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpForm {","  \/\/ ...","}","","struct SyncUpFormView: View {","  @Bindable var store: StoreOf<SyncUpForm>","  @FocusState var focus: Field?","","  enum Field: Hashable {","    case attendee(Attendee.ID)","    case title","  }","","  var body: some View {","    Form {","      Section {","        TextField(\"Title\", text: $store.syncUp.title)","        HStack {","          Slider(value: $store.syncUp.duration.minutes, in: 5...30, step: 1) {","            Text(\"Length\")","          }","          Spacer()","          Text(store.syncUp.duration.formatted(.units()))","        }","        ThemePicker(selection: $store.syncUp.theme)","      } header: {","        Text(\"Sync-up Info\")","      }","      Section {","        ForEach($store.syncUp.attendees) { $attendee in","          TextField(\"Name\", text: $attendee.name)","        }","        .onDelete { indices in","          store.send(.onDeleteAttendees(indices))","        }","","        Button(\"New attendee\") {","          store.send(.addAttendeeButtonTapped)","        }","      } header: {","        Text(\"Attendees\")","      }","    }","  }","}","","struct ThemePicker: View {","  @Binding var selection: Theme","","  var body: some View {","    Picker(\"Theme\", selection: $selection) {","      ForEach(Theme.allCases) { theme in","        ZStack {","          RoundedRectangle(cornerRadius: 4)","            .fill(theme.mainColor)","          Label(theme.name, systemImage: \"paintpalette\")","            .padding(4)","        }","        .foregroundColor(theme.accentColor)","        .fixedSize(horizontal: false, vertical: true)","        .tag(theme)","      }","    }","  }","}","","extension Duration {","  fileprivate var minutes: Double {","    get { Double(components.seconds \/ 60) }","    set { self = .seconds(newValue * 60) }","  }","}"],"type":"file","highlights":[{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17}],"fileName":"SyncUpForm.swift","identifier":"SyncUpForm-02-code-0001.swift"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Record-meeting":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Record-meeting","kind":"article","abstract":[],"role":"article","title":"Record meeting","url":"\/tutorials\/buildingsyncups\/record-meeting"},"SyncUpForm-02-code-0002.swift":{"syntax":"swift","identifier":"SyncUpForm-02-code-0002.swift","fileType":"swift","fileName":"SyncUpForm.swift","highlights":[{"line":22},{"line":37}],"type":"file","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpForm {","  \/\/ ...","}","","struct SyncUpFormView: View {","  @Bindable var store: StoreOf<SyncUpForm>","  @FocusState var focus: Field?","","  enum Field: Hashable {","    case attendee(Attendee.ID)","    case title","  }","","  var body: some View {","    Form {","      Section {","        TextField(\"Title\", text: $store.syncUp.title)","          .focused($focus, equals: .title)","        HStack {","          Slider(value: $store.syncUp.duration.minutes, in: 5...30, step: 1) {","            Text(\"Length\")","          }","          Spacer()","          Text(store.syncUp.duration.formatted(.units()))","        }","        ThemePicker(selection: $store.syncUp.theme)","      } header: {","        Text(\"Sync-up Info\")","      }","      Section {","        ForEach($store.syncUp.attendees) { $attendee in","          TextField(\"Name\", text: $attendee.name)","            .focused($focus, equals: .attendee(attendee.id))","        }","        .onDelete { indices in","          store.send(.onDeleteAttendees(indices))","        }","","        Button(\"New attendee\") {","          store.send(.addAttendeeButtonTapped)","        }","      } header: {","        Text(\"Attendees\")","      }","    }","  }","}","","struct ThemePicker: View {","  @Binding var selection: Theme","","  var body: some View {","    Picker(\"Theme\", selection: $selection) {","      ForEach(Theme.allCases) { theme in","        ZStack {","          RoundedRectangle(cornerRadius: 4)","            .fill(theme.mainColor)","          Label(theme.name, systemImage: \"paintpalette\")","            .padding(4)","        }","        .foregroundColor(theme.accentColor)","        .fixedSize(horizontal: false, vertical: true)","        .tag(theme)","      }","    }","  }","}","","extension Duration {","  fileprivate var minutes: Double {","    get { Double(components.seconds \/ 60) }","    set { self = .seconds(newValue * 60) }","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/RecordMeetingFeature#Create-a-new-feature":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Create-a-new-feature","url":"\/tutorials\/composablearchitecture\/recordmeetingfeature#Create-a-new-feature","abstract":[{"type":"text","text":"Let’s get the basics of a new feature into place that we can navigate to, and then we will"},{"text":" ","type":"text"},{"text":"slowly layer on its complex logic and behavior, such as the timer and speech recognizer.","type":"text"}],"role":"pseudoSymbol","type":"section","title":"Create a new feature","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpDetail":{"url":"\/tutorials\/composablearchitecture\/testingsyncupdetail","role":"project","kind":"project","title":"Testing the sync-up detail","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail","type":"topic","abstract":[{"text":"The ","type":"text"},{"code":"SyncUpDetail","type":"codeVoice"},{"type":"text","text":" feature has slowly become quite complex. It now handles two forms of"},{"type":"text","text":" "},{"text":"navigation (an alert and sheet), it models navigation state with a single enum, and it","type":"text"},{"type":"text","text":" "},{"type":"text","text":"communicates with a parent feature via delegate actions. It’s about time we got some test"},{"text":" ","type":"text"},{"text":"coverage on this feature so we can be sure it works as we expect, and so that we can make future","type":"text"},{"type":"text","text":" "},{"type":"text","text":"changes with confidence."}],"estimatedTime":"10min"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps#Domain-models":{"type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#Domain-models","kind":"section","abstract":[{"type":"text","text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the"},{"type":"text","text":" "},{"text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the app evolves."}],"role":"pseudoSymbol","title":"Domain models","url":"\/tutorials\/composablearchitecture\/listsofsyncups#Domain-models"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpDetail#Testing-the-edit-flow":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail#Testing-the-edit-flow","url":"\/tutorials\/composablearchitecture\/testingsyncupdetail#Testing-the-edit-flow","abstract":[{"type":"text","text":"The "},{"code":"SyncUpDetail","type":"codeVoice"},{"text":" feature has slowly become quite complex. It now handles two forms of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"navigation (an alert and sheet), it models navigation state with a single enum, and it"},{"type":"text","text":" "},{"text":"communicates with a parent feature via delegate actions. It’s about time we got some test","type":"text"},{"type":"text","text":" "},{"type":"text","text":"coverage on this feature so we can be sure it works as we expect, and so that we can make future"},{"text":" ","type":"text"},{"text":"changes with confidence.","type":"text"}],"role":"pseudoSymbol","type":"section","title":"Testing the edit flow","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpFormPresentation#Adding-a-sync-up":{"url":"\/tutorials\/composablearchitecture\/testingsyncupformpresentation#Adding-a-sync-up","role":"pseudoSymbol","kind":"section","title":"Adding a sync-up","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Adding-a-sync-up","type":"section","abstract":[{"text":"We have now integrated two moderately complex features, the ","type":"text"},{"code":"SyncUpsList","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SyncUpForm"},{"text":", and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"so its time to write some tests. This will give us the opportunity to prove that the features"},{"type":"text","text":" "},{"text":"work in tandem as we expect, and we will explore “non-exhaustive” testing to make our tests less","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"fragile."}]},"SyncUpForm-03-code-0003.swift":{"type":"file","highlights":[{"line":39},{"line":40},{"line":41},{"line":42},{"line":46},{"line":48},{"line":49}],"identifier":"SyncUpForm-03-code-0003.swift","fileName":"SyncUpForm.swift","fileType":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpForm {","  @ObservableState","  struct State: Equatable {","    var focus: Field? = .title","    var syncUp: SyncUp","","    enum Field: Hashable {","      case attendee(Attendee.ID)","      case title","    }","  }","","  enum Action: BindableAction {","    case addAttendeeButtonTapped","    case binding(BindingAction<State>)","    case onDeleteAttendees(IndexSet)","  }","","  var body: some ReducerOf<Self> {","    BindingReducer()","","    Reduce { state, action in","      switch action {","      case .addAttendeeButtonTapped:","        let attendee = Attendee(id: Attendee.ID())","        state.syncUp.attendees.append(attendee)","        state.focus = .attendee(attendee.id)","        return .none","","      case .binding:","        return .none","","      case let .onDeleteAttendees(indices):","        state.syncUp.attendees.remove(atOffsets: indices)","        guard","          !state.syncUp.attendees.isEmpty,","          let firstIndex = indices.first","        else {","          state.syncUp.attendees.append(","            Attendee(id: Attendee.ID())","          )","          return .none","        }","        let index = min(firstIndex, state.syncUp.attendees.count - 1)","        state.focus = .attendee(state.syncUp.attendees[index].id)","        return .none","      }","    }","  }","}","","struct SyncUpFormView: View {","  \/\/ ...","}"],"syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp#More-concise-domain-modeling":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#More-concise-domain-modeling","url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup#More-concise-domain-modeling","abstract":[{"type":"text","text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and"},{"text":" ","type":"text"},{"text":"deleting the sync-up. This will force us to face a number of common problems in app development","type":"text"},{"type":"text","text":" "},{"type":"text","text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns."}],"role":"pseudoSymbol","type":"section","title":"More concise domain modeling","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PersistingSyncUps#Testing-persistence":{"abstract":[{"type":"text","text":"Now that we have the ability to add and remove sync-ups from the application, let’s add some"},{"type":"text","text":" "},{"text":"persistence. This will involve using the “shared state” tools from the library, such as","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","overridingTitleInlineContent":[{"code":"@Shared","type":"codeVoice"}],"isActive":true,"overridingTitle":"@Shared","type":"reference"},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:decoder:encoder:)","isActive":true},{"type":"text","text":"."}],"title":"Testing persistence","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/persistingsyncups#Testing-persistence","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Testing-persistence"},"SyncUpForm-01-code-0009.swift":{"type":"file","highlights":[{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70}],"identifier":"SyncUpForm-01-code-0009.swift","fileName":"SyncUpForm.swift","fileType":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpForm {","  \/\/ ...","}","","struct SyncUpFormView: View {","  @Bindable var store: StoreOf<SyncUpForm>","  ","  var body: some View {","    Form {","      Section {","        TextField(\"Title\", text: $store.syncUp.title)","        HStack {","          Slider(value: $store.syncUp.duration.minutes, in: 5...30, step: 1) {","            Text(\"Length\")","          }","          Spacer()","          Text(store.syncUp.duration.formatted(.units()))","        }","        ThemePicker(selection: $store.syncUp.theme)","      } header: {","        Text(\"Sync-up Info\")","      }","      Section {","        ForEach($store.syncUp.attendees) { $attendee in","          TextField(\"Name\", text: $attendee.name)","        }","        .onDelete { indices in","          store.send(.onDeleteAttendees(indices))","        }","","        Button(\"New attendee\") {","          store.send(.addAttendeeButtonTapped)","        }","      } header: {","        Text(\"Attendees\")","      }","    }","  }","}","","struct ThemePicker: View {","  @Binding var selection: Theme","","  var body: some View {","    Picker(\"Theme\", selection: $selection) {","      ForEach(Theme.allCases) { theme in","        ZStack {","          RoundedRectangle(cornerRadius: 4)","            .fill(theme.mainColor)","          Label(theme.name, systemImage: \"paintpalette\")","            .padding(4)","        }","        .foregroundColor(theme.accentColor)","        .fixedSize(horizontal: false, vertical: true)","        .tag(theme)","      }","    }","  }","}","","extension Duration {","  fileprivate var minutes: Double {","    get { Double(components.seconds \/ 60) }","    set { self = .seconds(newValue * 60) }","  }","}"],"syntax":"swift"},"SyncUpForm-02-code-0004.swift":{"syntax":"swift","identifier":"SyncUpForm-02-code-0004.swift","fileType":"swift","fileName":"SyncUpForm.swift","highlights":[{"line":46}],"type":"file","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpForm {","  \/\/ ...","}","","struct SyncUpFormView: View {","  @Bindable var store: StoreOf<SyncUpForm>","  @FocusState var focus: Field?","","  enum Field: Hashable {","    case attendee(Attendee.ID)","    case title","  }","","  var body: some View {","    Form {","      Section {","        TextField(\"Title\", text: $store.syncUp.title)","          .focused($focus, equals: .title)","          .onAppear { focus = .title }","        HStack {","          Slider(value: $store.syncUp.duration.minutes, in: 5...30, step: 1) {","            Text(\"Length\")","          }","          Spacer()","          Text(store.syncUp.duration.formatted(.units()))","        }","        ThemePicker(selection: $store.syncUp.theme)","      } header: {","        Text(\"Sync-up Info\")","      }","      Section {","        ForEach($store.syncUp.attendees) { $attendee in","          TextField(\"Name\", text: $attendee.name)","            .focused($focus, equals: .attendee(attendee.id))","        }","        .onDelete { indices in","          store.send(.onDeleteAttendees(indices))","        }","","        Button(\"New attendee\") {","          store.send(.addAttendeeButtonTapped)","          focus = .attendee(store.syncUp.attendees.last!.id)","        }","      } header: {","        Text(\"Attendees\")","      }","    }","  }","}","","struct ThemePicker: View {","  @Binding var selection: Theme","","  var body: some View {","    Picker(\"Theme\", selection: $selection) {","      ForEach(Theme.allCases) { theme in","        ZStack {","          RoundedRectangle(cornerRadius: 4)","            .fill(theme.mainColor)","          Label(theme.name, systemImage: \"paintpalette\")","            .padding(4)","        }","        .foregroundColor(theme.accentColor)","        .fixedSize(horizontal: false, vertical: true)","        .tag(theme)","      }","    }","  }","}","","extension Duration {","  fileprivate var minutes: Double {","    get { Double(components.seconds \/ 60) }","    set { self = .seconds(newValue * 60) }","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm":{"url":"\/tutorials\/composablearchitecture\/syncupform","role":"project","kind":"project","title":"Sync-up form","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm","type":"topic","abstract":[{"type":"text","text":"We will create a new feature with the Composable Architecture that is capable of editing the"},{"text":" ","type":"text"},{"type":"text","text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the"},{"type":"text","text":" "},{"text":"feature to make things a little more interesting.","type":"text"}],"estimatedTime":"15min"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm#Sync-up-form-basics":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Sync-up-form-basics","url":"\/tutorials\/composablearchitecture\/syncupform#Sync-up-form-basics","abstract":[{"text":"We will create a new feature with the Composable Architecture that is capable of editing the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the"},{"text":" ","type":"text"},{"type":"text","text":"feature to make things a little more interesting."}],"role":"pseudoSymbol","type":"section","title":"Sync-up form basics","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetail":{"title":"Sync-up detail","abstract":[{"type":"text","text":"The “sync-up detail” screen shows all the information of a sync-up, and has many actions that"},{"text":" ","type":"text"},{"type":"text","text":"can take place in the screen. The user can edit the sync-up, or start a new meeting in the sync"},{"type":"text","text":" "},{"text":"up, or drill-down to a past meeting, or even delete the meeting.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/syncupdetail","estimatedTime":"5min","type":"topic","kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail","role":"project"},"SyncUpFormBasics-01-0000.png":{"alt":null,"identifier":"SyncUpFormBasics-01-0000.png","variants":[{"url":"\/images\/ComposableArchitecture\/SyncUpFormBasics-01-0000.png","traits":["1x","light"]}],"type":"image"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation#Creating-the-app-view":{"title":"Creating the app view","abstract":[{"type":"text","text":"We will wrap the application built so far in a "},{"code":"NavigationStack","type":"codeVoice"},{"type":"text","text":" so that we can navigate to"},{"text":" ","type":"text"},{"type":"text","text":"the detail screen. To do this we will create a new root-level feature that will be responsible"},{"text":" ","type":"text"},{"type":"text","text":"for implementing the logic of the stack and integrating all of the features together."}],"url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation#Creating-the-app-view","type":"section","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-view","role":"pseudoSymbol"},"SyncUpForm-03-code-0002.swift":{"syntax":"swift","identifier":"SyncUpForm-03-code-0002.swift","fileType":"swift","fileName":"SyncUpForm.swift","highlights":[{"line":29},{"line":30},{"line":31}],"type":"file","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpForm {","  @ObservableState","  struct State: Equatable {","    var focus: Field? = .title","    var syncUp: SyncUp","","    enum Field: Hashable {","      case attendee(Attendee.ID)","      case title","    }","  }","","  enum Action: BindableAction {","    case addAttendeeButtonTapped","    case binding(BindingAction<State>)","    case onDeleteAttendees(IndexSet)","  }","","  var body: some ReducerOf<Self> {","    BindingReducer()","","    Reduce { state, action in","      switch action {","      case .addAttendeeButtonTapped:","        let attendee = Attendee(id: Attendee.ID())","        state.syncUp.attendees.append(attendee)","        state.focus = .attendee(attendee.id)","        return .none","","      case .binding:","        return .none","","      case let .onDeleteAttendees(indices):","        state.syncUp.attendees.remove(atOffsets: indices)","        if state.syncUp.attendees.isEmpty {","          state.syncUp.attendees.append(","            Attendee(id: Attendee.ID())","          )","        }","        return .none","      }","    }","  }","}","","struct SyncUpFormView: View {","  \/\/ ...","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/MeetingNavigation#Navigate-to-a-meeting":{"title":"Navigate to a meeting","abstract":[{"type":"text","text":"Now that we have a navigation stack in place we can start navigating to other features in the"},{"text":" ","type":"text"},{"type":"text","text":"application. The simplest is the meeting screen, which allows you to see the details of a"},{"text":" ","type":"text"},{"type":"text","text":"previous recorded meeting."}],"url":"\/tutorials\/composablearchitecture\/meetingnavigation#Navigate-to-a-meeting","type":"section","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#Navigate-to-a-meeting","role":"pseudoSymbol"},"SyncUpForm-01-code-0005.swift":{"syntax":"swift","identifier":"SyncUpForm-01-code-0005.swift","fileType":"swift","fileName":"SyncUpForm.swift","highlights":[{"line":13},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31}],"type":"file","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpForm {","  @ObservableState","  struct State: Equatable {","    var syncUp: SyncUp","  }","","  enum Action: BindableAction {","    case binding(BindingAction<State>)","    case onDeleteAttendees(IndexSet)","  }","","  var body: some ReducerOf<Self> {","    BindingReducer()","    ","    Reduce { state, action in","      switch action {","      case .binding:","        return .none","","      case let .onDeleteAttendees(indices):","        state.syncUp.attendees.remove(atOffsets: indices)","        if state.syncUp.attendees.isEmpty {","          state.syncUp.attendees.append(","            Attendee(id: Attendee.ID())","          )","        }","        return .none","      }","    }","  }","}"]},"SyncUpForm-01-code-0004.swift":{"highlights":[{"line":16},{"line":17},{"line":20},{"line":21}],"type":"file","fileName":"SyncUpForm.swift","syntax":"swift","fileType":"swift","identifier":"SyncUpForm-01-code-0004.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpForm {","  @ObservableState","  struct State: Equatable {","    var syncUp: SyncUp","  }","","  enum Action: BindableAction {","    case binding(BindingAction<State>)","  }","","  var body: some ReducerOf<Self> {","    BindingReducer()","    ","    Reduce { state, action in","      switch action {","      case .binding:","        return .none","      }","    }","  }","}"]},"SyncUpForm-02-code-0006.swift":{"identifier":"SyncUpForm-02-code-0006.swift","syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpForm {","  \/\/ ...","}","","struct SyncUpFormView: View {","  @Bindable var store: StoreOf<SyncUpForm>","  @FocusState var focus: Field?","","  enum Field: Hashable {","    case attendee(Attendee.ID)","    case title","  }","","  var body: some View {","    Form {","      Section {","        TextField(\"Title\", text: $store.syncUp.title)","          .focused($focus, equals: .title)","          .onAppear { focus = .title }","        HStack {","          Slider(value: $store.syncUp.duration.minutes, in: 5...30, step: 1) {","            Text(\"Length\")","          }","          Spacer()","          Text(store.syncUp.duration.formatted(.units()))","        }","        ThemePicker(selection: $store.syncUp.theme)","      } header: {","        Text(\"Sync-up Info\")","      }","      Section {","        ForEach($store.syncUp.attendees) { $attendee in","          TextField(\"Name\", text: $attendee.name)","            .focused($focus, equals: .attendee(attendee.id))","        }","        .onDelete { indices in","          store.send(.onDeleteAttendees(indices))","          guard","            !store.syncUp.attendees.isEmpty,","            let firstIndex = indices.first","          else { return }","          let index = min(firstIndex, store.syncUp.attendees.count - 1)","          focus = .attendee(store.syncUp.attendees[index].id)","        }","","        Button(\"New attendee\") {","          store.send(.addAttendeeButtonTapped)","          focus = .attendee(store.syncUp.attendees.last!.id)","        }","      } header: {","        Text(\"Attendees\")","      }","    }","  }","}","","struct ThemePicker: View {","  @Binding var selection: Theme","","  var body: some View {","    Picker(\"Theme\", selection: $selection) {","      ForEach(Theme.allCases) { theme in","        ZStack {","          RoundedRectangle(cornerRadius: 4)","            .fill(theme.mainColor)","          Label(theme.name, systemImage: \"paintpalette\")","            .padding(4)","        }","        .foregroundColor(theme.accentColor)","        .fixedSize(horizontal: false, vertical: true)","        .tag(theme)","      }","    }","  }","}","","extension Duration {","  fileprivate var minutes: Double {","    get { Double(components.seconds \/ 60) }","    set { self = .seconds(newValue * 60) }","  }","}","","#Preview {","  SyncUpFormView(","    store: Store(","      initialState: SyncUpForm.State(","        syncUp: .mock","      )","    ) {","      SyncUpForm()","    }","  )","}"],"fileType":"swift","type":"file","fileName":"SyncUpForm.swift","highlights":[{"line":87},{"line":88},{"line":89},{"line":90},{"line":91},{"line":92},{"line":93},{"line":94},{"line":95},{"line":96},{"line":97},{"line":98}]},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Navigating-to-sync-up-detail":{"kind":"article","role":"article","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Navigating-to-sync-up-detail","type":"topic","title":"Navigating to sync-up detail","url":"\/tutorials\/buildingsyncups\/navigating-to-sync-up-detail","abstract":[]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpFormPresentation#Non-exhaustive-testing":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Non-exhaustive-testing","abstract":[{"type":"text","text":"We have now integrated two moderately complex features, the "},{"code":"SyncUpsList","type":"codeVoice"},{"type":"text","text":" and "},{"code":"SyncUpForm","type":"codeVoice"},{"type":"text","text":", and"},{"text":" ","type":"text"},{"type":"text","text":"so its time to write some tests. This will give us the opportunity to prove that the features"},{"type":"text","text":" "},{"type":"text","text":"work in tandem as we expect, and we will explore “non-exhaustive” testing to make our tests less"},{"text":" ","type":"text"},{"text":"fragile.","type":"text"}],"role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/testingsyncupformpresentation#Non-exhaustive-testing","title":"Non-exhaustive testing","type":"section","kind":"section"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps":{"kind":"overview","role":"overview","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps","type":"topic","title":"Building SyncUps","url":"\/tutorials\/buildingsyncups","abstract":[{"text":"The SyncUps application is a recreation of one of Apple’s more interesting demo applications,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Scrumdinger. We recreate it from scratch using the Composable Architecture, with a focus on"},{"type":"text","text":" "},{"type":"text","text":"domain modeling, controlling dependencies, and testability."}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#Ending-the-meeting-early":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Ending-the-meeting-early","url":"\/tutorials\/composablearchitecture\/implementingtimer#Ending-the-meeting-early","abstract":[{"type":"text","text":"The first major piece of logic and behavior we will introduce to the record meeting feature is"},{"type":"text","text":" "},{"type":"text","text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and"},{"text":" ","type":"text"},{"text":"we need to implement nuanced logic to figure out when to proceed to the next speaker.","type":"text"}],"title":"Ending the meeting early","type":"section","role":"pseudoSymbol","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingListOfSyncUps":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps","url":"\/tutorials\/composablearchitecture\/testinglistofsyncups","abstract":[{"text":"The SyncUpsList feature we have built so far isn’t very complex. In fact, it only has one","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"primary action, that of deleting sync-ups from its collection. However, it can be good practice"},{"type":"text","text":" "},{"type":"text","text":"to test new features as you add them, and in the future we will have much more complicated"},{"text":" ","type":"text"},{"type":"text","text":"behavior to test."}],"title":"Testing the list of sync-ups","type":"topic","role":"project","kind":"project","estimatedTime":"5min"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/RecordMeetingFeature#Navigating-to-the-record-meeting-feature":{"title":"Navigating to the record meeting feature","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Navigating-to-the-record-meeting-feature","type":"section","url":"\/tutorials\/composablearchitecture\/recordmeetingfeature#Navigating-to-the-record-meeting-feature","kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"Let’s get the basics of a new feature into place that we can navigate to, and then we will"},{"text":" ","type":"text"},{"type":"text","text":"slowly layer on its complex logic and behavior, such as the timer and speech recognizer."}]},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Persisting-sync-ups-to-disk":{"type":"topic","title":"Persisting sync-ups to disk","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Persisting-sync-ups-to-disk","abstract":[],"url":"\/tutorials\/buildingsyncups\/persisting-sync-ups-to-disk","kind":"article","role":"article"},"SyncUpForm-03-code-0004.swift":{"syntax":"swift","identifier":"SyncUpForm-03-code-0004.swift","fileType":"swift","fileName":"SyncUpForm.swift","highlights":[{"line":11},{"line":13},{"line":14},{"line":15},{"line":16},{"line":23},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":53}],"type":"file","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpForm {","  \/\/ ...","}","","struct SyncUpFormView: View {","  @Bindable var store: StoreOf<SyncUpForm>","  @FocusState var focus: SyncUpForm.State.Field?","","  \/\/ enum Field: Hashable {","  \/\/   case attendee(Attendee.ID)","  \/\/   case title","  \/\/ }","","  var body: some View {","    Form {","      Section {","        TextField(\"Title\", text: $store.syncUp.title)","          .focused($focus, equals: .title)","          \/\/ .onAppear { focus = .title }","        HStack {","          Slider(value: $store.syncUp.duration.minutes, in: 5...30, step: 1) {","            Text(\"Length\")","          }","          Spacer()","          Text(store.syncUp.duration.formatted(.units()))","        }","        ThemePicker(selection: $store.syncUp.theme)","      } header: {","        Text(\"Sync-up Info\")","      }","      Section {","        ForEach($store.syncUp.attendees) { $attendee in","          TextField(\"Name\", text: $attendee.name)","            .focused($focus, equals: .attendee(attendee.id))","        }","        .onDelete { indices in","          store.send(.onDeleteAttendees(indices))","          \/\/ store.send(.onDeleteAttendees(indices))","          \/\/ guard","          \/\/  !store.syncUp.attendees.isEmpty,","          \/\/  let firstIndex = indices.first","          \/\/ else { return .none }","          \/\/ let index = min(firstIndex, store.syncUp.attendees.count - 1)","          \/\/ focus = .attendee(store.syncUp.attendees[index].id)","        }","","        Button(\"New attendee\") {","          store.send(.addAttendeeButtonTapped)","          \/\/ focus = .attendee(store.syncUp.attendees.last!.id)","        }","      } header: {","        Text(\"Attendees\")","      }","    }","  }","}","","struct ThemePicker: View {","  @Binding var selection: Theme","","  var body: some View {","    Picker(\"Theme\", selection: $selection) {","      ForEach(Theme.allCases) { theme in","        ZStack {","          RoundedRectangle(cornerRadius: 4)","            .fill(theme.mainColor)","          Label(theme.name, systemImage: \"paintpalette\")","            .padding(4)","        }","        .foregroundColor(theme.accentColor)","        .fixedSize(horizontal: false, vertical: true)","        .tag(theme)","      }","    }","  }","}","","extension Duration {","  fileprivate var minutes: Double {","    get { Double(components.seconds \/ 60) }","    set { self = .seconds(newValue * 60) }","  }","}","","#Preview {","  SyncUpFormView(","    store: Store(","      initialState: SyncUpForm.State(","        syncUp: .mock","      )","    ) {","      SyncUpForm()","    }","  )","}"]},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/What-is-SyncUps-":{"type":"topic","title":"What is SyncUps?","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/What-is-SyncUps-","abstract":[],"url":"\/tutorials\/buildingsyncups\/what-is-syncups-","kind":"article","role":"article"},"SyncUpForm-03-code-0001.swift":{"identifier":"SyncUpForm-03-code-0001.swift","highlights":[{"line":8},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14}],"fileType":"swift","syntax":"swift","type":"file","fileName":"SyncUpForm.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpForm {","  @ObservableState","  struct State: Equatable {","    var focus: Field? = .title","    var syncUp: SyncUp","","    enum Field: Hashable {","      case attendee(Attendee.ID)","      case title","    }","  }","","  enum Action: BindableAction {","    case addAttendeeButtonTapped","    case binding(BindingAction<State>)","    case onDeleteAttendees(IndexSet)","  }","","  var body: some ReducerOf<Self> {","    BindingReducer()","","    Reduce { state, action in","      switch action {","      case .addAttendeeButtonTapped:","        state.syncUp.attendees.append(","          Attendee(id: Attendee.ID())","        )","        return .none","","      case .binding:","        return .none","","      case let .onDeleteAttendees(indices):","        state.syncUp.attendees.remove(atOffsets: indices)","        if state.syncUp.attendees.isEmpty {","          state.syncUp.attendees.append(","            Attendee(id: Attendee.ID())","          )","        }","        return .none","      }","    }","  }","}","","struct SyncUpFormView: View {","  \/\/ ...","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/RecordMeetingFeature":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature","title":"The RecordMeeting feature","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/recordmeetingfeature","abstract":[{"type":"text","text":"Let’s get the basics of a new feature into place that we can navigate to, and then we will"},{"text":" ","type":"text"},{"type":"text","text":"slowly layer on its complex logic and behavior, such as the timer and speech recognizer."}],"role":"project","estimatedTime":"5min"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/WhatIsSyncUps":{"estimatedTime":"5min","url":"\/tutorials\/composablearchitecture\/whatissyncups","kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps","abstract":[{"type":"text","text":"Let’s start with a tour of the application we will be building. It’s called SyncUps, and it’s a"},{"text":" ","type":"text"},{"type":"text","text":"recreation of Apple’s Scrumdinger demo application."}],"type":"topic","title":"What is SyncUps?","role":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/MeetingNavigation":{"url":"\/tutorials\/composablearchitecture\/meetingnavigation","role":"project","title":"Navigating to a meeting","estimatedTime":"5min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation","type":"topic","abstract":[{"type":"text","text":"Now that we have a navigation stack in place we can start navigating to other features in the"},{"text":" ","type":"text"},{"type":"text","text":"application. The simplest is the meeting screen, which allows you to see the details of a"},{"type":"text","text":" "},{"type":"text","text":"previous recorded meeting."}],"kind":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpForm#Adding-attendees":{"url":"\/tutorials\/composablearchitecture\/testingsyncupform#Adding-attendees","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Adding-attendees","abstract":[{"type":"text","text":"We now have a moderately complex feature for editing the details of a sync-up, the "},{"code":"SyncUpForm","type":"codeVoice"},{"type":"text","text":" "},{"text":"reducer. Let’s get some test coverage on the feature, and doing so will force us to come","type":"text"},{"type":"text","text":" "},{"text":"face-to-face with dependencies for the first time in this tutorial.","type":"text"}],"type":"section","title":"Adding attendees","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpForm#Removing-attendees":{"url":"\/tutorials\/composablearchitecture\/testingsyncupform#Removing-attendees","role":"pseudoSymbol","title":"Removing attendees","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Removing-attendees","type":"section","abstract":[{"text":"We now have a moderately complex feature for editing the details of a sync-up, the ","type":"text"},{"code":"SyncUpForm","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"reducer. Let’s get some test coverage on the feature, and doing so will force us to come"},{"type":"text","text":" "},{"type":"text","text":"face-to-face with dependencies for the first time in this tutorial."}],"kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps":{"estimatedTime":"10min","url":"\/tutorials\/composablearchitecture\/listsofsyncups","kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps","abstract":[{"type":"text","text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the"},{"type":"text","text":" "},{"type":"text","text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as"},{"text":" ","type":"text"},{"type":"text","text":"the app evolves."}],"type":"topic","title":"Lists of sync-ups","role":"project"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/New-sync-up-form":{"url":"\/tutorials\/buildingsyncups\/new-sync-up-form","role":"article","title":"New sync-up form","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/New-sync-up-form","type":"topic","abstract":[],"kind":"article"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingNavigation":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation","url":"\/tutorials\/composablearchitecture\/testingnavigation","abstract":[{"type":"text","text":"We have now implemented a navigation stack at the root of our application, and integrated"},{"text":" ","type":"text"},{"type":"text","text":"3 features into the stack: the "},{"code":"SyncUpsList","type":"codeVoice"},{"type":"text","text":" feature, the "},{"code":"SyncUpDetail","type":"codeVoice"},{"text":" feature, and the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"MeetingView"},{"text":". Some of these features have quite complex logic binding them together, such as","type":"text"},{"type":"text","text":" "},{"type":"text","text":"when one deletes a sync-up from the detail screen it should pop the screen off the stack."}],"estimatedTime":"10min","role":"project","type":"topic","title":"Testing navigation","kind":"project"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingReducer":{"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A reducer that updates bindable state when it receives binding actions."}],"role":"symbol","navigatorTitle":[{"text":"BindingReducer","kind":"identifier"}],"title":"BindingReducer","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"BindingReducer","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/bindingreducer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared":{"title":"Shared","abstract":[{"type":"text","text":"A property wrapper type that shares a value with multiple parts of an application."}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","type":"topic","navigatorTitle":[{"text":"Shared","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Shared","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/shared"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp#Deleting-the-sync-up":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Deleting-the-sync-up","title":"Deleting the sync-up","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup#Deleting-the-sync-up","abstract":[{"type":"text","text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and"},{"type":"text","text":" "},{"text":"deleting the sync-up. This will force us to face a number of common problems in app development","type":"text"},{"type":"text","text":" "},{"text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns.","type":"text"}],"role":"pseudoSymbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PersistenceReaderKey/fileStorage(_:decoder:encoder:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:decoder:encoder:)","title":"fileStorage(_:decoder:encoder:)","url":"\/documentation\/composablearchitecture\/persistencereaderkey\/filestorage(_:decoder:encoder:)","role":"symbol","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"fileStorage","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"text":"URL","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation3URLV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"decoder"},{"kind":"text","text":": "},{"text":"JSONDecoder","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation11JSONDecoderC"},{"kind":"text","text":", "},{"text":"encoder","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"JSONEncoder","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation11JSONEncoderC"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"abstract":[{"text":"Creates a persistence key that can read and write to a ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" value in the file system."}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingNavigation#Deleting-a-sync-up":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation#Deleting-a-sync-up","title":"Deleting a sync-up","kind":"section","url":"\/tutorials\/composablearchitecture\/testingnavigation#Deleting-a-sync-up","type":"section","abstract":[{"text":"We have now implemented a navigation stack at the root of our application, and integrated","type":"text"},{"type":"text","text":" "},{"text":"3 features into the stack: the ","type":"text"},{"type":"codeVoice","code":"SyncUpsList"},{"type":"text","text":" feature, the "},{"code":"SyncUpDetail","type":"codeVoice"},{"text":" feature, and the","type":"text"},{"type":"text","text":" "},{"code":"MeetingView","type":"codeVoice"},{"type":"text","text":". Some of these features have quite complex logic binding them together, such as"},{"text":" ","type":"text"},{"type":"text","text":"when one deletes a sync-up from the detail screen it should pop the screen off the stack."}],"role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm#Integrating-the-feature-views-together":{"url":"\/tutorials\/composablearchitecture\/presentingsyncupform#Integrating-the-feature-views-together","role":"pseudoSymbol","title":"Integrating the feature views together","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-views-together","type":"section","abstract":[{"type":"text","text":"We now have two features built: the sync-ups list and the sync-up form. These features do not"},{"text":" ","type":"text"},{"type":"text","text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to"},{"type":"text","text":" "},{"type":"text","text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then"},{"text":" ","type":"text"},{"text":"add that sync-up to the root list.","type":"text"}],"kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm#Integrating-the-feature-domains-together":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-domains-together","url":"\/tutorials\/composablearchitecture\/presentingsyncupform#Integrating-the-feature-domains-together","abstract":[{"text":"We now have two features built: the sync-ups list and the sync-up form. These features do not","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to"},{"type":"text","text":" "},{"type":"text","text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then"},{"text":" ","type":"text"},{"type":"text","text":"add that sync-up to the root list."}],"role":"pseudoSymbol","type":"section","title":"Integrating the feature domains together","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/WhatIsSyncUps#A-tour-of-SyncUps":{"url":"\/tutorials\/composablearchitecture\/whatissyncups#A-tour-of-SyncUps","role":"pseudoSymbol","title":"A tour of SyncUps","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#A-tour-of-SyncUps","type":"section","abstract":[{"type":"text","text":"Let’s start with a tour of the application we will be building. It’s called SyncUps, and it’s a"},{"text":" ","type":"text"},{"type":"text","text":"recreation of Apple’s Scrumdinger demo application."}],"kind":"section"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Bindings":{"title":"Working with SwiftUI bindings","url":"\/documentation\/composablearchitecture\/bindings","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings","type":"topic","kind":"article","role":"article","abstract":[{"type":"text","text":"Learn how to connect features written in the Composable Architecture to SwiftUI bindings."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingAction":{"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BindingAction","kind":"identifier"}],"role":"symbol","title":"BindingAction","kind":"symbol","abstract":[{"type":"text","text":"An action that describes simple mutations to some root state at a writable key path."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","navigatorTitle":[{"text":"BindingAction","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/bindingaction"},"SyncUpForm-01-code-0008.swift":{"type":"file","highlights":[{"line":10},{"line":11}],"fileType":"swift","fileName":"SyncUpForm.swift","identifier":"SyncUpForm-01-code-0008.swift","syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpForm {","  \/\/ ...","}","","struct SyncUpFormView: View {","  @Bindable var store: StoreOf<SyncUpForm>","  ","  var body: some View {","    Form {","      ","    }","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpForm":{"url":"\/tutorials\/composablearchitecture\/testingsyncupform","role":"project","title":"Testing the sync-up form","estimatedTime":"10min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm","type":"topic","abstract":[{"type":"text","text":"We now have a moderately complex feature for editing the details of a sync-up, the "},{"code":"SyncUpForm","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"reducer. Let’s get some test coverage on the feature, and doing so will force us to come"},{"type":"text","text":" "},{"text":"face-to-face with dependencies for the first time in this tutorial.","type":"text"}],"kind":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/MeetingNavigation#The-meeting-screen":{"abstract":[{"text":"Now that we have a navigation stack in place we can start navigating to other features in the","type":"text"},{"type":"text","text":" "},{"text":"application. The simplest is the meeting screen, which allows you to see the details of a","type":"text"},{"text":" ","type":"text"},{"text":"previous recorded meeting.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/meetingnavigation#The-meeting-screen","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#The-meeting-screen","kind":"section","title":"The meeting screen","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm#Form-focus-a-better-approach":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-a-better-approach","url":"\/tutorials\/composablearchitecture\/syncupform#Form-focus-a-better-approach","title":"Form focus: a better approach","role":"pseudoSymbol","abstract":[{"text":"We will create a new feature with the Composable Architecture that is capable of editing the","type":"text"},{"type":"text","text":" "},{"text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the","type":"text"},{"text":" ","type":"text"},{"text":"feature to make things a little more interesting.","type":"text"}],"type":"section","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetail#Create-the-sync-up-detail":{"abstract":[{"text":"The “sync-up detail” screen shows all the information of a sync-up, and has many actions that","type":"text"},{"type":"text","text":" "},{"text":"can take place in the screen. The user can edit the sync-up, or start a new meeting in the sync","type":"text"},{"text":" ","type":"text"},{"text":"up, or drill-down to a past meeting, or even delete the meeting.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/syncupdetail#Create-the-sync-up-detail","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail#Create-the-sync-up-detail","kind":"section","title":"Create the sync-up detail","type":"section"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservationBackport":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport","url":"\/documentation\/composablearchitecture\/observationbackport","title":"Observation backport","role":"article","abstract":[{"text":"Learn how the Observation framework from Swift 5.9 was backported to support iOS 16 and earlier,","type":"text"},{"type":"text","text":" "},{"text":"as well as the caveats of using the backported tools.","type":"text"}],"type":"topic","kind":"article"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation":{"abstract":[{"text":"We will wrap the application built so far in a ","type":"text"},{"type":"codeVoice","code":"NavigationStack"},{"text":" so that we can navigate to","type":"text"},{"text":" ","type":"text"},{"text":"the detail screen. To do this we will create a new root-level feature that will be responsible","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for implementing the logic of the stack and integrating all of the features together."}],"url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation","role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation","kind":"project","title":"Navigating to a sync-up detail","type":"topic","estimatedTime":"20min"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpFormPresentation":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation","url":"\/tutorials\/composablearchitecture\/testingsyncupformpresentation","title":"Testing the add sync-up flow","role":"project","abstract":[{"text":"We have now integrated two moderately complex features, the ","type":"text"},{"type":"codeVoice","code":"SyncUpsList"},{"text":" and ","type":"text"},{"code":"SyncUpForm","type":"codeVoice"},{"text":", and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"so its time to write some tests. This will give us the opportunity to prove that the features"},{"text":" ","type":"text"},{"type":"text","text":"work in tandem as we expect, and we will explore “non-exhaustive” testing to make our tests less"},{"text":" ","type":"text"},{"text":"fragile.","type":"text"}],"estimatedTime":"10min","type":"topic","kind":"project"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Sync-up-detail":{"abstract":[],"url":"\/tutorials\/buildingsyncups\/sync-up-detail","role":"article","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Sync-up-detail","kind":"article","title":"Sync-up detail","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindableAction":{"title":"BindableAction","navigatorTitle":[{"text":"BindableAction","kind":"identifier"}],"type":"topic","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindableAction"}],"abstract":[{"text":"An action type that exposes a ","type":"text"},{"type":"codeVoice","code":"binding"},{"text":" case that holds a ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction","kind":"symbol","url":"\/documentation\/composablearchitecture\/bindableaction"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm","title":"Presenting the sync-up form","url":"\/tutorials\/composablearchitecture\/presentingsyncupform","role":"project","abstract":[{"text":"We now have two features built: the sync-ups list and the sync-up form. These features do not","type":"text"},{"type":"text","text":" "},{"text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to","type":"text"},{"text":" ","type":"text"},{"text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then","type":"text"},{"type":"text","text":" "},{"type":"text","text":"add that sync-up to the root list."}],"estimatedTime":"10min","type":"topic","kind":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PersistingSyncUps":{"abstract":[{"text":"Now that we have the ability to add and remove sync-ups from the application, let’s add some","type":"text"},{"type":"text","text":" "},{"text":"persistence. This will involve using the “shared state” tools from the library, such as","type":"text"},{"text":" ","type":"text"},{"overridingTitle":"@Shared","overridingTitleInlineContent":[{"code":"@Shared","type":"codeVoice"}],"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","isActive":true},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:decoder:encoder:)","isActive":true},{"text":".","type":"text"}],"url":"\/tutorials\/composablearchitecture\/persistingsyncups","role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps","kind":"project","title":"Persisting sync-ups","type":"topic","estimatedTime":"5min"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingSpeechRecognizer#Asking-for-speech-recognition-permission":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer#Asking-for-speech-recognition-permission","title":"Asking for speech recognition permission","url":"\/tutorials\/composablearchitecture\/implementingspeechrecognizer#Asking-for-speech-recognition-permission","role":"pseudoSymbol","abstract":[{"text":"We have just one feature left to implement, and it’s one of the most complicated ones. We need","type":"text"},{"type":"text","text":" "},{"text":"to use Apple’s ","type":"text"},{"code":"SFSpeechRecognizer","type":"codeVoice"},{"text":" API to ask the user for permission to transcribe their","type":"text"},{"type":"text","text":" "},{"type":"text","text":"audio, and then start a speech recognition task to live transcribe the meeting while it is"},{"text":" ","type":"text"},{"type":"text","text":"in progress."}],"type":"section","kind":"section"},"SyncUpForm-01-code-0007.swift":{"content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpForm {","  \/\/ ...","}","","struct SyncUpFormView: View {","  var body: some View {","    Form {","      ","    }","  }","}"],"fileName":"SyncUpForm.swift","identifier":"SyncUpForm-01-code-0007.swift","type":"file","highlights":[{"line":6},{"line":7},{"line":9},{"line":10},{"line":11},{"line":12}],"fileType":"swift","syntax":"swift"},"SyncUpForm-01-code-0002.swift":{"identifier":"SyncUpForm-01-code-0002.swift","syntax":"swift","highlights":[{"line":8}],"fileName":"SyncUpForm.swift","fileType":"swift","type":"file","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpForm {","  @ObservableState","  struct State: Equatable {","    var syncUp: SyncUp","  }","","  enum Action {","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      }","    }","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm#Form-focus-an-approach":{"abstract":[{"text":"We will create a new feature with the Composable Architecture that is capable of editing the","type":"text"},{"type":"text","text":" "},{"text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the","type":"text"},{"text":" ","type":"text"},{"text":"feature to make things a little more interesting.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/syncupform#Form-focus-an-approach","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-an-approach","kind":"section","title":"Form focus: an approach","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#A-basic-timer":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#A-basic-timer","title":"A basic timer","url":"\/tutorials\/composablearchitecture\/implementingtimer#A-basic-timer","role":"pseudoSymbol","abstract":[{"text":"The first major piece of logic and behavior we will introduce to the record meeting feature is","type":"text"},{"type":"text","text":" "},{"text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and","type":"text"},{"text":" ","type":"text"},{"text":"we need to implement nuanced logic to figure out when to proceed to the next speaker.","type":"text"}],"type":"section","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingSpeechRecognizer":{"abstract":[{"text":"We have just one feature left to implement, and it’s one of the most complicated ones. We need","type":"text"},{"type":"text","text":" "},{"text":"to use Apple’s ","type":"text"},{"code":"SFSpeechRecognizer","type":"codeVoice"},{"text":" API to ask the user for permission to transcribe their","type":"text"},{"type":"text","text":" "},{"type":"text","text":"audio, and then start a speech recognition task to live transcribe the meeting while it is"},{"text":" ","type":"text"},{"type":"text","text":"in progress."}],"url":"\/tutorials\/composablearchitecture\/implementingspeechrecognizer","role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer","kind":"project","title":"Adding a speech recognizer","type":"topic","estimatedTime":"10min"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps#SyncUpsList-feature":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#SyncUpsList-feature","title":"SyncUpsList feature","url":"\/tutorials\/composablearchitecture\/listsofsyncups#SyncUpsList-feature","role":"pseudoSymbol","abstract":[{"text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the","type":"text"},{"type":"text","text":" "},{"text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as","type":"text"},{"text":" ","type":"text"},{"text":"the app evolves.","type":"text"}],"type":"section","kind":"section"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Lists-of-sync-ups":{"abstract":[],"url":"\/tutorials\/buildingsyncups\/lists-of-sync-ups","role":"article","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Lists-of-sync-ups","kind":"article","title":"Lists of sync-ups","type":"topic"},"SyncUpForm-01-code-0001.swift":{"identifier":"SyncUpForm-01-code-0001.swift","syntax":"swift","highlights":[],"fileName":"SyncUpForm.swift","fileType":"swift","type":"file","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpForm {","  @ObservableState","  struct State: Equatable {","  }","","  enum Action {","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      }","    }","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps#A-handy-debugging-tool":{"abstract":[{"text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the","type":"text"},{"type":"text","text":" "},{"text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as","type":"text"},{"text":" ","type":"text"},{"text":"the app evolves.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/listsofsyncups#A-handy-debugging-tool","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#A-handy-debugging-tool","title":"A handy debugging tool","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer","url":"\/tutorials\/composablearchitecture\/implementingtimer","title":"Adding a meeting timer","role":"project","abstract":[{"text":"The first major piece of logic and behavior we will introduce to the record meeting feature is","type":"text"},{"type":"text","text":" "},{"text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and","type":"text"},{"text":" ","type":"text"},{"text":"we need to implement nuanced logic to figure out when to proceed to the next speaker.","type":"text"}],"estimatedTime":"25min","type":"topic","kind":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingListOfSyncUps#Writing-your-first-test":{"abstract":[{"text":"The SyncUpsList feature we have built so far isn’t very complex. In fact, it only has one","type":"text"},{"type":"text","text":" "},{"text":"primary action, that of deleting sync-ups from its collection. However, it can be good practice","type":"text"},{"text":" ","type":"text"},{"text":"to test new features as you add them, and in the future we will have much more complicated","type":"text"},{"type":"text","text":" "},{"type":"text","text":"behavior to test."}],"url":"\/tutorials\/composablearchitecture\/testinglistofsyncups#Writing-your-first-test","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps#Writing-your-first-test","title":"Writing your first test","type":"section"},"SyncUpForm-02-code-0005.swift":{"identifier":"SyncUpForm-02-code-0005.swift","syntax":"swift","highlights":[{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47}],"fileName":"SyncUpForm.swift","fileType":"swift","type":"file","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpForm {","  \/\/ ...","}","","struct SyncUpFormView: View {","  @Bindable var store: StoreOf<SyncUpForm>","  @FocusState var focus: Field?","","  enum Field: Hashable {","    case attendee(Attendee.ID)","    case title","  }","","  var body: some View {","    Form {","      Section {","        TextField(\"Title\", text: $store.syncUp.title)","          .focused($focus, equals: .title)","          .onAppear { focus = .title }","        HStack {","          Slider(value: $store.syncUp.duration.minutes, in: 5...30, step: 1) {","            Text(\"Length\")","          }","          Spacer()","          Text(store.syncUp.duration.formatted(.units()))","        }","        ThemePicker(selection: $store.syncUp.theme)","      } header: {","        Text(\"Sync-up Info\")","      }","      Section {","        ForEach($store.syncUp.attendees) { $attendee in","          TextField(\"Name\", text: $attendee.name)","            .focused($focus, equals: .attendee(attendee.id))","        }","        .onDelete { indices in","          store.send(.onDeleteAttendees(indices))","          guard","            !store.syncUp.attendees.isEmpty,","            let firstIndex = indices.first","          else { return }","          let index = min(firstIndex, store.syncUp.attendees.count - 1)","          focus = .attendee(store.syncUp.attendees[index].id)","        }","","        Button(\"New attendee\") {","          store.send(.addAttendeeButtonTapped)","          focus = .attendee(store.syncUp.attendees.last!.id)","        }","      } header: {","        Text(\"Attendees\")","      }","    }","  }","}","","struct ThemePicker: View {","  @Binding var selection: Theme","","  var body: some View {","    Picker(\"Theme\", selection: $selection) {","      ForEach(Theme.allCases) { theme in","        ZStack {","          RoundedRectangle(cornerRadius: 4)","            .fill(theme.mainColor)","          Label(theme.name, systemImage: \"paintpalette\")","            .padding(4)","        }","        .foregroundColor(theme.accentColor)","        .fixedSize(horizontal: false, vertical: true)","        .tag(theme)","      }","    }","  }","}","","extension Duration {","  fileprivate var minutes: Double {","    get { Double(components.seconds \/ 60) }","    set { self = .seconds(newValue * 60) }","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#Testing-the-timer":{"abstract":[{"text":"The first major piece of logic and behavior we will introduce to the record meeting feature is","type":"text"},{"type":"text","text":" "},{"text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and","type":"text"},{"text":" ","type":"text"},{"text":"we need to implement nuanced logic to figure out when to proceed to the next speaker.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/implementingtimer#Testing-the-timer","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Testing-the-timer","title":"Testing the timer","type":"section"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/body-20w8t":{"role":"symbol","abstract":[{"type":"text","text":"The content and behavior of a reducer that is composed from other reducers."}],"required":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-20w8t","url":"\/documentation\/composablearchitecture\/reducer\/body-20w8t","kind":"symbol","type":"topic","defaultImplementations":2,"title":"body","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"body"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP4BodyQa","kind":"typeIdentifier","text":"Body"}]},"SyncUpForm-01-code-0006.swift":{"identifier":"SyncUpForm-01-code-0006.swift","syntax":"swift","highlights":[{"line":12},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27}],"fileName":"SyncUpForm.swift","fileType":"swift","type":"file","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpForm {","  @ObservableState","  struct State: Equatable {","    var syncUp: SyncUp","  }","","  enum Action: BindableAction {","    case addAttendeeButtonTapped","    case binding(BindingAction<State>)","    case onDeleteAttendees(IndexSet)","  }","","  var body: some ReducerOf<Self> {","    BindingReducer()","    ","    Reduce { state, action in","      switch action {","      case .addAttendeeButtonTapped:","        state.syncUp.attendees.append(","          Attendee(id: Attendee.ID())","        )","        return .none","","      case .binding:","        return .none","","      case let .onDeleteAttendees(indices):","        state.syncUp.attendees.remove(atOffsets: indices)","        if state.syncUp.attendees.isEmpty {","          state.syncUp.attendees.append(","            Attendee(id: Attendee.ID())","          )","        }","        return .none","      }","    }","  }","}"]},"SyncUpForm-02-code-0003.swift":{"content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpForm {","  \/\/ ...","}","","struct SyncUpFormView: View {","  @Bindable var store: StoreOf<SyncUpForm>","  @FocusState var focus: Field?","","  enum Field: Hashable {","    case attendee(Attendee.ID)","    case title","  }","","  var body: some View {","    Form {","      Section {","        TextField(\"Title\", text: $store.syncUp.title)","          .focused($focus, equals: .title)","          .onAppear { focus = .title }","        HStack {","          Slider(value: $store.syncUp.duration.minutes, in: 5...30, step: 1) {","            Text(\"Length\")","          }","          Spacer()","          Text(store.syncUp.duration.formatted(.units()))","        }","        ThemePicker(selection: $store.syncUp.theme)","      } header: {","        Text(\"Sync-up Info\")","      }","      Section {","        ForEach($store.syncUp.attendees) { $attendee in","          TextField(\"Name\", text: $attendee.name)","            .focused($focus, equals: .attendee(attendee.id))","        }","        .onDelete { indices in","          store.send(.onDeleteAttendees(indices))","        }","","        Button(\"New attendee\") {","          store.send(.addAttendeeButtonTapped)","        }","      } header: {","        Text(\"Attendees\")","      }","    }","  }","}","","struct ThemePicker: View {","  @Binding var selection: Theme","","  var body: some View {","    Picker(\"Theme\", selection: $selection) {","      ForEach(Theme.allCases) { theme in","        ZStack {","          RoundedRectangle(cornerRadius: 4)","            .fill(theme.mainColor)","          Label(theme.name, systemImage: \"paintpalette\")","            .padding(4)","        }","        .foregroundColor(theme.accentColor)","        .fixedSize(horizontal: false, vertical: true)","        .tag(theme)","      }","    }","  }","}","","extension Duration {","  fileprivate var minutes: Double {","    get { Double(components.seconds \/ 60) }","    set { self = .seconds(newValue * 60) }","  }","}"],"fileName":"SyncUpForm.swift","identifier":"SyncUpForm-02-code-0003.swift","type":"file","highlights":[{"line":23}],"fileType":"swift","syntax":"swift"},"SyncUpForm-03-code-0005.swift":{"identifier":"SyncUpForm-03-code-0005.swift","syntax":"swift","highlights":[{"line":45}],"fileName":"SyncUpForm.swift","fileType":"swift","type":"file","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpForm {","  \/\/ ...","}","","struct SyncUpFormView: View {","  @Bindable var store: StoreOf<SyncUpForm>","  @FocusState var focus: SyncUpForm.State.Field?","","  var body: some View {","    Form {","      Section {","        TextField(\"Title\", text: $store.syncUp.title)","          .focused($focus, equals: .title)","        HStack {","          Slider(value: $store.syncUp.duration.minutes, in: 5...30, step: 1) {","            Text(\"Length\")","          }","          Spacer()","          Text(store.syncUp.duration.formatted(.units()))","        }","        ThemePicker(selection: $store.syncUp.theme)","      } header: {","        Text(\"Sync-up Info\")","      }","      Section {","        ForEach($store.syncUp.attendees) { $attendee in","          TextField(\"Name\", text: $attendee.name)","            .focused($focus, equals: .attendee(attendee.id))","        }","        .onDelete { indices in","          store.send(.onDeleteAttendees(indices))","        }","","        Button(\"New attendee\") {","          store.send(.addAttendeeButtonTapped)","        }","      } header: {","        Text(\"Attendees\")","      }","    }","    .bind($store.focus, to: $focus)","  }","}","","struct ThemePicker: View {","  @Binding var selection: Theme","","  var body: some View {","    Picker(\"Theme\", selection: $selection) {","      ForEach(Theme.allCases) { theme in","        ZStack {","          RoundedRectangle(cornerRadius: 4)","            .fill(theme.mainColor)","          Label(theme.name, systemImage: \"paintpalette\")","            .padding(4)","        }","        .foregroundColor(theme.accentColor)","        .fixedSize(horizontal: false, vertical: true)","        .tag(theme)","      }","    }","  }","}","","extension Duration {","  fileprivate var minutes: Double {","    get { Double(components.seconds \/ 60) }","    set { self = .seconds(newValue * 60) }","  }","}","","#Preview {","  SyncUpFormView(","    store: Store(","      initialState: SyncUpForm.State(","        syncUp: .mock","      )","    ) {","      SyncUpForm()","    }","  )","}"]},"SyncUpForm-02-video-0007.mp4":{"variants":[{"traits":["1x","light"],"url":"\/videos\/ComposableArchitecture\/SyncUpForm-02-video-0007.mp4"}],"poster":null,"type":"video","alt":null,"identifier":"SyncUpForm-02-video-0007.mp4"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp#Editing-the-sync-up":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Editing-the-sync-up","url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup#Editing-the-sync-up","title":"Editing the sync-up","role":"pseudoSymbol","abstract":[{"text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and","type":"text"},{"type":"text","text":" "},{"text":"deleting the sync-up. This will force us to face a number of common problems in app development","type":"text"},{"text":" ","type":"text"},{"text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns.","type":"text"}],"type":"section","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm#Adding-a-new-sync-up-to-the-list":{"abstract":[{"text":"We now have two features built: the sync-ups list and the sync-up form. These features do not","type":"text"},{"type":"text","text":" "},{"text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to","type":"text"},{"text":" ","type":"text"},{"text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then","type":"text"},{"type":"text","text":" "},{"type":"text","text":"add that sync-up to the root list."}],"url":"\/tutorials\/composablearchitecture\/presentingsyncupform#Adding-a-new-sync-up-to-the-list","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Adding-a-new-sync-up-to-the-list","title":"Adding a new sync-up to the list","type":"section"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Presenting-the-sync-up-form":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Presenting-the-sync-up-form","url":"\/tutorials\/buildingsyncups\/presenting-the-sync-up-form","title":"Presenting the sync-up form","role":"article","abstract":[],"type":"topic","kind":"article"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation#Creating-the-app-feature":{"abstract":[{"text":"We will wrap the application built so far in a ","type":"text"},{"type":"codeVoice","code":"NavigationStack"},{"text":" so that we can navigate to","type":"text"},{"text":" ","type":"text"},{"text":"the detail screen. To do this we will create a new root-level feature that will be responsible","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for implementing the logic of the stack and integrating all of the features together."}],"url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation#Creating-the-app-feature","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-feature","kind":"section","type":"section","title":"Creating the app feature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PersistingSyncUps#Persisting-data-to-disk":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Persisting-data-to-disk","url":"\/tutorials\/composablearchitecture\/persistingsyncups#Persisting-data-to-disk","title":"Persisting data to disk","role":"pseudoSymbol","abstract":[{"text":"Now that we have the ability to add and remove sync-ups from the application, let’s add some","type":"text"},{"type":"text","text":" "},{"text":"persistence. This will involve using the “shared state” tools from the library, such as","type":"text"},{"text":" ","type":"text"},{"overridingTitle":"@Shared","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","overridingTitleInlineContent":[{"code":"@Shared","type":"codeVoice"}],"type":"reference","isActive":true},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:decoder:encoder:)","isActive":true},{"text":".","type":"text"}],"type":"section","kind":"section"}}}