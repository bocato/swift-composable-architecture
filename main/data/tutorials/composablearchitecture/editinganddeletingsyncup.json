{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp"},"sections":[{"title":"Editing and deleting a sync-up","chapter":"Sync-up detail","estimatedTimeInMinutes":30,"content":[{"type":"paragraph","inlineContent":[{"text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and","type":"text"},{"text":" ","type":"text"},{"text":"deleting the sync-up. This will force us to face a number of common problems in app development","type":"text"},{"type":"text","text":" "},{"type":"text","text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns."}]}],"kind":"hero"},{"kind":"tasks","tasks":[{"stepsSection":[{"type":"paragraph","inlineContent":[{"text":"We want to present the ","type":"text"},{"type":"codeVoice","code":"SyncUpFormView"},{"text":" from the ","type":"text"},{"type":"codeVoice","code":"SyncUpDetailView"},{"text":" in a sheet, and so we will","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"need to use the presentation tools of the library just as we did in the "},{"code":"SyncUpListsView","type":"codeVoice"},{"type":"text","text":"."}]},{"media":null,"caption":[{"style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"We have collapsed the code in the ","type":"text"},{"type":"codeVoice","code":"SyncUpDetailView"},{"text":" for now.","type":"text"}]}],"type":"aside"}],"content":[{"type":"paragraph","inlineContent":[{"text":"Go to the SyncUpDetail.swift file and update the ","type":"text"},{"type":"codeVoice","code":"State"},{"type":"text","text":" of the feature so that it holds on"},{"text":" ","type":"text"},{"type":"text","text":"to an optional piece of "},{"type":"codeVoice","code":"SyncUpForm.State"},{"type":"text","text":" using the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"macro. When the state is non-"},{"code":"nil","type":"codeVoice"},{"text":" the sheet will be presented, and when it is ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":" it will"},{"type":"text","text":" "},{"text":"be dismissed.","type":"text"}]}],"code":"EditingAndDeletingSyncUp-01-code-0001.swift","type":"step","runtimePreview":null},{"code":"EditingAndDeletingSyncUp-01-code-0002.swift","content":[{"inlineContent":[{"text":"Add a case to the ","type":"text"},{"type":"codeVoice","code":"Action"},{"text":" enum to represent the","type":"text"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},{"text":" of the ","type":"text"},{"code":"SyncUpForm","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"EditingAndDeletingSyncUp-01-code-0003.swift","runtimePreview":null,"media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Integrate the ","type":"text"},{"code":"SyncUpForm","type":"codeVoice"},{"type":"text","text":" reducer into the "},{"type":"codeVoice","code":"SyncUpDetail"},{"text":" reducer by using the","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q","type":"reference","isActive":true},{"text":" ","type":"text"},{"text":"operator.","type":"text"}]}],"caption":[]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The domains of the child and parent features are now fully integrated together. We can now"},{"text":" ","type":"text"},{"type":"text","text":"implement the logic that causes the edit sheet to be presented."}]},{"caption":[],"code":"EditingAndDeletingSyncUp-01-code-0004.swift","type":"step","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"When the “Edit” button is tapped we can populate the "},{"code":"editSyncUp","type":"codeVoice"},{"text":" state to represent the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"sheet should be presented. We can pass along the local "},{"type":"codeVoice","code":"syncUp"},{"text":" value to the ","type":"text"},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":" so"},{"type":"text","text":" "},{"text":"that it has the freshest data to edit.","type":"text"}],"type":"paragraph"}],"media":null},{"inlineContent":[{"text":"That is the basics of presenting the “Edit sync-up” sheet from the sync-up detail view. There","type":"text"},{"type":"text","text":" "},{"text":"will be more to do in this reducer in a moment, but we can leave it here for now and","type":"text"},{"text":" ","type":"text"},{"text":"concentrate on the view layer for a moment.","type":"text"}],"type":"paragraph"},{"content":[{"inlineContent":[{"type":"text","text":"Update the "},{"type":"codeVoice","code":"store"},{"text":" property in the view to be ","type":"text"},{"code":"@Bindable","type":"codeVoice"},{"text":" since we will need to derive","type":"text"},{"type":"text","text":" "},{"text":"bindings from the store for driving navigation from state.","type":"text"}],"type":"paragraph"}],"caption":[{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We have collapsed the implementation of the "},{"code":"SyncUpDetail","type":"codeVoice"},{"text":" reducer in this snippet.","type":"text"}]}],"name":"Note"}],"media":null,"runtimePreview":null,"type":"step","code":"EditingAndDeletingSyncUp-01-code-0005.swift"},{"runtimePreview":null,"code":"EditingAndDeletingSyncUp-01-code-0006.swift","content":[{"inlineContent":[{"type":"text","text":"At the very bottom of the view use the "},{"type":"codeVoice","code":"sheet(item:)"},{"type":"text","text":" modifier by deriving a binding to the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":" domain using "},{"type":"codeVoice","code":"SwiftUI\/Binding\/scope(state:action:fileID:filePath:line:column:)"},{"type":"text","text":"."}],"type":"paragraph"}],"type":"step","caption":[],"media":null},{"runtimePreview":null,"type":"step","media":null,"caption":[{"type":"aside","name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Just as we did in the "},{"type":"codeVoice","code":"SyncUpsListView"},{"type":"text","text":", we decided to keep the navigation"},{"type":"text","text":" "},{"type":"text","text":"customizations (title and toolbar) in the parent domain rather than the child. This has"},{"type":"text","text":" "},{"type":"text","text":"allowed us to provide domain specific versions of this UI for creating a new sync-up"},{"type":"text","text":" "},{"text":"versus editing an existing sync-up.","type":"text"}]}]}],"code":"EditingAndDeletingSyncUp-01-code-0007.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Provide a navigation title and toolbar buttons to the sheet for saving and cancelling the"},{"type":"text","text":" "},{"type":"text","text":"edits made to the sync-up."}]}]},{"runtimePreview":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"Send actions to the store when each of the toolbar buttons is tapped."}],"type":"paragraph"}],"media":null,"caption":[{"name":"Note","content":[{"inlineContent":[{"type":"text","text":"These actions do not exist yet. We will be creating them next."}],"type":"paragraph"}],"style":"note","type":"aside"}],"code":"EditingAndDeletingSyncUp-01-code-0008.swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We have now finished integrating the "},{"code":"SyncUpForm","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" at the view layer, and so"},{"type":"text","text":" "},{"text":"all that is left is to finish integrating the features at the reducer level.","type":"text"}]},{"media":null,"type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add the new cases to the "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" enum that are being sent from the view."}]}],"runtimePreview":null,"code":"EditingAndDeletingSyncUp-01-code-0009.swift"},{"code":"EditingAndDeletingSyncUp-01-code-0010.swift","runtimePreview":null,"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Implement the "},{"type":"codeVoice","code":"cancelEditButtonTapped"},{"text":" action by simply clearing out the ","type":"text"},{"code":"editSyncUp","type":"codeVoice"},{"type":"text","text":" state."},{"text":" ","type":"text"},{"text":"This will cause the view to dismiss the sheet.","type":"text"}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Any changes the "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":" made to its local "},{"code":"syncUp","type":"codeVoice"},{"type":"text","text":" state will be discarded"},{"type":"text","text":" "},{"text":"because that state is fully disconnected from the ","type":"text"},{"code":"syncUp","type":"codeVoice"},{"type":"text","text":" held in the "},{"code":"SyncUpDetail","type":"codeVoice"},{"type":"text","text":"."}]}],"name":"Note","type":"aside"}],"type":"step"},{"runtimePreview":null,"code":"EditingAndDeletingSyncUp-01-code-0011.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Implement the ","type":"text"},{"code":"doneEditingButtonTapped","type":"codeVoice"},{"text":" action by grabbing the latest ","type":"text"},{"type":"codeVoice","code":"syncUp"},{"text":" value from","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"code":"editSyncUp","type":"codeVoice"},{"type":"text","text":" state, and replacing "},{"code":"SyncUpDetail","type":"codeVoice"},{"type":"text","text":"’s state with that value."}]}],"media":null,"type":"step","caption":[]},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Run the preview to see that you can tap the “Edit” button to bring up the sync-up form"},{"text":" ","type":"text"},{"type":"text","text":"sheet. Then make some changes to the sync-up, and see that tapping “Done” causes those"},{"text":" ","type":"text"},{"type":"text","text":"changes to be committed to the sync-up in the detail screen."}]}],"media":"EditingAndDeletingSyncUp-01-cover-480p.mov","caption":[],"runtimePreview":null,"type":"step"}],"title":"Editing the sync-up","anchor":"Editing-the-sync-up","contentSection":[{"content":[{"inlineContent":[{"text":"To edit the sync-up we will reuse the ","type":"text"},{"type":"codeVoice","code":"SyncUpFormView"},{"type":"text","text":" that we previously used for "},{"inlineContent":[{"text":"adding","type":"text"}],"type":"emphasis"},{"type":"text","text":" a"},{"type":"text","text":" "},{"text":"sync-up. This will allow us to see how easy it is to reuse features in the Composable","type":"text"},{"type":"text","text":" "},{"text":"Architecture, and it will allow us to explore how to communicate from the child feature","type":"text"},{"type":"text","text":" "},{"text":"back to the parent.","type":"text"}],"type":"paragraph"}],"media":"EditingAndDeletingSyncUp-01-cover-480p.mov","kind":"contentAndMedia","mediaPosition":"trailing"}]},{"stepsSection":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Technically, alerts can be shown in Composable Architecture features in exactly the same way"},{"type":"text","text":" "},{"type":"text","text":"they are in vanilla SwiftUI by using the various "},{"type":"codeVoice","code":"alert"},{"type":"text","text":" view modifiers. However, the library"},{"type":"text","text":" "},{"type":"text","text":"comes with some tools that can improve how alerts are shown, and can make the alerts more"},{"type":"text","text":" "},{"text":"easily testable. We will use those tools.","type":"text"}]},{"code":"EditingAndDeletingSyncUp-02-code-0001.swift","runtimePreview":null,"caption":[{"style":"note","type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We are pre-emptively applying the "},{"code":"@CasePathable","type":"codeVoice"},{"type":"text","text":" macro to make it possible to write"},{"type":"text","text":" "},{"text":"tests against these actions in a keypath-like syntax. The ","type":"text"},{"code":"@CasePathable","type":"codeVoice"},{"type":"text","text":" macro is"},{"text":" ","type":"text"},{"text":"automatically applied to ","type":"text"},{"type":"codeVoice","code":"Action"},{"type":"text","text":" enums inside reducers, but macros cannot recursively apply"},{"text":" ","type":"text"},{"type":"text","text":"themselves and so we must do it manually sometimes."}]}]}],"type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"We start by modeling a new ","type":"text"},{"type":"codeVoice","code":"Alert"},{"type":"text","text":" enum nested "},{"inlineContent":[{"type":"text","text":"inside"}],"type":"emphasis"},{"type":"text","text":" the "},{"code":"Action","type":"codeVoice"},{"type":"text","text":" enum that represents"},{"text":" ","type":"text"},{"type":"text","text":"all the actions the user can take in the alert. The user can only confirm deletion or cancel"},{"type":"text","text":" "},{"text":"deletion, and we do not have to model the cancel action. That is automatically taken care of","type":"text"},{"type":"text","text":" "},{"text":"by the library’s navigation tools.","type":"text"}]}]},{"caption":[{"style":"note","type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"We are using the ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/swiftpackageindex.com\/pointfreeco\/swiftui-navigation\/1.2.0\/documentation\/swiftuinavigationcore\/alertstate"},{"type":"text","text":" from our"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"http:\/\/github.com\/pointfreeco\/swiftui-navigation"},{"text":" library, which automatically comes with the Composable","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Architecture. It is a pure data description of an alert that can be shown to the user, and"},{"type":"text","text":" "},{"type":"text","text":"it is generic over the type of actions that can be sent from the alert."}]}]}],"runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Add another piece of optional state using the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()","isActive":true,"type":"reference"},{"text":" macro,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"this time representing whether or not an alert is shown."}]}],"code":"EditingAndDeletingSyncUp-02-code-0002.swift","media":null},{"type":"step","runtimePreview":null,"media":null,"caption":[],"content":[{"inlineContent":[{"text":"Add another ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},{"type":"text","text":" case to the "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" enum that"},{"text":" ","type":"text"},{"type":"text","text":"represents the actions the alert can send."}],"type":"paragraph"}],"code":"EditingAndDeletingSyncUp-02-code-0003.swift"},{"caption":[],"code":"EditingAndDeletingSyncUp-02-code-0004.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Handle the "},{"code":".alert","type":"codeVoice"},{"type":"text","text":" case in the reducer, and use the"},{"type":"text","text":" "},{"type":"codeVoice","code":"ComposableArchitecture\/Reducer\/ifLet(_:action:then:fileID:line:)-7s8h2"},{"type":"text","text":" operator"},{"text":" ","type":"text"},{"text":"again to integrate the alert’s logic into the ","type":"text"},{"code":"SyncUpDetail","type":"codeVoice"},{"type":"text","text":" reducer."}]}],"type":"step","media":null,"runtimePreview":null},{"inlineContent":[{"type":"text","text":"Integrating the logic of an alert into a feature is a bit different from integrating the"},{"text":" ","type":"text"},{"text":"logic of a fully fledged feature. This is because alerts are immediately dismissed when a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"button is tapped and has no internal logic or behavior of its own. For this reason there is"},{"type":"text","text":" "},{"text":"no reducer to specify in the trailing closure of ","type":"text"},{"code":"ifLet","type":"codeVoice"},{"text":", and in fact it can be removed.","type":"text"}],"type":"paragraph"},{"type":"step","media":null,"runtimePreview":null,"caption":[],"code":"EditingAndDeletingSyncUp-02-code-0005.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Remove the trailing closure from the "},{"type":"codeVoice","code":"ifLet"},{"type":"text","text":" because the alert does not have any additional"},{"text":" ","type":"text"},{"type":"text","text":"behavior to execute."}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We now have the alert integrated into the "},{"type":"codeVoice","code":"SyncUpDetail"},{"text":", but we aren’t yet populating the","type":"text"},{"text":" ","type":"text"},{"code":"alert","type":"codeVoice"},{"text":" state to actually present the alert. This is done by constructing a value of","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"AlertState"},{"text":", which is a data type that represents all of the properties of an alert, such","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as its title, message and buttons. Its primary purpose is to be "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"-friendly so that"},{"text":" ","type":"text"},{"type":"text","text":"alerts can be tested."}]},{"media":null,"code":"EditingAndDeletingSyncUp-02-code-0006.swift","runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Populate the "},{"type":"codeVoice","code":"alert"},{"text":" property by constructing ","type":"text"},{"type":"codeVoice","code":"AlertState"},{"text":". This is done by providing three","type":"text"},{"text":" ","type":"text"},{"text":"trailing closures: one for the title, one for the buttons to show in the alert, and another","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"for the message in the alert."}]}],"caption":[]},{"inlineContent":[{"text":"That’s all it takes to create ","type":"text"},{"code":"AlertState","type":"codeVoice"},{"type":"text","text":". It contains all of the information for the view"},{"text":" ","type":"text"},{"type":"text","text":"to display the alert, which we will do in a moment."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"However, constructing "},{"type":"codeVoice","code":"AlertState"},{"type":"text","text":" values can be quite long, and so sometimes you may want"},{"type":"text","text":" "},{"type":"text","text":"to extract their creation to an extension on "},{"code":"AlertState","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Extract the alert state to an extension on "},{"code":"AlertState","type":"codeVoice"},{"type":"text","text":"."}]}],"caption":[],"media":null,"code":"EditingAndDeletingSyncUp-02-code-0007.swift","runtimePreview":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next we need to handle the new alert actions in the reducer."}]},{"caption":[],"runtimePreview":null,"code":"EditingAndDeletingSyncUp-02-code-0008.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Destructure the new ","type":"text"},{"type":"codeVoice","code":".alert"},{"text":" actions in the ","type":"text"},{"type":"codeVoice","code":"switch"},{"text":" statement of the core ","type":"text"},{"code":"Reduce","type":"codeVoice"},{"text":".","type":"text"}]}],"media":null,"type":"step"},{"type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"There is nothing to do in the "},{"code":".alert(.dismiss)","type":"codeVoice"},{"type":"text","text":" case because the "},{"type":"codeVoice","code":"ifLet"},{"type":"text","text":" operator will"},{"type":"text","text":" "},{"type":"text","text":"automatically clean up the state for you."}]}],"runtimePreview":null,"code":"EditingAndDeletingSyncUp-02-code-0009.swift","media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":".alert(.presented)","type":"codeVoice"},{"text":" case is more subtle, though. This action is sent when the user","type":"text"},{"text":" ","type":"text"},{"text":"confirms that they want to delete the sync-up, and so somehow we have to remove the ","type":"text"},{"code":"syncUp","type":"codeVoice"},{"text":" we","type":"text"},{"type":"text","text":" "},{"type":"text","text":"have in state from the collection of sync-ups that is in the "},{"type":"codeVoice","code":"SyncUpsList"},{"text":" feature.","type":"text"}]},{"inlineContent":[{"type":"text","text":"However, remember that in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps"},{"type":"text","text":" we showed how to persist the collection"},{"type":"text","text":" "},{"text":"of sync-ups using the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","overridingTitle":"@Shared","type":"reference","overridingTitleInlineContent":[{"code":"@Shared","type":"codeVoice"}]},{"type":"text","text":" property wrapper with the"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:decoder:encoder:)","type":"reference","isActive":true},{"type":"text","text":" persistence strategy. This"},{"type":"text","text":" "},{"type":"text","text":"gives the app "},{"type":"emphasis","inlineContent":[{"type":"text","text":"global"}]},{"text":" access to that state, and we can make edits to it from anywhere. We can","type":"text"},{"type":"text","text":" "},{"type":"text","text":"even do it directly inline in the "},{"code":".confirmButtonTapped","type":"codeVoice"},{"type":"text","text":" action."}],"type":"paragraph"},{"runtimePreview":null,"caption":[{"content":[{"inlineContent":[{"text":"This does not actually load data from disk. The data has already been loaded from","type":"text"},{"type":"text","text":" "},{"type":"text","text":"disk and cached in the "},{"overridingTitle":"@Shared","isActive":true,"overridingTitleInlineContent":[{"type":"codeVoice","code":"@Shared"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","type":"reference"},{"text":" reference. This is only giving us access","type":"text"},{"type":"text","text":" "},{"text":"to that reference.","type":"text"}],"type":"paragraph"}],"style":"note","name":"Note","type":"aside"}],"media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Use the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","type":"reference","isActive":true},{"text":" property wrapper with the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:decoder:encoder:)","isActive":true},{"type":"text","text":" persistence strategy to get"},{"type":"text","text":" "},{"type":"text","text":"a reference to the sync-ups loaded from disk."}]}],"code":"EditingAndDeletingSyncUp-02-code-0010.swift"},{"type":"step","code":"EditingAndDeletingSyncUp-02-code-0011.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Use the ","type":"text"},{"code":"id","type":"codeVoice"},{"type":"text","text":" of the sync-up held in the detail’s state to remove it from the "},{"type":"codeVoice","code":"syncUps"},{"type":"text","text":" "},{"type":"text","text":"collection persisted to disk."}]}],"caption":[],"media":null},{"inlineContent":[{"text":"That’s all it takes to delete the sync-up from the persisted array of sync-ups. It may trouble","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you that we are reaching out to a seemingly global "},{"type":"codeVoice","code":"syncUps"},{"type":"text","text":" variable and mutating it."},{"text":" ","type":"text"},{"text":"However, this is no different than making an API request to delete data on some external","type":"text"},{"text":" ","type":"text"},{"text":"server. Typically for that situation we use dependencies to make the API operation testable,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but we don’t need to do that with "},{"overridingTitle":"@Shared","type":"reference","overridingTitleInlineContent":[{"type":"codeVoice","code":"@Shared"}],"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared"},{"text":". It is testable by default.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If it truly bothers you to access the global "},{"code":"syncUps","type":"codeVoice"},{"type":"text","text":" state from within the detail feature,"},{"text":" ","type":"text"},{"text":"then you can instead send a “delegate” action from the detail that the parent feature","type":"text"},{"type":"text","text":" "},{"text":"intercepts and implements the deleting logic. That will allow the parent to handle deletion","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"while the child remains ignorant to those details."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There is one more addition we want to make to the deletion functionality before moving on."},{"text":" ","type":"text"},{"text":"When the user confirms deletion of the sync-up we should dismiss the detail view from being","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"presented, as it’s no longer relevant. After all, the sync-up is being deleted!"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This allows us to demonstrate another superpower of the Composable Architecture. The library"},{"text":" ","type":"text"},{"text":"comes with a powerful dependency called ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect","type":"reference"},{"text":" that allows a","type":"text"},{"type":"text","text":" "},{"text":"feature to dismiss itself if it is being presented, and if the feature was integrated into the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"parent using the library’s navigation tools. This can be powerful because it allows the child"},{"text":" ","type":"text"},{"type":"text","text":"features to encapsulate as much of their logic as possible without having to explicitly"},{"type":"text","text":" "},{"text":"communicate with the parent. It works similarly to SwiftUI’s ","type":"text"},{"type":"codeVoice","code":"@Environment(\\.dismiss)"},{"type":"text","text":", but it"},{"text":" ","type":"text"},{"type":"text","text":"is also distinct from it."}]},{"code":"EditingAndDeletingSyncUp-02-code-0012.swift","caption":[],"type":"step","media":null,"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a dependency on "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect","isActive":true,"type":"reference"},{"text":" to the ","type":"text"},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" feature"},{"text":" ","type":"text"},{"text":"by using the ","type":"text"},{"type":"codeVoice","code":"@Dependency"},{"type":"text","text":" property wrapper."}]}]},{"inlineContent":[{"type":"text","text":"To dismiss a child feature with the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect"},{"type":"text","text":" dependency you"},{"type":"text","text":" "},{"text":"just have to invoke it as if it’s a function: ","type":"text"},{"code":"dismiss()","type":"codeVoice"},{"type":"text","text":". However, the dismiss effect is an"},{"type":"text","text":" "},{"text":"asynchronous function, and therefore it cannot be invoked directly in the reducer. It can","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"only be invoked inside an effect, and so we must use the"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","isActive":true},{"text":" effect, which","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"gives us an asynchronous context to execute the work in, as well as a handle on"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Send","isActive":true,"type":"reference"},{"text":" for sending actions back into the system.","type":"text"}],"type":"paragraph"},{"code":"EditingAndDeletingSyncUp-02-code-0013.swift","type":"step","runtimePreview":null,"media":null,"caption":[],"content":[{"inlineContent":[{"type":"text","text":"Return a "},{"type":"codeVoice","code":".run"},{"type":"text","text":" effect to send the delegate action and invoke "},{"type":"codeVoice","code":"dismiss"},{"text":" in one single","type":"text"},{"type":"text","text":" "},{"text":"effect.","type":"text"}],"type":"paragraph"}]},{"inlineContent":[{"type":"text","text":"Next we need to integrate the alert into the view layer so that an alert actually shows when"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"alert"},{"text":" state becomes non-","type":"text"},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"runtimePreview":null,"code":"EditingAndDeletingSyncUp-02-code-0014.swift","content":[{"type":"paragraph","inlineContent":[{"text":"In the ","type":"text"},{"type":"codeVoice","code":"SyncUpDetailView"},{"type":"text","text":", go to the bottom and use the "},{"type":"codeVoice","code":"SwiftUI\/View\/alert(_:)"},{"text":" view","type":"text"},{"type":"text","text":" "},{"type":"text","text":"modifier that comes with the library. This will cause an alert to be presented when the"},{"type":"text","text":" "},{"type":"codeVoice","code":"alert"},{"type":"text","text":" state is populated."}]}],"type":"step","caption":[],"media":null},{"inlineContent":[{"text":"We have now finished the sync-up deletion functionality in the detail screen. Unfortunately we","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"can’t yet test deletion because we still have no way to navigate to the detail screen from the"},{"text":" ","type":"text"},{"text":"sync-ups list screen.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"But, before getting to that, let’s take a quick side excursion to clean up our domain"},{"type":"text","text":" "},{"type":"text","text":"modeling in this feature."}],"type":"paragraph"}],"anchor":"Deleting-the-sync-up","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Next we will implement the logic for deleting the sync-up from the detail screen. Because"},{"type":"text","text":" "},{"type":"text","text":"deletion is performed by a simple button, we want to protect from accidental deletions by"},{"type":"text","text":" "},{"type":"text","text":"asking the user for confirmation using an alert. This will give us an opportunity to explore"},{"type":"text","text":" "},{"text":"how one can show alerts in the Composable Architecture.","type":"text"}]}],"media":"EditingAndDeletingSyncUp-02-cover-480p.mov","mediaPosition":"trailing"}],"title":"Deleting the sync-up"},{"stepsSection":[{"runtimePreview":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"Create a whole new reducer nested inside the "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" called "},{"code":"Destination","type":"codeVoice"},{"type":"text","text":". This"},{"text":" ","type":"text"},{"type":"text","text":"reducer will represent all of the places one can navigate to from the detail screen, and"},{"type":"text","text":" "},{"type":"text","text":"that will give us a single piece of state to drive navigation rather than having multiple"},{"text":" ","type":"text"},{"type":"text","text":"optional values."}],"type":"paragraph"}],"caption":[{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"Further","type":"text"}]},{"text":", the ","type":"text"},{"code":"Destination","type":"codeVoice"},{"type":"text","text":" type will be an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enum"}]},{"text":". This is different than other reducers","type":"text"},{"type":"text","text":" "},{"type":"text","text":"we have encountered so far. The "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"reference","isActive":true,"overridingTitleInlineContent":[{"type":"codeVoice","code":"@Reducer"}],"overridingTitle":"@Reducer"},{"text":" has special behavior when","type":"text"},{"type":"text","text":" "},{"type":"text","text":"applied to enums that allows one to compose multiple reducers into a single package."}]},{"type":"aside","name":"Important","style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"As we have seen it is important for "},{"code":"State","type":"codeVoice"},{"type":"text","text":" types to be "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" for"},{"text":" ","type":"text"},{"type":"text","text":"testing, and so we are proactively making the "},{"type":"codeVoice","code":"State"},{"type":"text","text":" type generated for the "},{"code":"Destination","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"reducer equatable "},{"type":"emphasis","inlineContent":[{"text":"via","type":"text"}]},{"type":"text","text":" extension."}]}]},{"style":"note","content":[{"inlineContent":[{"type":"text","text":"We have collapsed the implementation of "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SyncUpDetailView"},{"type":"text","text":" in"},{"type":"text","text":" "},{"type":"text","text":"this code snippet."}],"type":"paragraph"}],"name":"Note","type":"aside"}],"media":null,"code":"EditingAndDeletingSyncUp-03-code-0001.swift"},{"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We will also move the "},{"type":"codeVoice","code":"Alert"},{"type":"text","text":" action enum from the "},{"type":"codeVoice","code":"SyncUpDetail.Action"},{"type":"text","text":" type to be nested"},{"text":" ","type":"text"},{"type":"text","text":"inside "},{"code":"Destination","type":"codeVoice"},{"type":"text","text":"."}]}],"type":"step","media":null,"code":"EditingAndDeletingSyncUp-03-code-0002.swift","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Add a case for each destination that can be navigated to from this feature. Each case will"},{"type":"text","text":" "},{"text":"hold onto the ","type":"text"},{"inlineContent":[{"type":"text","text":"reducer"}],"type":"emphasis"},{"type":"text","text":" type of the feature being navigated to, except for the "},{"code":"alert","type":"codeVoice"},{"text":" case.","type":"text"},{"type":"text","text":" "},{"text":"It will simply hold onto ","type":"text"},{"code":"AlertState","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That is all it takes to define a dedicated "},{"code":"Destination","type":"codeVoice"},{"type":"text","text":" reducer that encapsulates all of the"},{"type":"text","text":" "},{"text":"logic and behavior of the features that can be navigated to. You can right click on the","type":"text"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"overridingTitleInlineContent":[{"type":"codeVoice","code":"@Reducer"}],"overridingTitle":"@Reducer","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"text":" macro and select “Expand macro” in Xcode to see all of the code","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that is being written for you."}]},{"type":"paragraph","inlineContent":[{"text":"Next we need to integrate this new ","type":"text"},{"code":"Destination","type":"codeVoice"},{"text":" reducer into the main ","type":"text"},{"code":"SyncUpDetail","type":"codeVoice"},{"type":"text","text":" reducer."}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Replace the two independent pieces of optional state in "},{"code":"SyncUpDetail.State","type":"codeVoice"},{"text":" for a single","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"piece of optional "},{"type":"codeVoice","code":"Destination.State"},{"type":"text","text":"."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We now have just one single piece of optional state that determines if navigation is active"},{"type":"text","text":" "},{"type":"text","text":"and where we are being navigated to."}]},{"name":"Note","style":"note","content":[{"inlineContent":[{"type":"text","text":"There will be compiler errors after completing this step, but we will fix them in"},{"type":"text","text":" "},{"text":"upcoming steps.","type":"text"}],"type":"paragraph"}],"type":"aside"}],"media":null,"runtimePreview":null,"code":"EditingAndDeletingSyncUp-03-code-0003.swift","type":"step"},{"code":"EditingAndDeletingSyncUp-03-code-0004.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Replace the two action cases for the alert and edit sheet with a single case that holds on"},{"text":" ","type":"text"},{"text":"to a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},{"type":"text","text":" of "},{"type":"codeVoice","code":"Destination.Action"},{"text":".","type":"text"}]}],"media":null,"type":"step","caption":[]},{"caption":[{"type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Due to the expanded code from the "},{"isActive":true,"type":"reference","overridingTitle":"@Reducer","overridingTitleInlineContent":[{"type":"codeVoice","code":"@Reducer"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"text":" macro we don’t even","type":"text"},{"type":"text","text":" "},{"type":"text","text":"need to provide a trailing closure to "},{"type":"codeVoice","code":"ifLet"},{"text":". It can be inferred automatically.","type":"text"}]}],"style":"note"}],"code":"EditingAndDeletingSyncUp-03-code-0005.swift","type":"step","runtimePreview":null,"media":null,"content":[{"inlineContent":[{"text":"Replace the two ","type":"text"},{"type":"codeVoice","code":"ifLet"},{"type":"text","text":" operators at the bottom of "},{"type":"codeVoice","code":"SyncUpDetail"},{"text":" with a single one that","type":"text"},{"text":" ","type":"text"},{"text":"composes the ","type":"text"},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" reducer."}],"type":"paragraph"}]},{"inlineContent":[{"text":"That is all it takes to integrate the ","type":"text"},{"type":"codeVoice","code":"Destination"},{"text":" reducer into the ","type":"text"},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" reducer."},{"type":"text","text":" "},{"type":"text","text":"Next we have to update the core "},{"code":"Reduce","type":"codeVoice"},{"type":"text","text":" to handle the new destination state and actions"},{"type":"text","text":" "},{"text":"properly.","type":"text"}],"type":"paragraph"},{"type":"step","code":"EditingAndDeletingSyncUp-03-code-0006.swift","runtimePreview":null,"media":null,"content":[{"inlineContent":[{"type":"text","text":"Update the pattern matching for the alert to go through the "},{"code":".destination(.presented)","type":"codeVoice"},{"type":"text","text":""},{"text":" ","type":"text"},{"type":"text","text":"case."}],"type":"paragraph"}],"caption":[]},{"media":null,"caption":[],"code":"EditingAndDeletingSyncUp-03-code-0007.swift","type":"step","content":[{"inlineContent":[{"type":"text","text":"Return "},{"code":".none","type":"codeVoice"},{"type":"text","text":" for all other "},{"type":"codeVoice","code":".destination"},{"type":"text","text":" actions."}],"type":"paragraph"}],"runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Update where we "},{"code":"nil","type":"codeVoice"},{"text":" out ","type":"text"},{"type":"codeVoice","code":"editSyncUp"},{"type":"text","text":" state to instead "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" out the "},{"type":"codeVoice","code":"destination"},{"type":"text","text":" state."}]}],"media":null,"type":"step","code":"EditingAndDeletingSyncUp-03-code-0008.swift","runtimePreview":null,"caption":[]},{"type":"step","media":null,"code":"EditingAndDeletingSyncUp-03-code-0009.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Update where we populate the ","type":"text"},{"code":"alert","type":"codeVoice"},{"text":" state to instead point the ","type":"text"},{"type":"codeVoice","code":"destination"},{"type":"text","text":" state to the"},{"type":"text","text":" "},{"type":"codeVoice","code":".alert"},{"text":" case.","type":"text"}]}],"caption":[]},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Update the ","type":"text"},{"type":"codeVoice","code":".doneEditingButtonTapped"},{"text":" action by grabbing the edited sync-up from the ","type":"text"},{"code":".edit","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"case of the "},{"type":"codeVoice","code":"destination"},{"text":" enum.","type":"text"}]}],"type":"step","caption":[],"media":null,"code":"EditingAndDeletingSyncUp-03-code-0010.swift"},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Update where we previously populated the ","type":"text"},{"type":"codeVoice","code":"editSyncUp"},{"type":"text","text":" state to instead point the"},{"text":" ","type":"text"},{"code":"destination","type":"codeVoice"},{"type":"text","text":" enum to the "},{"type":"codeVoice","code":".edit"},{"text":" case with some ","type":"text"},{"code":"SyncUpForm","type":"codeVoice"},{"type":"text","text":" state."}]}],"type":"step","code":"EditingAndDeletingSyncUp-03-code-0011.swift","runtimePreview":null,"caption":[]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Update the extension on ","type":"text"},{"code":"AlertState","type":"codeVoice"},{"text":" to point to the ","type":"text"},{"code":"Destination","type":"codeVoice"},{"type":"text","text":"’s alert action."}]}],"type":"step","media":null,"runtimePreview":null,"code":"EditingAndDeletingSyncUp-03-code-0012.swift","caption":[]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That’s all it takes to fully integrate the "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" reducer into the "},{"code":"SyncUpDetail","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"reducer. Next we have to update the view so that we can drive the presentation of the alert"},{"type":"text","text":" "},{"type":"text","text":"and sheet from the destination enum."}]},{"code":"EditingAndDeletingSyncUp-03-code-0013.swift","media":null,"caption":[],"content":[{"inlineContent":[{"text":"Update the ","type":"text"},{"type":"codeVoice","code":"SwiftUI\/View\/alert(_:)"},{"text":" and ","type":"text"},{"type":"codeVoice","code":".sheet(item:)"},{"text":" modifiers at the bottom of the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"view so that the "},{"type":"codeVoice","code":"$store.scope"},{"type":"text","text":" further singles out the case for driving navigation."}],"type":"paragraph"}],"type":"step","runtimePreview":null},{"inlineContent":[{"text":"That is all it takes to finish the refactor to use an enum to drive navigation rather than","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"multiple optionals. Our domain is more concisely modeled, and we can know precisely when"},{"text":" ","type":"text"},{"text":"something is being presented. We merely have to check if ","type":"text"},{"code":"destination != nil","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"title":"More concise domain modeling","anchor":"More-concise-domain-modeling","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" works well enough right now, but there is something not ideal about how its"},{"type":"text","text":" "},{"text":"domain is modeled. We are representing the alert and edit sheet using two independent optional","type":"text"},{"type":"text","text":" "},{"text":"values, which allows for invalid states. We only expect that either the alert ","type":"text"},{"inlineContent":[{"text":"or","type":"text"}],"type":"emphasis"},{"type":"text","text":" sheet is"},{"text":" ","type":"text"},{"text":"shown at one time, but it is possible for both optionals to be non-","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" at the same time.","type":"text"}]},{"inlineContent":[{"type":"text","text":"And this problem gets bigger with the most destinations you can navigate to from a feature."},{"type":"text","text":" "},{"type":"text","text":"For example, if there are 4 possible destinations one can navigate to, then modeling that"},{"type":"text","text":" "},{"type":"text","text":"with optionals leads to 2^4 = 16 possible states, only 5 of which are valid. Either all"},{"type":"text","text":" "},{"type":"text","text":"optionals should be "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" or exactly one should be non-"},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This kind of inconcise domain modeling can leak complexity into your features, and luckily"},{"text":" ","type":"text"},{"text":"there is a better way.","type":"text"}]}],"mediaPosition":"trailing"}]}]},{"featuredEyebrow":"Tutorial","kind":"callToAction","action":{"overridingTitle":"Get started","overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail","isActive":true,"type":"reference"},"title":"Testing the sync-up detail","abstract":[{"text":"The ","type":"text"},{"code":"SyncUpDetail","type":"codeVoice"},{"type":"text","text":" feature has slowly become quite complex. It now handles two forms of"},{"text":" ","type":"text"},{"text":"navigation (an alert and sheet), it models navigation state with a single enum, and it","type":"text"},{"type":"text","text":" "},{"type":"text","text":"communicates with a parent feature via delegate actions. It’s about time we got some test"},{"type":"text","text":" "},{"text":"coverage on this feature so we can be sure it works as we expect, and so that we can make future","type":"text"},{"type":"text","text":" "},{"text":"changes with confidence.","type":"text"}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"role":"project","categoryPathComponent":"BuildingSyncUps","category":"Building SyncUps","title":"Editing and deleting a sync-up"},"variants":[{"paths":["\/tutorials\/composablearchitecture\/editinganddeletingsyncup"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps","paths":[["doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps","doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Sync-up-detail"]],"modules":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/What-is-SyncUps-","projects":[{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#A-tour-of-SyncUps","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#Create-the-SyncUps-project","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps"}]},{"projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#Domain-models","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#SyncUpsList-feature"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#A-handy-debugging-tool","kind":"task"}]},{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps#Writing-your-first-test"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Lists-of-sync-ups"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/New-sync-up-form","projects":[{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Sync-up-form-basics","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-an-approach"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-a-better-approach","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Removing-attendees","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Adding-attendees"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Presenting-the-sync-up-form","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-domains-together"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-views-together","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Adding-a-new-sync-up-to-the-list"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Adding-a-sync-up","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Non-exhaustive-testing"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Persisting-sync-ups-to-disk","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Persisting-data-to-disk","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Testing-persistence","kind":"task"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Sync-up-detail","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail#Create-the-sync-up-detail"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail"},{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Editing-the-sync-up"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Deleting-the-sync-up","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#More-concise-domain-modeling","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail#Testing-the-edit-flow"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Navigating-to-sync-up-detail","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-feature","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-view","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Navigating-to-the-detail"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#The-meeting-screen","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#Navigate-to-a-meeting"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation#Deleting-a-sync-up"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Record-meeting","projects":[{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Create-a-new-feature","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Navigating-to-the-record-meeting-feature","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature"},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#A-basic-timer","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Controlling-dependencies-early"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Ending-the-meeting-early","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Testing-the-timer","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer#Asking-for-speech-recognition-permission","kind":"task"}]}]}]},"kind":"project","references":{"EditingAndDeletingSyncUp-03-code-0001.swift":{"type":"file","syntax":"swift","fileType":"swift","fileName":"SyncUpDetail.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @Reducer","  enum Destination {","  }","  \/\/ ...","}","extension SyncUpDetail.Destination.State: Equatable {}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"identifier":"EditingAndDeletingSyncUp-03-code-0001.swift","highlights":[{"line":6},{"line":7},{"line":8},{"line":11}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#A-basic-timer":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#A-basic-timer","title":"A basic timer","url":"\/tutorials\/composablearchitecture\/implementingtimer#A-basic-timer","role":"pseudoSymbol","abstract":[{"text":"The first major piece of logic and behavior we will introduce to the record meeting feature is","type":"text"},{"type":"text","text":" "},{"text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and","type":"text"},{"text":" ","type":"text"},{"text":"we need to implement nuanced logic to figure out when to proceed to the next speaker.","type":"text"}],"type":"section","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingListOfSyncUps":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps","url":"\/tutorials\/composablearchitecture\/testinglistofsyncups","abstract":[{"text":"The SyncUpsList feature we have built so far isn’t very complex. In fact, it only has one","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"primary action, that of deleting sync-ups from its collection. However, it can be good practice"},{"type":"text","text":" "},{"type":"text","text":"to test new features as you add them, and in the future we will have much more complicated"},{"text":" ","type":"text"},{"type":"text","text":"behavior to test."}],"title":"Testing the list of sync-ups","type":"topic","role":"project","kind":"project","estimatedTime":"5min"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction":{"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"PresentationAction"}],"abstract":[{"type":"text","text":"A wrapper type for actions that can be presented."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"PresentationAction"}],"type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/presentationaction","title":"PresentationAction"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp#Editing-the-sync-up":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Editing-the-sync-up","url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup#Editing-the-sync-up","title":"Editing the sync-up","role":"pseudoSymbol","abstract":[{"text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and","type":"text"},{"type":"text","text":" "},{"text":"deleting the sync-up. This will force us to face a number of common problems in app development","type":"text"},{"text":" ","type":"text"},{"text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns.","type":"text"}],"type":"section","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/WhatIsSyncUps":{"estimatedTime":"5min","url":"\/tutorials\/composablearchitecture\/whatissyncups","kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps","abstract":[{"type":"text","text":"Let’s start with a tour of the application we will be building. It’s called SyncUps, and it’s a"},{"text":" ","type":"text"},{"type":"text","text":"recreation of Apple’s Scrumdinger demo application."}],"type":"topic","title":"What is SyncUps?","role":"project"},"EditingAndDeletingSyncUp-02-code-0007.swift":{"highlights":[{"line":37},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75},{"line":76}],"fileType":"swift","syntax":"swift","type":"file","fileName":"SyncUpDetail.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case alert(PresentationAction<Alert>)","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert:","        return .none","        ","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        state.alert = .deleteSyncUp","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","    .ifLet(\\.$alert, action: \\.alert) ","  }","}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"identifier":"EditingAndDeletingSyncUp-02-code-0007.swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationState":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"PresentationState","kind":"identifier"}],"abstract":[{"type":"text","text":"A property wrapper for state that can be presented."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","kind":"symbol","navigatorTitle":[{"text":"PresentationState","kind":"identifier"}],"type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/presentationstate","title":"PresentationState"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm","title":"Presenting the sync-up form","url":"\/tutorials\/composablearchitecture\/presentingsyncupform","role":"project","abstract":[{"text":"We now have two features built: the sync-ups list and the sync-up form. These features do not","type":"text"},{"type":"text","text":" "},{"text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to","type":"text"},{"text":" ","type":"text"},{"text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then","type":"text"},{"type":"text","text":" "},{"type":"text","text":"add that sync-up to the root list."}],"estimatedTime":"10min","type":"topic","kind":"project"},"EditingAndDeletingSyncUp-01-code-0006.swift":{"type":"file","syntax":"swift","fileType":"swift","fileName":"SyncUpDetail.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  \/\/ ...","}","","struct SyncUpDetailView: View {","  @Bindable var store: StoreOf<SyncUpDetail>","","  var body: some View {","    Form {","      Section {","        NavigationLink {","        } label: {","          Label(\"Start Meeting\", systemImage: \"timer\")","            .font(.headline)","            .foregroundColor(.accentColor)","        }","        HStack {","          Label(\"Length\", systemImage: \"clock\")","          Spacer()","          Text(store.syncUp.duration.formatted(.units()))","        }","","        HStack {","          Label(\"Theme\", systemImage: \"paintpalette\")","          Spacer()","          Text(store.syncUp.theme.name)","            .padding(4)","            .foregroundColor(store.syncUp.theme.accentColor)","            .background(store.syncUp.theme.mainColor)","            .cornerRadius(4)","        }","      } header: {","        Text(\"Sync-up Info\")","      }","","      if !store.syncUp.meetings.isEmpty {","        Section {","          ForEach(store.syncUp.meetings) { meeting in","            Button {","            } label: {","              HStack {","                Image(systemName: \"calendar\")","                Text(meeting.date, style: .date)","                Text(meeting.date, style: .time)","              }","            }","          }","        } header: {","          Text(\"Past meetings\")","        }","      }","","      Section {","        ForEach(store.syncUp.attendees) { attendee in","          Label(attendee.name, systemImage: \"person\")","        }","      } header: {","        Text(\"Attendees\")","      }","","      Section {","        Button(\"Delete\") {","          store.send(.deleteButtonTapped)","        }","        .foregroundColor(.red)","        .frame(maxWidth: .infinity)","      }","    }","    .navigationTitle(Text(store.syncUp.title))","    .toolbar {","      Button(\"Edit\") {","        store.send(.editButtonTapped)","      }","    }","    .sheet(item: $store.scope(state: \\.editSyncUp, action: \\.editSyncUp)) { editSyncUpStore in","      NavigationStack {","        SyncUpFormView(store: editSyncUpStore)","      }","    }","  }","}","","#Preview {","  NavigationStack {","    SyncUpDetailView(","      store: Store(","        initialState: SyncUpDetail.State(","          syncUp: Shared(.mock)","        )","      ) {","        SyncUpDetail()","      }","    )","  }","}"],"identifier":"EditingAndDeletingSyncUp-01-code-0006.swift","highlights":[{"line":79},{"line":80},{"line":81},{"line":82},{"line":83}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm#Integrating-the-feature-domains-together":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-domains-together","url":"\/tutorials\/composablearchitecture\/presentingsyncupform#Integrating-the-feature-domains-together","abstract":[{"text":"We now have two features built: the sync-ups list and the sync-up form. These features do not","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to"},{"type":"text","text":" "},{"type":"text","text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then"},{"text":" ","type":"text"},{"type":"text","text":"add that sync-up to the root list."}],"role":"pseudoSymbol","type":"section","title":"Integrating the feature domains together","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp#Deleting-the-sync-up":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Deleting-the-sync-up","title":"Deleting the sync-up","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup#Deleting-the-sync-up","abstract":[{"type":"text","text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and"},{"type":"text","text":" "},{"text":"deleting the sync-up. This will force us to face a number of common problems in app development","type":"text"},{"type":"text","text":" "},{"text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns.","type":"text"}],"role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PersistingSyncUps#Testing-persistence":{"abstract":[{"type":"text","text":"Now that we have the ability to add and remove sync-ups from the application, let’s add some"},{"type":"text","text":" "},{"text":"persistence. This will involve using the “shared state” tools from the library, such as","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","overridingTitleInlineContent":[{"code":"@Shared","type":"codeVoice"}],"isActive":true,"overridingTitle":"@Shared","type":"reference"},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:decoder:encoder:)","isActive":true},{"type":"text","text":"."}],"title":"Testing persistence","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/persistingsyncups#Testing-persistence","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Testing-persistence"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PersistingSyncUps":{"abstract":[{"text":"Now that we have the ability to add and remove sync-ups from the application, let’s add some","type":"text"},{"type":"text","text":" "},{"text":"persistence. This will involve using the “shared state” tools from the library, such as","type":"text"},{"text":" ","type":"text"},{"overridingTitle":"@Shared","overridingTitleInlineContent":[{"code":"@Shared","type":"codeVoice"}],"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","isActive":true},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:decoder:encoder:)","isActive":true},{"text":".","type":"text"}],"url":"\/tutorials\/composablearchitecture\/persistingsyncups","role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps","kind":"project","title":"Persisting sync-ups","type":"topic","estimatedTime":"5min"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation#Navigating-to-the-detail":{"abstract":[{"type":"text","text":"We will wrap the application built so far in a "},{"type":"codeVoice","code":"NavigationStack"},{"text":" so that we can navigate to","type":"text"},{"type":"text","text":" "},{"text":"the detail screen. To do this we will create a new root-level feature that will be responsible","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"for implementing the logic of the stack and integrating all of the features together."}],"type":"section","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation#Navigating-to-the-detail","title":"Navigating to the detail","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Navigating-to-the-detail","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingSpeechRecognizer#Asking-for-speech-recognition-permission":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer#Asking-for-speech-recognition-permission","title":"Asking for speech recognition permission","url":"\/tutorials\/composablearchitecture\/implementingspeechrecognizer#Asking-for-speech-recognition-permission","role":"pseudoSymbol","abstract":[{"text":"We have just one feature left to implement, and it’s one of the most complicated ones. We need","type":"text"},{"type":"text","text":" "},{"text":"to use Apple’s ","type":"text"},{"code":"SFSpeechRecognizer","type":"codeVoice"},{"text":" API to ask the user for permission to transcribe their","type":"text"},{"type":"text","text":" "},{"type":"text","text":"audio, and then start a speech recognition task to live transcribe the meeting while it is"},{"text":" ","type":"text"},{"type":"text","text":"in progress."}],"type":"section","kind":"section"},"EditingAndDeletingSyncUp-01-code-0005.swift":{"highlights":[{"line":10}],"fileType":"swift","syntax":"swift","type":"file","fileName":"SyncUpDetail.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  \/\/ ...","}","","struct SyncUpDetailView: View {","  @Bindable var store: StoreOf<SyncUpDetail>","","  var body: some View {","    Form {","      Section {","        NavigationLink {","        } label: {","          Label(\"Start Meeting\", systemImage: \"timer\")","            .font(.headline)","            .foregroundColor(.accentColor)","        }","        HStack {","          Label(\"Length\", systemImage: \"clock\")","          Spacer()","          Text(store.syncUp.duration.formatted(.units()))","        }","","        HStack {","          Label(\"Theme\", systemImage: \"paintpalette\")","          Spacer()","          Text(store.syncUp.theme.name)","            .padding(4)","            .foregroundColor(store.syncUp.theme.accentColor)","            .background(store.syncUp.theme.mainColor)","            .cornerRadius(4)","        }","      } header: {","        Text(\"Sync-up Info\")","      }","","      if !store.syncUp.meetings.isEmpty {","        Section {","          ForEach(store.syncUp.meetings) { meeting in","            Button {","            } label: {","              HStack {","                Image(systemName: \"calendar\")","                Text(meeting.date, style: .date)","                Text(meeting.date, style: .time)","              }","            }","          }","        } header: {","          Text(\"Past meetings\")","        }","      }","","      Section {","        ForEach(store.syncUp.attendees) { attendee in","          Label(attendee.name, systemImage: \"person\")","        }","      } header: {","        Text(\"Attendees\")","      }","","      Section {","        Button(\"Delete\") {","          store.send(.deleteButtonTapped)","        }","        .foregroundColor(.red)","        .frame(maxWidth: .infinity)","      }","    }","    .navigationTitle(Text(store.syncUp.title))","    .toolbar {","      Button(\"Edit\") {","        store.send(.editButtonTapped)","      }","    }","  }","}","","#Preview {","  NavigationStack {","    SyncUpDetailView(","      store: Store(","        initialState: SyncUpDetail.State(","          syncUp: Shared(.mock)","        )","      ) {","        SyncUpDetail()","      }","    )","  }","}"],"identifier":"EditingAndDeletingSyncUp-01-code-0005.swift"},"EditingAndDeletingSyncUp-02-code-0013.swift":{"type":"file","syntax":"swift","fileType":"swift","fileName":"SyncUpDetail.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case alert(PresentationAction<Alert>)","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  @Dependency(\\.dismiss) var dismiss","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert(.presented(.confirmButtonTapped)):","        @Shared(.fileStorage(.syncUps)) var syncUps: IdentifiedArrayOf<SyncUp> = []","        syncUps.remove(id: state.syncUp.id)","        return .run { _ in await dismiss() }","","      case .alert(.dismiss):","        return .none","","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        state.alert = .deleteSyncUp","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","    .ifLet(\\.$alert, action: \\.alert) ","  }","}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}",""],"identifier":"EditingAndDeletingSyncUp-02-code-0013.swift","highlights":[{"line":34}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp#More-concise-domain-modeling":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#More-concise-domain-modeling","url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup#More-concise-domain-modeling","abstract":[{"type":"text","text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and"},{"text":" ","type":"text"},{"text":"deleting the sync-up. This will force us to face a number of common problems in app development","type":"text"},{"type":"text","text":" "},{"type":"text","text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns."}],"role":"pseudoSymbol","type":"section","title":"More concise domain modeling","kind":"section"},"https://swiftpackageindex.com/pointfreeco/swiftui-navigation/1.2.0/documentation/swiftuinavigationcore/alertstate":{"titleInlineContent":[{"type":"codeVoice","code":"AlertState"}],"url":"https:\/\/swiftpackageindex.com\/pointfreeco\/swiftui-navigation\/1.2.0\/documentation\/swiftuinavigationcore\/alertstate","type":"link","title":"AlertState","identifier":"https:\/\/swiftpackageindex.com\/pointfreeco\/swiftui-navigation\/1.2.0\/documentation\/swiftuinavigationcore\/alertstate"},"EditingAndDeletingSyncUp-01-code-0011.swift":{"type":"file","syntax":"swift","fileType":"swift","fileName":"SyncUpDetail.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"identifier":"EditingAndDeletingSyncUp-01-code-0011.swift","highlights":[{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm#Sync-up-form-basics":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Sync-up-form-basics","url":"\/tutorials\/composablearchitecture\/syncupform#Sync-up-form-basics","abstract":[{"text":"We will create a new feature with the Composable Architecture that is capable of editing the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the"},{"text":" ","type":"text"},{"type":"text","text":"feature to make things a little more interesting."}],"role":"pseudoSymbol","type":"section","title":"Sync-up form basics","kind":"section"},"EditingAndDeletingSyncUp-03-code-0010.swift":{"highlights":[{"line":40},{"line":53},{"line":56}],"fileType":"swift","syntax":"swift","type":"file","fileName":"SyncUpDetail.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @Reducer","  enum Destination {","    case alert(AlertState<Alert>)","    case edit(SyncUpForm)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  @ObservableState","  struct State: Equatable {","    @Presents var destination: Destination.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case cancelEditButtonTapped","    case deleteButtonTapped","    case destination(PresentationAction<Destination.Action>)","    case doneEditingButtonTapped","    case editButtonTapped","  }","","  @Dependency(\\.dismiss) var dismiss","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      \/\/ case .alert(.presented(.confirmButtonTapped)):","      case .destination(.presented(.alert(.confirmButtonTapped))):","        @Shared(.fileStorage(.syncUps)) var syncUps: IdentifiedArrayOf<SyncUp> = []","        syncUps.remove(id: state.syncUp.id)","        return .run { _ in await dismiss() }","","      case .destination:","        return .none","","      case .cancelEditButtonTapped:","        state.destination = nil","        return .none","","      case .deleteButtonTapped:","        state.destination = .alert(.deleteSyncUp)","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.destination?.edit?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.destination = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination)","  }","}","extension SyncUpDetail.Destination.State: Equatable {}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"identifier":"EditingAndDeletingSyncUp-03-code-0010.swift"},"EditingAndDeletingSyncUp-01-code-0001.swift":{"fileName":"SyncUpDetail.swift","fileType":"swift","syntax":"swift","identifier":"EditingAndDeletingSyncUp-01-code-0001.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case deleteButtonTapped","    case editButtonTapped","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .deleteButtonTapped:","        return .none","","      case .editButtonTapped:","        return .none","      }","    }","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"highlights":[{"line":8}],"type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingSpeechRecognizer":{"abstract":[{"text":"We have just one feature left to implement, and it’s one of the most complicated ones. We need","type":"text"},{"type":"text","text":" "},{"text":"to use Apple’s ","type":"text"},{"code":"SFSpeechRecognizer","type":"codeVoice"},{"text":" API to ask the user for permission to transcribe their","type":"text"},{"type":"text","text":" "},{"type":"text","text":"audio, and then start a speech recognition task to live transcribe the meeting while it is"},{"text":" ","type":"text"},{"type":"text","text":"in progress."}],"url":"\/tutorials\/composablearchitecture\/implementingspeechrecognizer","role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer","kind":"project","title":"Adding a speech recognizer","type":"topic","estimatedTime":"10min"},"EditingAndDeletingSyncUp-03-code-0013.swift":{"highlights":[{"line":78},{"line":79},{"line":80},{"line":81},{"line":82}],"fileType":"swift","syntax":"swift","type":"file","fileName":"SyncUpDetail.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  \/\/ ...","}","","struct SyncUpDetailView: View {","  @Bindable var store: StoreOf<SyncUpDetail>","","  var body: some View {","    Form {","      Section {","        NavigationLink {","        } label: {","          Label(\"Start Meeting\", systemImage: \"timer\")","            .font(.headline)","            .foregroundColor(.accentColor)","        }","        HStack {","          Label(\"Length\", systemImage: \"clock\")","          Spacer()","          Text(store.syncUp.duration.formatted(.units()))","        }","","        HStack {","          Label(\"Theme\", systemImage: \"paintpalette\")","          Spacer()","          Text(store.syncUp.theme.name)","            .padding(4)","            .foregroundColor(store.syncUp.theme.accentColor)","            .background(store.syncUp.theme.mainColor)","            .cornerRadius(4)","        }","      } header: {","        Text(\"Sync-up Info\")","      }","","      if !store.syncUp.meetings.isEmpty {","        Section {","          ForEach(store.syncUp.meetings) { meeting in","            Button {","            } label: {","              HStack {","                Image(systemName: \"calendar\")","                Text(meeting.date, style: .date)","                Text(meeting.date, style: .time)","              }","            }","          }","        } header: {","          Text(\"Past meetings\")","        }","      }","","      Section {","        ForEach(store.syncUp.attendees) { attendee in","          Label(attendee.name, systemImage: \"person\")","        }","      } header: {","        Text(\"Attendees\")","      }","","      Section {","        Button(\"Delete\") {","          store.send(.deleteButtonTapped)","        }","        .foregroundColor(.red)","        .frame(maxWidth: .infinity)","      }","    }","    .toolbar {","      Button(\"Edit\") {","        store.send(.editButtonTapped)","      }","    }","    .navigationTitle(Text(store.syncUp.title))","    .alert($store.scope(state: \\.destination?.alert, action: \\.destination.alert))","    .sheet(","      item: $store.scope(state: \\.destination?.edit, action: \\.destination.edit)","    ) { editSyncUpStore in","      NavigationStack {","        SyncUpFormView(store: editSyncUpStore)","          .navigationTitle(store.syncUp.title)","          .toolbar {","            ToolbarItem(placement: .cancellationAction) {","              Button(\"Cancel\") {","                store.send(.cancelEditButtonTapped)","              }","            }","            ToolbarItem(placement: .confirmationAction) {","              Button(\"Done\") {","                store.send(.doneEditingButtonTapped)","              }","            }","          }","      }","    }","  }","}","","#Preview {","  NavigationStack {","    SyncUpDetailView(","      store: Store(","        initialState: SyncUpDetail.State(","          syncUp: Shared(.mock)","        )","      ) {","        SyncUpDetail()","      }","    )","  }","}"],"identifier":"EditingAndDeletingSyncUp-03-code-0013.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingListOfSyncUps#Writing-your-first-test":{"abstract":[{"text":"The SyncUpsList feature we have built so far isn’t very complex. In fact, it only has one","type":"text"},{"type":"text","text":" "},{"text":"primary action, that of deleting sync-ups from its collection. However, it can be good practice","type":"text"},{"text":" ","type":"text"},{"text":"to test new features as you add them, and in the future we will have much more complicated","type":"text"},{"type":"text","text":" "},{"type":"text","text":"behavior to test."}],"url":"\/tutorials\/composablearchitecture\/testinglistofsyncups#Writing-your-first-test","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps#Writing-your-first-test","title":"Writing your first test","type":"section"},"EditingAndDeletingSyncUp-01-code-0010.swift":{"type":"file","syntax":"swift","fileType":"swift","fileName":"SyncUpDetail.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"identifier":"EditingAndDeletingSyncUp-01-code-0010.swift","highlights":[{"line":23},{"line":24},{"line":25},{"line":26}]},"EditingAndDeletingSyncUp-02-code-0011.swift":{"highlights":[{"line":31},{"line":32},{"line":85}],"fileType":"swift","syntax":"swift","type":"file","fileName":"SyncUpDetail.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case alert(PresentationAction<Alert>)","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert(.presented(.confirmButtonTapped)):","        @Shared(.fileStorage(.syncUps)) var syncUps: IdentifiedArrayOf<SyncUp> = []","        syncUps.remove(id: state.syncUp.id)","        return .none","","      case .alert(.dismiss):","        return .none","","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        state.alert = .deleteSyncUp","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","    .ifLet(\\.$alert, action: \\.alert) ","  }","}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}",""],"identifier":"EditingAndDeletingSyncUp-02-code-0011.swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared":{"title":"Shared","abstract":[{"type":"text","text":"A property wrapper type that shares a value with multiple parts of an application."}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","type":"topic","navigatorTitle":[{"text":"Shared","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Shared","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/shared"},"EditingAndDeletingSyncUp-03-code-0003.swift":{"type":"file","syntax":"swift","fileType":"swift","fileName":"SyncUpDetail.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @Reducer","  enum Destination {","    case alert(AlertState<Alert>)","    case edit(SyncUpForm)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  @ObservableState","  struct State: Equatable {","    \/\/ @Presents var alert: AlertState<Action.Alert>?","    \/\/ @Presents var editSyncUp: SyncUpForm.State?","    @Presents var destination: Destination.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case alert(PresentationAction<Alert>)","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  @Dependency(\\.dismiss) var dismiss","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert(.presented(.confirmButtonTapped)):","        @Shared(.fileStorage(.syncUps)) var syncUps: IdentifiedArrayOf<SyncUp> = []","        syncUps.remove(id: state.syncUp.id)","        return .run { _ in await dismiss() }","","      case .alert(.dismiss):","        return .none","","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .delegate:","        return .none","","      case .deleteButtonTapped:","        state.alert = .deleteSyncUp","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","    .ifLet(\\.$alert, action: \\.alert) ","  }","}","extension SyncUpDetail.Destination.State: Equatable {}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"identifier":"EditingAndDeletingSyncUp-03-code-0003.swift","highlights":[{"line":18},{"line":19},{"line":20}]},"EditingAndDeletingSyncUp-02-code-0012.swift":{"highlights":[{"line":26},{"line":27}],"fileType":"swift","syntax":"swift","type":"file","fileName":"SyncUpDetail.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case alert(PresentationAction<Alert>)","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  @Dependency(\\.dismiss) var dismiss","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert(.presented(.confirmButtonTapped)):","        @Shared(.fileStorage(.syncUps)) var syncUps: IdentifiedArrayOf<SyncUp> = []","        syncUps.remove(id: state.syncUp.id)","        return .none","","      case .alert(.dismiss):","        return .none","","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        state.alert = .deleteSyncUp","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","    .ifLet(\\.$alert, action: \\.alert) ","  }","}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}",""],"identifier":"EditingAndDeletingSyncUp-02-code-0012.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpForm":{"url":"\/tutorials\/composablearchitecture\/testingsyncupform","role":"project","title":"Testing the sync-up form","estimatedTime":"10min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm","type":"topic","abstract":[{"type":"text","text":"We now have a moderately complex feature for editing the details of a sync-up, the "},{"code":"SyncUpForm","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"reducer. Let’s get some test coverage on the feature, and doing so will force us to come"},{"type":"text","text":" "},{"text":"face-to-face with dependencies for the first time in this tutorial.","type":"text"}],"kind":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm#Adding-a-new-sync-up-to-the-list":{"abstract":[{"text":"We now have two features built: the sync-ups list and the sync-up form. These features do not","type":"text"},{"type":"text","text":" "},{"text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to","type":"text"},{"text":" ","type":"text"},{"text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then","type":"text"},{"type":"text","text":" "},{"type":"text","text":"add that sync-up to the root list."}],"url":"\/tutorials\/composablearchitecture\/presentingsyncupform#Adding-a-new-sync-up-to-the-list","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Adding-a-new-sync-up-to-the-list","title":"Adding a new sync-up to the list","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation":{"abstract":[{"text":"We will wrap the application built so far in a ","type":"text"},{"type":"codeVoice","code":"NavigationStack"},{"text":" so that we can navigate to","type":"text"},{"text":" ","type":"text"},{"text":"the detail screen. To do this we will create a new root-level feature that will be responsible","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for implementing the logic of the stack and integrating all of the features together."}],"url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation","role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation","kind":"project","title":"Navigating to a sync-up detail","type":"topic","estimatedTime":"20min"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer","url":"\/tutorials\/composablearchitecture\/implementingtimer","title":"Adding a meeting timer","role":"project","abstract":[{"text":"The first major piece of logic and behavior we will introduce to the record meeting feature is","type":"text"},{"type":"text","text":" "},{"text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and","type":"text"},{"text":" ","type":"text"},{"text":"we need to implement nuanced logic to figure out when to proceed to the next speaker.","type":"text"}],"estimatedTime":"25min","type":"topic","kind":"project"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/What-is-SyncUps-":{"type":"topic","title":"What is SyncUps?","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/What-is-SyncUps-","abstract":[],"url":"\/tutorials\/buildingsyncups\/what-is-syncups-","kind":"article","role":"article"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#Ending-the-meeting-early":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Ending-the-meeting-early","url":"\/tutorials\/composablearchitecture\/implementingtimer#Ending-the-meeting-early","abstract":[{"type":"text","text":"The first major piece of logic and behavior we will introduce to the record meeting feature is"},{"type":"text","text":" "},{"type":"text","text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and"},{"text":" ","type":"text"},{"text":"we need to implement nuanced logic to figure out when to proceed to the next speaker.","type":"text"}],"title":"Ending the meeting early","type":"section","role":"pseudoSymbol","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/MeetingNavigation#Navigate-to-a-meeting":{"title":"Navigate to a meeting","abstract":[{"type":"text","text":"Now that we have a navigation stack in place we can start navigating to other features in the"},{"text":" ","type":"text"},{"type":"text","text":"application. The simplest is the meeting screen, which allows you to see the details of a"},{"text":" ","type":"text"},{"type":"text","text":"previous recorded meeting."}],"url":"\/tutorials\/composablearchitecture\/meetingnavigation#Navigate-to-a-meeting","type":"section","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#Navigate-to-a-meeting","role":"pseudoSymbol"},"EditingAndDeletingSyncUp-01-code-0008.swift":{"type":"file","syntax":"swift","fileType":"swift","fileName":"SyncUpDetail.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  \/\/ ...","}","","struct SyncUpDetailView: View {","  @Bindable var store: StoreOf<SyncUpDetail>","","  var body: some View {","    Form {","      Section {","        NavigationLink {","        } label: {","          Label(\"Start Meeting\", systemImage: \"timer\")","            .font(.headline)","            .foregroundColor(.accentColor)","        }","        HStack {","          Label(\"Length\", systemImage: \"clock\")","          Spacer()","          Text(store.syncUp.duration.formatted(.units()))","        }","","        HStack {","          Label(\"Theme\", systemImage: \"paintpalette\")","          Spacer()","          Text(store.syncUp.theme.name)","            .padding(4)","            .foregroundColor(store.syncUp.theme.accentColor)","            .background(store.syncUp.theme.mainColor)","            .cornerRadius(4)","        }","      } header: {","        Text(\"Sync-up Info\")","      }","","      if !store.syncUp.meetings.isEmpty {","        Section {","          ForEach(store.syncUp.meetings) { meeting in","            Button {","            } label: {","              HStack {","                Image(systemName: \"calendar\")","                Text(meeting.date, style: .date)","                Text(meeting.date, style: .time)","              }","            }","          }","        } header: {","          Text(\"Past meetings\")","        }","      }","","      Section {","        ForEach(store.syncUp.attendees) { attendee in","          Label(attendee.name, systemImage: \"person\")","        }","      } header: {","        Text(\"Attendees\")","      }","","      Section {","        Button(\"Delete\") {","          store.send(.deleteButtonTapped)","        }","        .foregroundColor(.red)","        .frame(maxWidth: .infinity)","      }","    }","    .navigationTitle(Text(store.syncUp.title))","    .toolbar {","      Button(\"Edit\") {","        store.send(.editButtonTapped)","      }","    }","    .sheet(item: $store.scope(state: \\.editSyncUp, action: \\.editSyncUp)) { editSyncUpStore in","      NavigationStack {","        SyncUpFormView(store: editSyncUpStore)","          .navigationTitle(store.syncUp.title)","          .toolbar {","            ToolbarItem(placement: .cancellationAction) {","              Button(\"Cancel\") {","                store.send(.cancelEditButtonTapped)","              }","            }","            ToolbarItem(placement: .confirmationAction) {","              Button(\"Done\") {","                store.send(.doneEditingButtonTapped)","              }","            }","          }","      }","  }","}","","#Preview {","  NavigationStack {","    SyncUpDetailView(","      store: Store(","        initialState: SyncUpDetail.State(","          syncUp: Shared(.mock)","        )","      ) {","        SyncUpDetail()","      }","    )","  }","}"],"identifier":"EditingAndDeletingSyncUp-01-code-0008.swift","highlights":[{"line":86},{"line":91}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps#Domain-models":{"type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#Domain-models","kind":"section","abstract":[{"type":"text","text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the"},{"type":"text","text":" "},{"text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the app evolves."}],"role":"pseudoSymbol","title":"Domain models","url":"\/tutorials\/composablearchitecture\/listsofsyncups#Domain-models"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/New-sync-up-form":{"url":"\/tutorials\/buildingsyncups\/new-sync-up-form","role":"article","title":"New sync-up form","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/New-sync-up-form","type":"topic","abstract":[],"kind":"article"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpForm#Adding-attendees":{"url":"\/tutorials\/composablearchitecture\/testingsyncupform#Adding-attendees","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Adding-attendees","abstract":[{"type":"text","text":"We now have a moderately complex feature for editing the details of a sync-up, the "},{"code":"SyncUpForm","type":"codeVoice"},{"type":"text","text":" "},{"text":"reducer. Let’s get some test coverage on the feature, and doing so will force us to come","type":"text"},{"type":"text","text":" "},{"text":"face-to-face with dependencies for the first time in this tutorial.","type":"text"}],"type":"section","title":"Adding attendees","role":"pseudoSymbol"},"EditingAndDeletingSyncUp-02-code-0001.swift":{"highlights":[{"line":18},{"line":19},{"line":20},{"line":21}],"fileType":"swift","syntax":"swift","type":"file","fileName":"SyncUpDetail.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"identifier":"EditingAndDeletingSyncUp-02-code-0001.swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PersistenceReaderKey/fileStorage(_:decoder:encoder:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:decoder:encoder:)","title":"fileStorage(_:decoder:encoder:)","url":"\/documentation\/composablearchitecture\/persistencereaderkey\/filestorage(_:decoder:encoder:)","role":"symbol","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"fileStorage","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"text":"URL","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation3URLV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"decoder"},{"kind":"text","text":": "},{"text":"JSONDecoder","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation11JSONDecoderC"},{"kind":"text","text":", "},{"text":"encoder","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"JSONEncoder","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation11JSONEncoderC"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"abstract":[{"text":"Creates a persistence key that can read and write to a ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" value in the file system."}]},"EditingAndDeletingSyncUp-02-code-0002.swift":{"type":"file","syntax":"swift","fileType":"swift","fileName":"SyncUpDetail.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"identifier":"EditingAndDeletingSyncUp-02-code-0002.swift","highlights":[{"line":8}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps#A-handy-debugging-tool":{"abstract":[{"text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the","type":"text"},{"type":"text","text":" "},{"text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as","type":"text"},{"text":" ","type":"text"},{"text":"the app evolves.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/listsofsyncups#A-handy-debugging-tool","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#A-handy-debugging-tool","title":"A handy debugging tool","type":"section"},"EditingAndDeletingSyncUp-02-code-0014.swift":{"highlights":[{"line":79}],"fileType":"swift","syntax":"swift","type":"file","fileName":"SyncUpDetail.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  \/\/ ...","}","","struct SyncUpDetailView: View {","  @Bindable var store: StoreOf<SyncUpDetail>","","  var body: some View {","    Form {","      Section {","        NavigationLink {","        } label: {","          Label(\"Start Meeting\", systemImage: \"timer\")","            .font(.headline)","            .foregroundColor(.accentColor)","        }","        HStack {","          Label(\"Length\", systemImage: \"clock\")","          Spacer()","          Text(store.syncUp.duration.formatted(.units()))","        }","","        HStack {","          Label(\"Theme\", systemImage: \"paintpalette\")","          Spacer()","          Text(store.syncUp.theme.name)","            .padding(4)","            .foregroundColor(store.syncUp.theme.accentColor)","            .background(store.syncUp.theme.mainColor)","            .cornerRadius(4)","        }","      } header: {","        Text(\"Sync-up Info\")","      }","","      if !store.syncUp.meetings.isEmpty {","        Section {","          ForEach(store.syncUp.meetings) { meeting in","            Button {","            } label: {","              HStack {","                Image(systemName: \"calendar\")","                Text(meeting.date, style: .date)","                Text(meeting.date, style: .time)","              }","            }","          }","        } header: {","          Text(\"Past meetings\")","        }","      }","","      Section {","        ForEach(store.syncUp.attendees) { attendee in","          Label(attendee.name, systemImage: \"person\")","        }","      } header: {","        Text(\"Attendees\")","      }","","      Section {","        Button(\"Delete\") {","          store.send(.deleteButtonTapped)","        }","        .foregroundColor(.red)","        .frame(maxWidth: .infinity)","      }","    }","    .navigationTitle(Text(store.syncUp.title))","    .toolbar {","      Button(\"Edit\") {","        store.send(.editButtonTapped)","      }","    }","    .alert($store.scope(state: \\.alert, action: \\.alert))","    .sheet(item: $store.scope(state: \\.editSyncUp, action: \\.editSyncUp)) { editSyncUpStore in","      NavigationStack {","        SyncUpFormView(store: editSyncUpStore)","          .navigationTitle(store.syncUp.title)","          .toolbar {","            ToolbarItem(placement: .cancellationAction) {","              Button(\"Cancel\") {","                store.send(.cancelEditButtonTapped)","              }","            }","            ToolbarItem(placement: .confirmationAction) {","              Button(\"Done\") {","                store.send(.doneEditingButtonTapped)","              }","            }","          }","      }","    }","  }","}","","#Preview {","  NavigationStack {","    SyncUpDetailView(","      store: Store(","        initialState: SyncUpDetail.State(","          syncUp: Shared(.mock)","        )","      ) {","        SyncUpDetail()","      }","    )","  }","}"],"identifier":"EditingAndDeletingSyncUp-02-code-0014.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetail#Create-the-sync-up-detail":{"abstract":[{"text":"The “sync-up detail” screen shows all the information of a sync-up, and has many actions that","type":"text"},{"type":"text","text":" "},{"text":"can take place in the screen. The user can edit the sync-up, or start a new meeting in the sync","type":"text"},{"text":" ","type":"text"},{"text":"up, or drill-down to a past meeting, or even delete the meeting.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/syncupdetail#Create-the-sync-up-detail","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail#Create-the-sync-up-detail","kind":"section","title":"Create the sync-up detail","type":"section"},"EditingAndDeletingSyncUp-01-code-0009.swift":{"type":"file","syntax":"swift","fileType":"swift","fileName":"SyncUpDetail.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .deleteButtonTapped:","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"identifier":"EditingAndDeletingSyncUp-01-code-0009.swift","highlights":[{"line":13},{"line":15}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpFormPresentation#Non-exhaustive-testing":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Non-exhaustive-testing","abstract":[{"type":"text","text":"We have now integrated two moderately complex features, the "},{"code":"SyncUpsList","type":"codeVoice"},{"type":"text","text":" and "},{"code":"SyncUpForm","type":"codeVoice"},{"type":"text","text":", and"},{"text":" ","type":"text"},{"type":"text","text":"so its time to write some tests. This will give us the opportunity to prove that the features"},{"type":"text","text":" "},{"type":"text","text":"work in tandem as we expect, and we will explore “non-exhaustive” testing to make our tests less"},{"text":" ","type":"text"},{"text":"fragile.","type":"text"}],"role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/testingsyncupformpresentation#Non-exhaustive-testing","title":"Non-exhaustive testing","type":"section","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/WhatIsSyncUps#A-tour-of-SyncUps":{"url":"\/tutorials\/composablearchitecture\/whatissyncups#A-tour-of-SyncUps","role":"pseudoSymbol","title":"A tour of SyncUps","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#A-tour-of-SyncUps","type":"section","abstract":[{"type":"text","text":"Let’s start with a tour of the application we will be building. It’s called SyncUps, and it’s a"},{"text":" ","type":"text"},{"type":"text","text":"recreation of Apple’s Scrumdinger demo application."}],"kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/WhatIsSyncUps#Create-the-SyncUps-project":{"type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#Create-the-SyncUps-project","kind":"section","abstract":[{"text":"Let’s start with a tour of the application we will be building. It’s called SyncUps, and it’s a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"recreation of Apple’s Scrumdinger demo application."}],"role":"pseudoSymbol","title":"Create the SyncUps project","url":"\/tutorials\/composablearchitecture\/whatissyncups#Create-the-SyncUps-project"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/run(priority:operation:catch:fileID:filePath:line:column:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","abstract":[{"text":"Wraps an asynchronous unit of work that can emit actions any number of times in an effect.","type":"text"}],"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"run","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"priority"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:ScP","text":"TaskPriority","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"operation"},{"kind":"text","text":": ("},{"text":"Send","preciseIdentifier":"s:22ComposableArchitecture4SendV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"catch","kind":"externalParam"},{"text":": ((any ","kind":"text"},{"kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Send","preciseIdentifier":"s:22ComposableArchitecture4SendV"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"text":"async","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":", "},{"text":"filePath","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":", "},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Effect","preciseIdentifier":"s:22ComposableArchitecture6EffectV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">","kind":"text"}],"url":"\/documentation\/composablearchitecture\/effect\/run(priority:operation:catch:fileid:filepath:line:column:)","type":"topic","role":"symbol","title":"run(priority:operation:catch:fileID:filePath:line:column:)","kind":"symbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpDetail":{"url":"\/tutorials\/composablearchitecture\/testingsyncupdetail","role":"project","kind":"project","title":"Testing the sync-up detail","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail","type":"topic","abstract":[{"text":"The ","type":"text"},{"code":"SyncUpDetail","type":"codeVoice"},{"type":"text","text":" feature has slowly become quite complex. It now handles two forms of"},{"type":"text","text":" "},{"text":"navigation (an alert and sheet), it models navigation state with a single enum, and it","type":"text"},{"type":"text","text":" "},{"type":"text","text":"communicates with a parent feature via delegate actions. It’s about time we got some test"},{"text":" ","type":"text"},{"text":"coverage on this feature so we can be sure it works as we expect, and so that we can make future","type":"text"},{"type":"text","text":" "},{"type":"text","text":"changes with confidence."}],"estimatedTime":"10min"},"EditingAndDeletingSyncUp-01-code-0003.swift":{"highlights":[{"line":26},{"line":27},{"line":28},{"line":31},{"line":32},{"line":33}],"fileType":"swift","syntax":"swift","type":"file","fileName":"SyncUpDetail.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case deleteButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .deleteButtonTapped:","        return .none","","      case .editButtonTapped:","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"identifier":"EditingAndDeletingSyncUp-01-code-0003.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm":{"url":"\/tutorials\/composablearchitecture\/syncupform","role":"project","kind":"project","title":"Sync-up form","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm","type":"topic","abstract":[{"type":"text","text":"We will create a new feature with the Composable Architecture that is capable of editing the"},{"text":" ","type":"text"},{"type":"text","text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the"},{"type":"text","text":" "},{"text":"feature to make things a little more interesting.","type":"text"}],"estimatedTime":"15min"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingNavigation#Deleting-a-sync-up":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation#Deleting-a-sync-up","title":"Deleting a sync-up","kind":"section","url":"\/tutorials\/composablearchitecture\/testingnavigation#Deleting-a-sync-up","type":"section","abstract":[{"text":"We have now implemented a navigation stack at the root of our application, and integrated","type":"text"},{"type":"text","text":" "},{"text":"3 features into the stack: the ","type":"text"},{"type":"codeVoice","code":"SyncUpsList"},{"type":"text","text":" feature, the "},{"code":"SyncUpDetail","type":"codeVoice"},{"text":" feature, and the","type":"text"},{"type":"text","text":" "},{"code":"MeetingView","type":"codeVoice"},{"type":"text","text":". Some of these features have quite complex logic binding them together, such as"},{"text":" ","type":"text"},{"type":"text","text":"when one deletes a sync-up from the detail screen it should pop the screen off the stack."}],"role":"pseudoSymbol"},"EditingAndDeletingSyncUp-03-code-0009.swift":{"type":"file","syntax":"swift","fileType":"swift","fileName":"SyncUpDetail.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @Reducer","  enum Destination {","    case alert(AlertState<Alert>)","    case edit(SyncUpForm)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  @ObservableState","  struct State: Equatable {","    @Presents var destination: Destination.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case cancelEditButtonTapped","    case deleteButtonTapped","    case destination(PresentationAction<Destination.Action>)","    case doneEditingButtonTapped","    case editButtonTapped","  }","","  @Dependency(\\.dismiss) var dismiss","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      \/\/ case .alert(.presented(.confirmButtonTapped)):","      case .destination(.presented(.alert(.confirmButtonTapped))):","        @Shared(.fileStorage(.syncUps)) var syncUps: IdentifiedArrayOf<SyncUp> = []","        syncUps.remove(id: state.syncUp.id)","        return .run { _ in await dismiss() }","        ","      case .destination:","        return .none","","      case .cancelEditButtonTapped:","        state.destination = nil","        return .none","","      case .deleteButtonTapped:","        \/\/ state.alert = .deleteSyncUp","        state.destination = .alert(.deleteSyncUp)","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination)","  }","}","extension SyncUpDetail.Destination.State: Equatable {}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"identifier":"EditingAndDeletingSyncUp-03-code-0009.swift","highlights":[{"line":40},{"line":49},{"line":50}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation#Creating-the-app-view":{"title":"Creating the app view","abstract":[{"type":"text","text":"We will wrap the application built so far in a "},{"code":"NavigationStack","type":"codeVoice"},{"type":"text","text":" so that we can navigate to"},{"text":" ","type":"text"},{"type":"text","text":"the detail screen. To do this we will create a new root-level feature that will be responsible"},{"text":" ","type":"text"},{"type":"text","text":"for implementing the logic of the stack and integrating all of the features together."}],"url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation#Creating-the-app-view","type":"section","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-view","role":"pseudoSymbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DismissEffect":{"navigatorTitle":[{"kind":"identifier","text":"DismissEffect"}],"url":"\/documentation\/composablearchitecture\/dismisseffect","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"DismissEffect","kind":"identifier"}],"title":"DismissEffect","abstract":[{"text":"An effect that dismisses the current presentation.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect","role":"symbol","type":"topic","kind":"symbol"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Sync-up-detail":{"abstract":[],"url":"\/tutorials\/buildingsyncups\/sync-up-detail","role":"article","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Sync-up-detail","kind":"article","title":"Sync-up detail","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm#Form-focus-an-approach":{"abstract":[{"text":"We will create a new feature with the Composable Architecture that is capable of editing the","type":"text"},{"type":"text","text":" "},{"text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the","type":"text"},{"text":" ","type":"text"},{"text":"feature to make things a little more interesting.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/syncupform#Form-focus-an-approach","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-an-approach","kind":"section","title":"Form focus: an approach","type":"section"},"EditingAndDeletingSyncUp-02-code-0006.swift":{"highlights":[{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48}],"fileType":"swift","syntax":"swift","type":"file","fileName":"SyncUpDetail.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case alert(PresentationAction<Alert>)","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert:","        return .none","        ","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        state.alert = AlertState {","          TextState(\"Delete?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmButtonTapped) {","            TextState(\"Yes\")","          }","          ButtonState(role: .cancel) {","            TextState(\"Nevermind\")","          }","        } message: {","          TextState(\"Are you sure you want to delete this meeting?\")","        }","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","    .ifLet(\\.$alert, action: \\.alert) ","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"identifier":"EditingAndDeletingSyncUp-02-code-0006.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm#Integrating-the-feature-views-together":{"url":"\/tutorials\/composablearchitecture\/presentingsyncupform#Integrating-the-feature-views-together","role":"pseudoSymbol","title":"Integrating the feature views together","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-views-together","type":"section","abstract":[{"type":"text","text":"We now have two features built: the sync-ups list and the sync-up form. These features do not"},{"text":" ","type":"text"},{"type":"text","text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to"},{"type":"text","text":" "},{"type":"text","text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then"},{"text":" ","type":"text"},{"text":"add that sync-up to the root list.","type":"text"}],"kind":"section"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Persisting-sync-ups-to-disk":{"type":"topic","title":"Persisting sync-ups to disk","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Persisting-sync-ups-to-disk","abstract":[],"url":"\/tutorials\/buildingsyncups\/persisting-sync-ups-to-disk","kind":"article","role":"article"},"EditingAndDeletingSyncUp-03-code-0006.swift":{"type":"file","syntax":"swift","fileType":"swift","fileName":"SyncUpDetail.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @Reducer","  enum Destination {","    case alert(AlertState<Alert>)","    case edit(SyncUpForm)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  @ObservableState","  struct State: Equatable {","    @Presents var destination: Destination.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case cancelEditButtonTapped","    case deleteButtonTapped","    case destination(PresentationAction<Destination.Action>)","    case doneEditingButtonTapped","    case editButtonTapped","  }","","  @Dependency(\\.dismiss) var dismiss","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      \/\/ case .alert(.presented(.confirmButtonTapped)):","      case .destination(.presented(.alert(.confirmButtonTapped))):","        @Shared(.fileStorage(.syncUps)) var syncUps: IdentifiedArrayOf<SyncUp> = []","        syncUps.remove(id: state.syncUp.id)","        return .run { _ in await dismiss() }","","      case .alert(.dismiss):","        return .none","","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .delegate:","        return .none","","      case .deleteButtonTapped:","        state.alert = .deleteSyncUp","        return .none","","      case .destination:","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination)","  }","}","extension SyncUpDetail.Destination.State: Equatable {}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"identifier":"EditingAndDeletingSyncUp-03-code-0006.swift","highlights":[{"line":35},{"line":36}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpFormPresentation#Adding-a-sync-up":{"url":"\/tutorials\/composablearchitecture\/testingsyncupformpresentation#Adding-a-sync-up","role":"pseudoSymbol","kind":"section","title":"Adding a sync-up","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Adding-a-sync-up","type":"section","abstract":[{"text":"We have now integrated two moderately complex features, the ","type":"text"},{"code":"SyncUpsList","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SyncUpForm"},{"text":", and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"so its time to write some tests. This will give us the opportunity to prove that the features"},{"type":"text","text":" "},{"text":"work in tandem as we expect, and we will explore “non-exhaustive” testing to make our tests less","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"fragile."}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp","kind":"project","estimatedTime":"30min","abstract":[{"type":"text","text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and"},{"text":" ","type":"text"},{"text":"deleting the sync-up. This will force us to face a number of common problems in app development","type":"text"},{"type":"text","text":" "},{"text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns.","type":"text"}],"role":"project","title":"Editing and deleting a sync-up","url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Presenting-the-sync-up-form":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Presenting-the-sync-up-form","url":"\/tutorials\/buildingsyncups\/presenting-the-sync-up-form","title":"Presenting the sync-up form","role":"article","abstract":[],"type":"topic","kind":"article"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation#Creating-the-app-feature":{"abstract":[{"text":"We will wrap the application built so far in a ","type":"text"},{"type":"codeVoice","code":"NavigationStack"},{"text":" so that we can navigate to","type":"text"},{"text":" ","type":"text"},{"text":"the detail screen. To do this we will create a new root-level feature that will be responsible","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for implementing the logic of the stack and integrating all of the features together."}],"url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation#Creating-the-app-feature","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-feature","kind":"section","type":"section","title":"Creating the app feature"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Send":{"abstract":[{"text":"A type that can send actions back into the system when used from","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)"},{"text":".","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Send","kind":"identifier"}],"title":"Send","kind":"symbol","navigatorTitle":[{"text":"Send","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Send","url":"\/documentation\/composablearchitecture\/send","type":"topic"},"EditingAndDeletingSyncUp-01-code-0004.swift":{"highlights":[{"line":25}],"fileType":"swift","syntax":"swift","type":"file","fileName":"SyncUpDetail.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case deleteButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .deleteButtonTapped:","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"identifier":"EditingAndDeletingSyncUp-01-code-0004.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps":{"estimatedTime":"10min","url":"\/tutorials\/composablearchitecture\/listsofsyncups","kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps","abstract":[{"type":"text","text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the"},{"type":"text","text":" "},{"type":"text","text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as"},{"text":" ","type":"text"},{"type":"text","text":"the app evolves."}],"type":"topic","title":"Lists of sync-ups","role":"project"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Record-meeting":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Record-meeting","kind":"article","abstract":[],"role":"article","title":"Record meeting","url":"\/tutorials\/buildingsyncups\/record-meeting"},"EditingAndDeletingSyncUp-03-code-0005.swift":{"type":"file","syntax":"swift","fileType":"swift","fileName":"SyncUpDetail.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @Reducer","  enum Destination {","    case alert(AlertState<Alert>)","    case edit(SyncUpForm)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  @ObservableState","  struct State: Equatable {","    @Presents var destination: Destination.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case cancelEditButtonTapped","    case deleteButtonTapped","    case destination(PresentationAction<Destination.Action>)","    case doneEditingButtonTapped","    case editButtonTapped","  }","","  @Dependency(\\.dismiss) var dismiss","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert(.presented(.confirmButtonTapped)):","        @Shared(.fileStorage(.syncUps)) var syncUps: IdentifiedArrayOf<SyncUp> = []","        syncUps.remove(id: state.syncUp.id)","        return .run { _ in await dismiss() }","","      case .alert(.dismiss):","        return .none","","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .delegate:","        return .none","","      case .deleteButtonTapped:","        state.alert = .deleteSyncUp","        return .none","","      case .destination:","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","      }","    }","    \/\/ .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","    \/\/   SyncUpForm()","    \/\/ }","    \/\/ .ifLet(\\.$alert, action: \\.alert)","    .ifLet(\\.$destination, action: \\.destination)","  }","}","extension SyncUpDetail.Destination.State: Equatable {}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"identifier":"EditingAndDeletingSyncUp-03-code-0005.swift","highlights":[{"line":54},{"line":55},{"line":56},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73}]},"EditingAndDeletingSyncUp-02-cover-480p.mov":{"variants":[{"url":"\/videos\/ComposableArchitecture\/EditingAndDeletingSyncUp-02-cover-480p.mov","traits":["1x","light"]}],"alt":null,"poster":null,"type":"video","identifier":"EditingAndDeletingSyncUp-02-cover-480p.mov"},"EditingAndDeletingSyncUp-02-code-0009.swift":{"type":"file","syntax":"swift","fileType":"swift","fileName":"SyncUpDetail.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case alert(PresentationAction<Alert>)","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert(.presented(.confirmButtonTapped)):","        ","      case .alert(.dismiss):","        return .none","","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        state.alert = .deleteSyncUp","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","    .ifLet(\\.$alert, action: \\.alert) ","  }","}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"identifier":"EditingAndDeletingSyncUp-02-code-0009.swift","highlights":[{"line":32}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm#Form-focus-a-better-approach":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-a-better-approach","url":"\/tutorials\/composablearchitecture\/syncupform#Form-focus-a-better-approach","title":"Form focus: a better approach","role":"pseudoSymbol","abstract":[{"text":"We will create a new feature with the Composable Architecture that is capable of editing the","type":"text"},{"type":"text","text":" "},{"text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the","type":"text"},{"text":" ","type":"text"},{"text":"feature to make things a little more interesting.","type":"text"}],"type":"section","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpFormPresentation":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation","url":"\/tutorials\/composablearchitecture\/testingsyncupformpresentation","title":"Testing the add sync-up flow","role":"project","abstract":[{"text":"We have now integrated two moderately complex features, the ","type":"text"},{"type":"codeVoice","code":"SyncUpsList"},{"text":" and ","type":"text"},{"code":"SyncUpForm","type":"codeVoice"},{"text":", and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"so its time to write some tests. This will give us the opportunity to prove that the features"},{"text":" ","type":"text"},{"type":"text","text":"work in tandem as we expect, and we will explore “non-exhaustive” testing to make our tests less"},{"text":" ","type":"text"},{"text":"fragile.","type":"text"}],"estimatedTime":"10min","type":"topic","kind":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/RecordMeetingFeature#Create-a-new-feature":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Create-a-new-feature","url":"\/tutorials\/composablearchitecture\/recordmeetingfeature#Create-a-new-feature","abstract":[{"type":"text","text":"Let’s get the basics of a new feature into place that we can navigate to, and then we will"},{"text":" ","type":"text"},{"text":"slowly layer on its complex logic and behavior, such as the timer and speech recognizer.","type":"text"}],"role":"pseudoSymbol","type":"section","title":"Create a new feature","kind":"section"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Navigating-to-sync-up-detail":{"kind":"article","role":"article","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Navigating-to-sync-up-detail","type":"topic","title":"Navigating to sync-up detail","url":"\/tutorials\/buildingsyncups\/navigating-to-sync-up-detail","abstract":[]},"EditingAndDeletingSyncUp-02-code-0003.swift":{"highlights":[{"line":14}],"fileType":"swift","syntax":"swift","type":"file","fileName":"SyncUpDetail.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case alert(PresentationAction<Alert>)","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"identifier":"EditingAndDeletingSyncUp-02-code-0003.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpForm#Removing-attendees":{"url":"\/tutorials\/composablearchitecture\/testingsyncupform#Removing-attendees","role":"pseudoSymbol","title":"Removing attendees","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Removing-attendees","type":"section","abstract":[{"text":"We now have a moderately complex feature for editing the details of a sync-up, the ","type":"text"},{"code":"SyncUpForm","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"reducer. Let’s get some test coverage on the feature, and doing so will force us to come"},{"type":"text","text":" "},{"type":"text","text":"face-to-face with dependencies for the first time in this tutorial."}],"kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/RecordMeetingFeature#Navigating-to-the-record-meeting-feature":{"title":"Navigating to the record meeting feature","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Navigating-to-the-record-meeting-feature","type":"section","url":"\/tutorials\/composablearchitecture\/recordmeetingfeature#Navigating-to-the-record-meeting-feature","kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"Let’s get the basics of a new feature into place that we can navigate to, and then we will"},{"text":" ","type":"text"},{"type":"text","text":"slowly layer on its complex logic and behavior, such as the timer and speech recognizer."}]},"EditingAndDeletingSyncUp-02-code-0010.swift":{"type":"file","syntax":"swift","fileType":"swift","fileName":"SyncUpDetail.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case alert(PresentationAction<Alert>)","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert(.presented(.confirmButtonTapped)):","        @Shared(.fileStorage(.syncUps)) var syncUps: IdentifiedArrayOf<SyncUp> = []","","      case .alert(.dismiss):","        return .none","","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        state.alert = .deleteSyncUp","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","    .ifLet(\\.$alert, action: \\.alert) ","  }","}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"identifier":"EditingAndDeletingSyncUp-02-code-0010.swift","highlights":[{"line":30},{"line":31}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/MeetingNavigation#The-meeting-screen":{"abstract":[{"text":"Now that we have a navigation stack in place we can start navigating to other features in the","type":"text"},{"type":"text","text":" "},{"text":"application. The simplest is the meeting screen, which allows you to see the details of a","type":"text"},{"text":" ","type":"text"},{"text":"previous recorded meeting.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/meetingnavigation#The-meeting-screen","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#The-meeting-screen","kind":"section","title":"The meeting screen","type":"section"},"EditingAndDeletingSyncUp-01-cover-480p.mov":{"variants":[{"traits":["1x","light"],"url":"\/videos\/ComposableArchitecture\/EditingAndDeletingSyncUp-01-cover-480p.mov"}],"alt":null,"poster":null,"type":"video","identifier":"EditingAndDeletingSyncUp-01-cover-480p.mov"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#Controlling-dependencies-early":{"abstract":[{"text":"The first major piece of logic and behavior we will introduce to the record meeting feature is","type":"text"},{"type":"text","text":" "},{"text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"we need to implement nuanced logic to figure out when to proceed to the next speaker."}],"type":"section","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/implementingtimer#Controlling-dependencies-early","title":"Controlling dependencies early","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Controlling-dependencies-early","kind":"section"},"EditingAndDeletingSyncUp-03-code-0002.swift":{"syntax":"swift","type":"file","fileName":"SyncUpDetail.swift","identifier":"EditingAndDeletingSyncUp-03-code-0002.swift","highlights":[{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13}],"fileType":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @Reducer","  enum Destination {","    case alert(AlertState<Alert>)","    case edit(SyncUpForm)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","  \/\/ ...","}","extension SyncUpDetail.Destination.State: Equatable {}","","struct SyncUpDetailView: View {","  \/\/ ...","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps#SyncUpsList-feature":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#SyncUpsList-feature","title":"SyncUpsList feature","url":"\/tutorials\/composablearchitecture\/listsofsyncups#SyncUpsList-feature","role":"pseudoSymbol","abstract":[{"text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the","type":"text"},{"type":"text","text":" "},{"text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as","type":"text"},{"text":" ","type":"text"},{"text":"the app evolves.","type":"text"}],"type":"section","kind":"section"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","kind":"symbol","type":"topic","abstract":[{"text":"A protocol that describes how to evolve the current state of an application to the next state,","type":"text"},{"type":"text","text":" "},{"text":"given an action, and describes what ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","type":"reference","isActive":true},{"text":"s should be executed later by the store, if any.","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"}],"title":"Reducer","navigatorTitle":[{"text":"Reducer","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/reducer","role":"symbol"},"EditingAndDeletingSyncUp-02-code-0005.swift":{"highlights":[{"line":57}],"fileType":"swift","syntax":"swift","type":"file","fileName":"SyncUpDetail.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case alert(PresentationAction<Alert>)","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert:","        return .none","        ","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","    .ifLet(\\.$alert, action: \\.alert) ","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"identifier":"EditingAndDeletingSyncUp-02-code-0005.swift"},"EditingAndDeletingSyncUp-02-code-0004.swift":{"type":"file","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case alert(PresentationAction<Alert>)","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert:","        return .none","        ","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","    .ifLet(\\.$alert, action: \\.alert) {","      ","    }","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"fileType":"swift","syntax":"swift","highlights":[{"line":29},{"line":30},{"line":31},{"line":57},{"line":58},{"line":59}],"identifier":"EditingAndDeletingSyncUp-02-code-0004.swift","fileName":"SyncUpDetail.swift"},"EditingAndDeletingSyncUp-01-code-0002.swift":{"highlights":[{"line":15}],"content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case deleteButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .deleteButtonTapped:","        return .none","","      case .editButtonTapped:","        return .none","      }","    }","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"identifier":"EditingAndDeletingSyncUp-01-code-0002.swift","type":"file","fileType":"swift","fileName":"SyncUpDetail.swift","syntax":"swift"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Lists-of-sync-ups":{"abstract":[],"url":"\/tutorials\/buildingsyncups\/lists-of-sync-ups","role":"article","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Lists-of-sync-ups","kind":"article","title":"Lists of sync-ups","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PersistingSyncUps#Persisting-data-to-disk":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Persisting-data-to-disk","url":"\/tutorials\/composablearchitecture\/persistingsyncups#Persisting-data-to-disk","title":"Persisting data to disk","role":"pseudoSymbol","abstract":[{"text":"Now that we have the ability to add and remove sync-ups from the application, let’s add some","type":"text"},{"type":"text","text":" "},{"text":"persistence. This will involve using the “shared state” tools from the library, such as","type":"text"},{"text":" ","type":"text"},{"overridingTitle":"@Shared","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","overridingTitleInlineContent":[{"code":"@Shared","type":"codeVoice"}],"type":"reference","isActive":true},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:decoder:encoder:)","isActive":true},{"text":".","type":"text"}],"type":"section","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/RecordMeetingFeature":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature","title":"The RecordMeeting feature","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/recordmeetingfeature","abstract":[{"type":"text","text":"Let’s get the basics of a new feature into place that we can navigate to, and then we will"},{"text":" ","type":"text"},{"type":"text","text":"slowly layer on its complex logic and behavior, such as the timer and speech recognizer."}],"role":"project","estimatedTime":"5min"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Presents()":{"fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Presents"},{"text":"()","kind":"text"}],"role":"symbol","title":"Presents()","abstract":[{"type":"text","text":"Wraps a property with "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","isActive":true,"type":"reference"},{"type":"text","text":" and observes it."}],"url":"\/documentation\/composablearchitecture\/presents()","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()","type":"topic","kind":"symbol"},"EditingAndDeletingSyncUp-02-code-0008.swift":{"type":"file","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case alert(PresentationAction<Alert>)","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert(.presented(.confirmButtonTapped)):","        ","      case .alert(.dismiss):","","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        state.alert = .deleteSyncUp","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","    .ifLet(\\.$alert, action: \\.alert) ","  }","}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"fileType":"swift","syntax":"swift","highlights":[{"line":29},{"line":31},{"line":32}],"identifier":"EditingAndDeletingSyncUp-02-code-0008.swift","fileName":"SyncUpDetail.swift"},"http://github.com/pointfreeco/swiftui-navigation":{"type":"link","titleInlineContent":[{"type":"text","text":"SwiftUINavigation"}],"identifier":"http:\/\/github.com\/pointfreeco\/swiftui-navigation","title":"SwiftUINavigation","url":"http:\/\/github.com\/pointfreeco\/swiftui-navigation"},"EditingAndDeletingSyncUp-03-code-0004.swift":{"type":"file","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @Reducer","  enum Destination {","    case alert(AlertState<Alert>)","    case edit(SyncUpForm)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  @ObservableState","  struct State: Equatable {","    @Presents var destination: Destination.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    \/\/ case alert(PresentationAction<Alert>)","    case cancelEditButtonTapped","    case deleteButtonTapped","    case destination(PresentationAction<Destination.Action>)","    case doneEditingButtonTapped","    case editButtonTapped","    \/\/ case editSyncUp(PresentationAction<SyncUpForm.Action>)","    \/\/ enum Alert {","    \/\/   case confirmButtonTapped","    \/\/ }","  }","","  @Dependency(\\.dismiss) var dismiss","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert(.presented(.confirmButtonTapped)):","        @Shared(.fileStorage(.syncUps)) var syncUps: IdentifiedArrayOf<SyncUp> = []","        syncUps.remove(id: state.syncUp.id)","        return .run { _ in await dismiss() }","","      case .alert(.dismiss):","        return .none","","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .delegate:","        return .none","","      case .deleteButtonTapped:","        state.alert = .deleteSyncUp","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","    .ifLet(\\.$alert, action: \\.alert) ","  }","}","extension SyncUpDetail.Destination.State: Equatable {}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"fileType":"swift","syntax":"swift","highlights":[{"line":23},{"line":26},{"line":29},{"line":30},{"line":31},{"line":32}],"identifier":"EditingAndDeletingSyncUp-03-code-0004.swift","fileName":"SyncUpDetail.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpDetail#Testing-the-edit-flow":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail#Testing-the-edit-flow","url":"\/tutorials\/composablearchitecture\/testingsyncupdetail#Testing-the-edit-flow","abstract":[{"type":"text","text":"The "},{"code":"SyncUpDetail","type":"codeVoice"},{"text":" feature has slowly become quite complex. It now handles two forms of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"navigation (an alert and sheet), it models navigation state with a single enum, and it"},{"type":"text","text":" "},{"text":"communicates with a parent feature via delegate actions. It’s about time we got some test","type":"text"},{"type":"text","text":" "},{"type":"text","text":"coverage on this feature so we can be sure it works as we expect, and so that we can make future"},{"text":" ","type":"text"},{"text":"changes with confidence.","type":"text"}],"role":"pseudoSymbol","type":"section","title":"Testing the edit flow","kind":"section"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","role":"symbol","url":"\/documentation\/composablearchitecture\/reducer()","kind":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Helps implement the conformance to the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true,"type":"reference"},{"type":"text","text":" protocol for a type."}],"title":"Reducer()","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/MeetingNavigation":{"url":"\/tutorials\/composablearchitecture\/meetingnavigation","role":"project","title":"Navigating to a meeting","estimatedTime":"5min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation","type":"topic","abstract":[{"type":"text","text":"Now that we have a navigation stack in place we can start navigating to other features in the"},{"text":" ","type":"text"},{"type":"text","text":"application. The simplest is the meeting screen, which allows you to see the details of a"},{"type":"text","text":" "},{"type":"text","text":"previous recorded meeting."}],"kind":"project"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q","title":"ifLet(_:action:destination:fileID:filePath:line:column:)","url":"\/documentation\/composablearchitecture\/reducer\/iflet(_:action:destination:fileid:filepath:line:column:)-4ub6q","type":"topic","role":"symbol","abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain that works on an optional property of parent state."}],"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ifLet"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"DestinationState"},{"kind":"text","text":", "},{"text":"DestinationAction","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"Destination"},{"text":">(","kind":"text"},{"text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"PresentationState","preciseIdentifier":"s:22ComposableArchitecture17PresentationStateV"},{"kind":"text","text":"<"},{"text":"DestinationState","kind":"typeIdentifier"},{"text":">>, ","kind":"text"},{"kind":"externalParam","text":"action"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha","text":"CaseKeyPath"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"PresentationAction","preciseIdentifier":"s:22ComposableArchitecture18PresentationActionO"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"DestinationAction"},{"text":">>, ","kind":"text"},{"text":"destination","kind":"externalParam"},{"kind":"text","text":": () -> "},{"text":"Destination","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"filePath","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"column"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"kind":"text","text":") -> "},{"text":"some","kind":"keyword"},{"kind":"text","text":" "},{"text":"Reducer","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"State","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">\n"}]},"doc://ComposableArchitecture/tutorials/BuildingSyncUps":{"kind":"overview","role":"overview","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps","type":"topic","title":"Building SyncUps","url":"\/tutorials\/buildingsyncups","abstract":[{"text":"The SyncUps application is a recreation of one of Apple’s more interesting demo applications,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Scrumdinger. We recreate it from scratch using the Composable Architecture, with a focus on"},{"type":"text","text":" "},{"type":"text","text":"domain modeling, controlling dependencies, and testability."}]},"EditingAndDeletingSyncUp-03-code-0008.swift":{"highlights":[{"line":45}],"content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @Reducer","  enum Destination {","    case alert(AlertState<Alert>)","    case edit(SyncUpForm)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  @ObservableState","  struct State: Equatable {","    @Presents var destination: Destination.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case cancelEditButtonTapped","    case deleteButtonTapped","    case destination(PresentationAction<Destination.Action>)","    case doneEditingButtonTapped","    case editButtonTapped","  }","","  @Dependency(\\.dismiss) var dismiss","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      \/\/ case .alert(.presented(.confirmButtonTapped)):","      case .destination(.presented(.alert(.confirmButtonTapped))):","        @Shared(.fileStorage(.syncUps)) var syncUps: IdentifiedArrayOf<SyncUp> = []","        syncUps.remove(id: state.syncUp.id)","        return .run { _ in await dismiss() }","","      case .destination:","        return .none","","      case .cancelEditButtonTapped:","        state.destination = nil","        return .none","","      case .delegate:","        return .none","","      case .deleteButtonTapped:","        state.alert = .deleteSyncUp","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination)","  }","}","extension SyncUpDetail.Destination.State: Equatable {}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"identifier":"EditingAndDeletingSyncUp-03-code-0008.swift","type":"file","fileType":"swift","fileName":"SyncUpDetail.swift","syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingNavigation":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation","url":"\/tutorials\/composablearchitecture\/testingnavigation","abstract":[{"type":"text","text":"We have now implemented a navigation stack at the root of our application, and integrated"},{"text":" ","type":"text"},{"type":"text","text":"3 features into the stack: the "},{"code":"SyncUpsList","type":"codeVoice"},{"type":"text","text":" feature, the "},{"code":"SyncUpDetail","type":"codeVoice"},{"text":" feature, and the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"MeetingView"},{"text":". Some of these features have quite complex logic binding them together, such as","type":"text"},{"type":"text","text":" "},{"type":"text","text":"when one deletes a sync-up from the detail screen it should pop the screen off the stack."}],"estimatedTime":"10min","role":"project","type":"topic","title":"Testing navigation","kind":"project"},"EditingAndDeletingSyncUp-03-code-0007.swift":{"type":"file","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @Reducer","  enum Destination {","    case alert(AlertState<Alert>)","    case edit(SyncUpForm)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  @ObservableState","  struct State: Equatable {","    @Presents var destination: Destination.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case cancelEditButtonTapped","    case deleteButtonTapped","    case destination(PresentationAction<Destination.Action>)","    case doneEditingButtonTapped","    case editButtonTapped","  }","","  @Dependency(\\.dismiss) var dismiss","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      \/\/ case .alert(.presented(.confirmButtonTapped)):","      case .destination(.presented(.alert(.confirmButtonTapped))):","        @Shared(.fileStorage(.syncUps)) var syncUps: IdentifiedArrayOf<SyncUp> = []","        syncUps.remove(id: state.syncUp.id)","        return .run { _ in await dismiss() }","","      case .destination:","        return .none","","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .delegate:","        return .none","","      case .deleteButtonTapped:","        state.alert = .deleteSyncUp","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination)","  }","}","extension SyncUpDetail.Destination.State: Equatable {}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"fileType":"swift","syntax":"swift","highlights":[{"line":41}],"identifier":"EditingAndDeletingSyncUp-03-code-0007.swift","fileName":"SyncUpDetail.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#Testing-the-timer":{"abstract":[{"text":"The first major piece of logic and behavior we will introduce to the record meeting feature is","type":"text"},{"type":"text","text":" "},{"text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and","type":"text"},{"text":" ","type":"text"},{"text":"we need to implement nuanced logic to figure out when to proceed to the next speaker.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/implementingtimer#Testing-the-timer","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Testing-the-timer","title":"Testing the timer","type":"section"},"EditingAndDeletingSyncUp-01-code-0007.swift":{"highlights":[{"line":82},{"line":83},{"line":84},{"line":85},{"line":86},{"line":87},{"line":88},{"line":89},{"line":90},{"line":91},{"line":92}],"content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  \/\/ ...","}","","struct SyncUpDetailView: View {","  @Bindable var store: StoreOf<SyncUpDetail>","","  var body: some View {","    Form {","      Section {","        NavigationLink {","        } label: {","          Label(\"Start Meeting\", systemImage: \"timer\")","            .font(.headline)","            .foregroundColor(.accentColor)","        }","        HStack {","          Label(\"Length\", systemImage: \"clock\")","          Spacer()","          Text(store.syncUp.duration.formatted(.units()))","        }","","        HStack {","          Label(\"Theme\", systemImage: \"paintpalette\")","          Spacer()","          Text(store.syncUp.theme.name)","            .padding(4)","            .foregroundColor(store.syncUp.theme.accentColor)","            .background(store.syncUp.theme.mainColor)","            .cornerRadius(4)","        }","      } header: {","        Text(\"Sync-up Info\")","      }","","      if !store.syncUp.meetings.isEmpty {","        Section {","          ForEach(store.syncUp.meetings) { meeting in","            Button {","            } label: {","              HStack {","                Image(systemName: \"calendar\")","                Text(meeting.date, style: .date)","                Text(meeting.date, style: .time)","              }","            }","          }","        } header: {","          Text(\"Past meetings\")","        }","      }","","      Section {","        ForEach(store.syncUp.attendees) { attendee in","          Label(attendee.name, systemImage: \"person\")","        }","      } header: {","        Text(\"Attendees\")","      }","","      Section {","        Button(\"Delete\") {","          store.send(.deleteButtonTapped)","        }","        .foregroundColor(.red)","        .frame(maxWidth: .infinity)","      }","    }","    .navigationTitle(Text(store.syncUp.title))","    .toolbar {","      Button(\"Edit\") {","        store.send(.editButtonTapped)","      }","    }","    .sheet(item: $store.scope(state: \\.editSyncUp, action: \\.editSyncUp)) { editSyncUpStore in","      NavigationStack {","        SyncUpFormView(store: editSyncUpStore)","          .navigationTitle(store.syncUp.title)","          .toolbar {","            ToolbarItem(placement: .cancellationAction) {","              Button(\"Cancel\") {","              }","            }","            ToolbarItem(placement: .confirmationAction) {","              Button(\"Done\") {","              }","            }","          }","      }","    }","  }","}","","#Preview {","  NavigationStack {","    SyncUpDetailView(","      store: Store(","        initialState: SyncUpDetail.State(","          syncUp: Shared(.mock)","        )","      ) {","        SyncUpDetail()","      }","    )","  }","}"],"identifier":"EditingAndDeletingSyncUp-01-code-0007.swift","type":"file","fileType":"swift","fileName":"SyncUpDetail.swift","syntax":"swift"},"EditingAndDeletingSyncUp-03-code-0012.swift":{"type":"file","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @Reducer","  enum Destination {","    case alert(AlertState<Alert>)","    case edit(SyncUpForm)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  @ObservableState","  struct State: Equatable {","    @Presents var destination: Destination.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case cancelEditButtonTapped","    case deleteButtonTapped","    case destination(PresentationAction<Destination.Action>)","    case doneEditingButtonTapped","    case editButtonTapped","  }","","  @Dependency(\\.dismiss) var dismiss","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      \/\/ case .alert(.presented(.confirmButtonTapped)):","      case .destination(.presented(.alert(.confirmButtonTapped))):","        @Shared(.fileStorage(.syncUps)) var syncUps: IdentifiedArrayOf<SyncUp> = []","        syncUps.remove(id: state.syncUp.id)","        return .run { _ in await dismiss() }","","      case .destination:","        return .none","","      case .cancelEditButtonTapped:","        state.destination = nil","        return .none","","      case .deleteButtonTapped:","        state.destination = .alert(.deleteSyncUp)","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.destination?.edit?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.destination = nil","        return .none","","      case .editButtonTapped:","        \/\/ state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        state.destination = .edit(SyncUpForm.State(syncUp: state.syncUp))","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination)","  }","}","extension SyncUpDetail.Destination.State: Equatable {}","","extension AlertState where Action == SyncUpDetail.Destination.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"fileType":"swift","syntax":"swift","highlights":[{"line":70}],"identifier":"EditingAndDeletingSyncUp-03-code-0012.swift","fileName":"SyncUpDetail.swift"},"EditingAndDeletingSyncUp-03-code-0011.swift":{"highlights":[{"line":60},{"line":61}],"content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @Reducer","  enum Destination {","    case alert(AlertState<Alert>)","    case edit(SyncUpForm)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  @ObservableState","  struct State: Equatable {","    @Presents var destination: Destination.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case cancelEditButtonTapped","    case deleteButtonTapped","    case destination(PresentationAction<Destination.Action>)","    case doneEditingButtonTapped","    case editButtonTapped","  }","","  @Dependency(\\.dismiss) var dismiss","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      \/\/ case .alert(.presented(.confirmButtonTapped)):","      case .destination(.presented(.alert(.confirmButtonTapped))):","        @Shared(.fileStorage(.syncUps)) var syncUps: IdentifiedArrayOf<SyncUp> = []","        syncUps.remove(id: state.syncUp.id)","        return .run { _ in await dismiss() }","","      case .destination:","        return .none","","      case .cancelEditButtonTapped:","        state.destination = nil","        return .none","","      case .deleteButtonTapped:","        state.destination = .alert(.deleteSyncUp)","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.destination?.edit?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.destination = nil","        return .none","","      case .editButtonTapped:","        \/\/ state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        state.destination = .edit(SyncUpForm.State(syncUp: state.syncUp))","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination)","  }","}","extension SyncUpDetail.Destination.State: Equatable {}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"identifier":"EditingAndDeletingSyncUp-03-code-0011.swift","type":"file","fileType":"swift","fileName":"SyncUpDetail.swift","syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetail":{"title":"Sync-up detail","abstract":[{"type":"text","text":"The “sync-up detail” screen shows all the information of a sync-up, and has many actions that"},{"text":" ","type":"text"},{"type":"text","text":"can take place in the screen. The user can edit the sync-up, or start a new meeting in the sync"},{"type":"text","text":" "},{"text":"up, or drill-down to a past meeting, or even delete the meeting.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/syncupdetail","estimatedTime":"5min","type":"topic","kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail","role":"project"}}}